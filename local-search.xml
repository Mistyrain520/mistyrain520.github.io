<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AI入门-- 概念01</title>
    <link href="/2025/03/05/AI%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B501/"/>
    <url>/2025/03/05/AI%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B501/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="AI分类"><a href="#AI分类" class="headerlink" title="AI分类"></a>AI分类</h3><ol><li>NLP（Natural Language Processing）: 是AI的一个子领域，专注于使计算机能够理解、解释和生成人类语言。GPT和ChatGPT都是NLP领域的技术成果。</li><li>LLM（Large Language Model）: 是指包含数亿甚至更多参数的语言模型，它们在大量文本数据上进行训练，以理解和生成自然语言。GPT系列模型就是LLM的代表。</li><li>GPT（Generative Pre-trained Transformer）: 是一种自然语言处理（NLP）的模型，由OpenAI开发。GPT的目标是理解和生成人类的自然语言，通过在大量文本数据上进行预训练，学习语言的各种模式和知识。</li><li>ChatGPT: 是基于GPT模型构建的聊天机器人，能够生成文本，回答问题和进行自然语言对话。它是GPT模型的一个具体应用实例，用于实现对话任务。除了 GPT 还有其他的很多优秀的模型，如 Google 的 Genmini，Meta 开源的 Llama 等等。</li><li>AIGC（AI Generated Content）: 是指利用AI技术自动生成的内容，例如文本、图像、音乐等。这是一种应用AI技术生成新内容的方法，可以看作是AI在创意产业中的应用。</li><li>LangChain : 是一个AI 开发框架，专注于构建由语言模型驱动的应用程序。它提供了一系列的组件和用例特定链，以帮助开发者创建聊天机器人、智能问答工具、摘要服务等应用程序。LangChain 可以与大型语言模型（如 GPT-3）结合使用，通过提供 Prompt templates、LLMs、Agents 和 Memory 等模块化的抽象组件，来构建高级的 AI 应用</li><li>Ollama 是一个开源的大型语言模型服务工具，它允许用户快速在本地运行大语言模型（如 Llama 3）。Ollama 旨在简化 AI 模型的开发和使用过程，使得无论是 AI 专业人士还是新手都能轻松地使用和开发 AI 应用。Ollama 支持多种主流模型，并且提供了与 OpenAI API 兼容的框架，让开发者可以更容易地将现有应用程序与 Ollama 相连接<br>AGI（Artificial General Intelligence）: 是指能够执行任何人类智能任务的机器智能，是一种理论上的AI形式，目前还未实现。AGI与目前普遍存在的专用或窄AI（ANI）不同，后者只能在特定任务上表现出智能</li></ol><h3 id="LLM"><a href="#LLM" class="headerlink" title="LLM"></a>LLM</h3><ul><li>base LLM。这类是说，预测下一个最可能出现的词。假如你给一个指令，法国的首都是什么。根据网上文章，LLM可能会给你：法国最大的城市是什么。</li><li>instruction TunedLLM。这个就是指令学习LLM。遵循指令返回。假如你给一个指令，法国的首都是什么，它就告诉你是巴黎。这类是目前大多数的研究方向。</li></ul><p>这里提到了一种叫做 RLHF 的技术用来完善LLM训练强化学习。暂时不清楚啥是RLHF。暂且放一边。</p><h3 id="提示工程-prompts"><a href="#提示工程-prompts" class="headerlink" title="提示工程 prompts"></a>提示工程 prompts</h3><p><a href="https://learn.deeplearning.ai/courses/chatgpt-prompt-eng/lesson/zi9lz/guidelines">官网传递</a>《面向开发者的 ChatGPT 提示工程》教程<br>建议食用方式：bilibili搜同名教程</p><p>根据视频总结，如何写清晰具体的prompts</p><h5 id="清晰具体的指令"><a href="#清晰具体的指令" class="headerlink" title="清晰具体的指令"></a>清晰具体的指令</h5><ol><li>分隔符（看官方例子很好理解，就是具体让模型知道具体的指令文字，避免被干扰）</li></ol><ul><li>Triple quotes (“”””) (三引号)</li><li>Triple backticks (“```”) (三个反引号)</li><li>Triple dashes (“—“) (三个短横线)</li><li>Angle brackets (“&lt; &gt;”) (尖括号)</li><li>XML tags (“<tag> </tag>“) (XML 标签)<br>XML标签是XML语言中的基本组成单元，用于标记和描述数据。XML标签通常成对出现，包括开始标签和结束标签。</li></ul><ol start="2"><li>结构化输出（这个更好理解了，让它返回JSON XML之类的格式）</li><li>要求检查条件是否满足</li><li>简要提示语（其实就是，你是一个资深律师，现在你XX）<br>总结，不如看这个： <a href="https://github.com/RUCAIBox/LLMSurvey/blob/main/Prompts/README.md">https://github.com/RUCAIBox/LLMSurvey/blob/main/Prompts/README.md</a><h5 id="给LLM更多时间思考"><a href="#给LLM更多时间思考" class="headerlink" title="给LLM更多时间思考"></a>给LLM更多时间思考</h5></li></ol><ul><li>让模型按照某些步骤来做<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Your task <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> perform <span class="hljs-keyword">the</span> following actions:<br><br>Summarize <span class="hljs-keyword">the</span> following <span class="hljs-built_in">text</span> delimited <span class="hljs-keyword">by</span> &lt;&gt;&lt;&gt; <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> sentence.<br><br>Translate <span class="hljs-keyword">the</span> summary <span class="hljs-keyword">into</span> French.<br><br>List each <span class="hljs-built_in">name</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> French summary.<br><br>Output a json object <span class="hljs-keyword">that</span> <span class="hljs-keyword">contains</span> <span class="hljs-keyword">the</span> following keys: french_summary, num_names.<br><br>Use <span class="hljs-keyword">the</span> following format:<br><br>Text: &lt;<span class="hljs-built_in">text</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">summarize</span>&gt;<br><br>Summary: &lt;summary&gt;<br><br>Translation: &lt;summary translation&gt;<br><br>Names: &lt;<span class="hljs-built_in">list</span> <span class="hljs-keyword">of</span> names <span class="hljs-keyword">in</span> Italian summary&gt;<br><br>Output JSON: &lt;json <span class="hljs-keyword">with</span> summary <span class="hljs-keyword">and</span> num_names&gt;<br><br>Text: &lt;&#123;<span class="hljs-built_in">text</span>&#125;&gt;<br></code></pre></td></tr></table></figure></li><li>Instruct the model to work out its own solution before rushing to a conclusion 指示模型在匆忙得出结论之前，先独立思考并找出自己的解决方案</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>transformers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>transformers pipeline Trainer类</title>
    <link href="/2025/03/05/AI%E5%85%A5%E9%97%A8-%E9%A2%84%E8%AE%AD%E7%BB%8302/"/>
    <url>/2025/03/05/AI%E5%85%A5%E9%97%A8-%E9%A2%84%E8%AE%AD%E7%BB%8302/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注意使用代理</span><br>pip install transformers --proxy http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>所有模型以及数据集下载地址: C:\Users\xxx.cache\huggingface\hub</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>设置代理，默认会下载模型缓存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline<br>proxies = &#123;<br>   <span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span>,<br>   <span class="hljs-string">&quot;https&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span>,<br>&#125;<br><span class="hljs-comment"># 设置 requests 的代理</span><br>os.environ[<span class="hljs-string">&quot;HTTP_PROXY&quot;</span>] = proxies[<span class="hljs-string">&quot;http&quot;</span>]<br>os.environ[<span class="hljs-string">&quot;HTTPS_PROXY&quot;</span>] = proxies[<span class="hljs-string">&quot;https&quot;</span>]<br><br>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)<br>result = classifier(<br>    [<br>        <span class="hljs-string">&quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;</span>,<br>        <span class="hljs-string">&quot;I hate this so much!&quot;</span>,<br>    ]<br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result&quot;</span>, result)<br></code></pre></td></tr></table></figure><p>不设置代理，使用国内镜像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline<br><br><span class="hljs-comment"># 设置镜像</span><br>os.environ[<span class="hljs-string">&quot;HF_ENDPOINT&quot;</span>] = <span class="hljs-string">&quot;https://hf-mirror.com&quot;</span><br><br>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)<br>classifier(<br>    [<br>        <span class="hljs-string">&quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;</span>,<br>        <span class="hljs-string">&quot;I hate this so much!&quot;</span>,<br>    ]<br>)<br></code></pre></td></tr></table></figure><h3 id="Pipeline类-负责整个模型使用流程，你只需要提供输入数据，就能得到最终结果"><a href="#Pipeline类-负责整个模型使用流程，你只需要提供输入数据，就能得到最终结果" class="headerlink" title="Pipeline类 负责整个模型使用流程，你只需要提供输入数据，就能得到最终结果"></a>Pipeline类 负责整个模型使用流程，你只需要提供输入数据，就能得到最终结果</h3><p>阅读源码，pipeline方法返回一个Pipeline类对象，该对象主要有以下属性（先记录部分）</p><ul><li>task: str<br>The task defining which pipeline will be returned。源码解释有很多示范，例如<code>&quot;audio-classification&quot;</code>: will return a [<code>AudioClassificationPipeline</code>]</li><li>model: str 模型名称,或者  [<code>PreTrainedModel</code>] (for PyTorch) or [<code>TFPreTrainedModel</code>] (for TensorFlow)</li><li>tokenizer 分词器<br>根据官网，有诸如，基于单词（Word-based）的 tokenization，基于字符（Character-based）的 tokenization，基于子词（subword）的 tokenization等</li></ul><h3 id="AutoTokenizer类，自动加载分词器用"><a href="#AutoTokenizer类，自动加载分词器用" class="headerlink" title="AutoTokenizer类，自动加载分词器用"></a>AutoTokenizer类，自动加载分词器用</h3><p>自动加载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)<br></code></pre></td></tr></table></figure><p>手动加载</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from transformers import BertTokenizer<br><br>tokenizer = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BertTokenizer</span>.</span></span>from<span class="hljs-constructor">_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)</span><br></code></pre></td></tr></table></figure><h3 id="AutoModel类，加载预训练模型用"><a href="#AutoModel类，加载预训练模型用" class="headerlink" title="AutoModel类，加载预训练模型用"></a>AutoModel类，加载预训练模型用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel<br><br>checkpoint = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span><br>model = AutoModel.from_pretrained(checkpoint)<br></code></pre></td></tr></table></figure><p>AutoModel 负责模型的加载，你需要自己编写代码来使用模型。这是和Pipeline类的区别</p><p>在源代码中，展示了很多封装好的加载模型方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用于自动加载任何类型的预训练模型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoModel</span>(<span class="hljs-params">_BaseAutoModelClass</span>):</span><br>    _model_mapping = MODEL_MAPPING<br><span class="hljs-comment"># 用于加载适用于序列分类任务的模型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoModelForSequenceClassification</span>(<span class="hljs-params">_BaseAutoModelClass</span>):</span><br>    _model_mapping = MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING<br><span class="hljs-comment"># 用于加载适用于因果语言建模的模型（例如GPT模型,GPT：是“Generative Pre-trained Transformer”（生成式预训练变换器）的缩写）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AutoModelForCausalLM</span>(<span class="hljs-params">_BaseAutoModelClass</span>):</span><br>    _model_mapping = MODEL_FOR_CAUSAL_LM_MAPPING<br></code></pre></td></tr></table></figure><h3 id="Trainer类-训练模型用"><a href="#Trainer类-训练模型用" class="headerlink" title="Trainer类 训练模型用"></a>Trainer类 训练模型用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Trainer(<br>    model, <span class="hljs-comment"># 模型</span><br>    training_args, <span class="hljs-comment"># 训练参数</span><br>    train_dataset=tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>], <span class="hljs-comment"># 训练数据集</span><br>    eval_dataset=tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>], <span class="hljs-comment"># 验证数据集</span><br>    data_collator=data_collator, <span class="hljs-comment"># 数据预处理 负责对批量数据进行动态填充和整理，确保输入数据的长度一致</span><br>    tokenizer=tokenizer, <span class="hljs-comment"># 分词器</span><br>)<br></code></pre></td></tr></table></figure><h3 id="按照官网来尝试"><a href="#按照官网来尝试" class="headerlink" title="按照官网来尝试"></a>按照官网来尝试</h3><h5 id="首先第一步"><a href="#首先第一步" class="headerlink" title="首先第一步"></a>首先第一步</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AdamW, AutoTokenizer, AutoModelForSequenceClassification<br># 和之前一样<br><span class="hljs-keyword">checkpoint</span> = &quot;bert-base-uncased&quot;<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-keyword">checkpoint</span>)<br>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-keyword">checkpoint</span>)<br><span class="hljs-keyword">sequences</span> = [<br>    &quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;,<br>    &quot;This course is amazing!&quot;,<br>]<br>batch = tokenizer(<span class="hljs-keyword">sequences</span>, padding=<span class="hljs-keyword">True</span>, truncation=<span class="hljs-keyword">True</span>, return_tensors=&quot;pt&quot;)<br># 新增部分<br>batch[&quot;labels&quot;] = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>optimizer = AdamW(model.parameters())<br>loss = model(**batch).loss<br>loss.backward()<br>optimizer.step()<br>optimizer.zero_grad() # 清零梯度 官网没有这一步，没得话无法打印<span class="hljs-keyword">end</span>。<br>print(<span class="hljs-string">&#x27;end&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>batch[“labels”] = torch.tensor([1, 1]) 这行代码为输入批次添加了标签，用于训练或评估序列分类模型。</li><li>标签张量包含了每个输入序列的类别信息。</li><li>模型会使用这些标签来学习如何正确地对序列进行分类。</li><li>AdamW类提示即将弃用，你需要使用 PyTorch 的 torch.optim.AdamW 优化器，或者禁用弃用警告  <h5 id="第二步，尝试使用从模型中心（Hub）加载数据集，而不是自己torch-tensor-1-1"><a href="#第二步，尝试使用从模型中心（Hub）加载数据集，而不是自己torch-tensor-1-1" class="headerlink" title="第二步，尝试使用从模型中心（Hub）加载数据集，而不是自己torch.tensor([1, 1])"></a>第二步，尝试使用从模型中心（Hub）加载数据集，而不是自己torch.tensor([1, 1])</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br><span class="hljs-comment">#要么设置镜像，要么设置代理，别忘了</span><br>os.environ[<span class="hljs-string">&quot;HF_ENDPOINT&quot;</span>] = <span class="hljs-string">&quot;https://hf-mirror.com&quot;</span><br>raw_datasets = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mrpc&quot;</span>)<br><span class="hljs-built_in">print</span>(raw_datasets)<br></code></pre></td></tr></table></figure><h5 id="第三步，尝试使用Trainer类，整体代码"><a href="#第三步，尝试使用Trainer类，整体代码" class="headerlink" title="第三步，尝试使用Trainer类，整体代码"></a>第三步，尝试使用Trainer类，整体代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 指定本地缓存目录</span><br>cache_dir = <span class="hljs-string">&quot;C:/Users/12986/.cache/huggingface/hub&quot;</span>  <span class="hljs-comment"># 替换为你的实际路径</span><br><span class="hljs-comment"># 加载数据集，并指定缓存目录</span><br>raw_datasets = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mrpc&quot;</span>, cache_dir=cache_dir)<br>checkpoint = <span class="hljs-string">&quot;bert-base-uncased&quot;</span><br>tokenizer = AutoTokenizer.from_pretrained(checkpoint)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tokenize_function</span>(<span class="hljs-params">example</span>):</span><br>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;sentence1&quot;</span>], example[<span class="hljs-string">&quot;sentence2&quot;</span>], truncation=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 使用map方法对raw_datasets数据集进行批量分词处理，tokenize_function是分词函数，batched=True表示对数据进行批量处理</span><br>tokenized_datasets = raw_datasets.<span class="hljs-built_in">map</span>(tokenize_function, batched=<span class="hljs-literal">True</span>)<br>data_collator = DataCollatorWithPadding(tokenizer=tokenizer)<br>training_args = TrainingArguments(<span class="hljs-string">&quot;test-trainer&quot;</span>, evaluation_strategy=<span class="hljs-string">&quot;epoch&quot;</span>)<br><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification<br>model = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer<br><span class="hljs-comment"># 这里就是最终的Trainer调用</span><br>trainer = Trainer(<br>    model,<br>    training_args,<br>    train_dataset=tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>],<br>    eval_dataset=tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>],<br>    data_collator=data_collator,<br>    tokenizer=tokenizer,<br>)<br><br>trainer.train()<br><br>predictions = trainer.predict(tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>])<br><span class="hljs-built_in">print</span>(predictions.predictions.shape, predictions.label_ids.shape)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打印结果</span><br>DatasetDict(&#123;<br>    train: Dataset(&#123;<br>        features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],<br>        num_rows: <span class="hljs-number">3668</span><br>    &#125;)<br>    validation: Dataset(&#123;<br>        features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],<br>        num_rows: <span class="hljs-number">408</span><br>    &#125;)<br>    test: Dataset(&#123;<br>        features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],<br>        num_rows: <span class="hljs-number">1725</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>DatasetDict 对象，这个对象包含训练集、验证集和测试集</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>transformers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wsl部署k8s</title>
    <link href="/2024/08/07/wsl%E9%83%A8%E7%BD%B2k8s/"/>
    <url>/2024/08/07/wsl%E9%83%A8%E7%BD%B2k8s/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="部署前奏"><a href="#部署前奏" class="headerlink" title="部署前奏"></a>部署前奏</h4><p>我司用的是K8s,虽然我也挺熟练换镜像查日志等基础操作，甚至修改容器代码也做过，不过还是在自己本地搭一个，玩一下，以备后续。</p><ul><li>检查cpu架构<code>uname -m</code></li><li>安装好docker</li><li>安装好wsl2</li><li>建议提前迁移wsl位置</li></ul><h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"> <span class="hljs-comment"># 下载 KinD 二进制文件，请注意对应架构adm64？arm64？</span><br>curl -Lo .<span class="hljs-regexp">/kind https:/</span><span class="hljs-regexp">/github.com/</span>kubernetes-sigs<span class="hljs-regexp">/kind/</span>releases<span class="hljs-regexp">/download/</span>v0.<span class="hljs-number">8.1</span>/kind-linux-amd64<br><span class="hljs-comment"># 标记为可执行文件</span><br>chmod +x ./kind<br><span class="hljs-comment"># 移动到 PATH 目录下去</span><br>mv .<span class="hljs-regexp">/kind /u</span>sr<span class="hljs-regexp">/local/</span>bin/<br><br><span class="hljs-comment"># TODO，记得提前下载安装 kubectl 二进制文件（请注意开代理，不然几乎没法下载）</span><br>curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;</span><br><span class="hljs-comment"># 总共三个工具，一起下载了</span><br>curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubeadm&quot;</span><br><br>curl -LO <span class="hljs-string">&quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubelet&quot;</span><br><span class="hljs-comment"># 移动并给与权限</span><br>sudo mv kubectl kubeadm kubelet <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br>sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>kubectl <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>kubeadm <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>kubelet<br></code></pre></td></tr></table></figure><p> 准备条件就绪，接下来：<br> <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"> <span class="hljs-comment"># 检查是否设置了 KUBECONFIG 环境变量</span><br><span class="hljs-keyword">echo</span> $KUBECONFIG<br><span class="hljs-comment"># 检查是否存在 .kube 目录，不需要手动创建</span><br><span class="hljs-keyword">ls</span> $HOME/<span class="hljs-string">.kube</span><br><span class="hljs-comment"># 使用 kind 命令创建一个名为 develop 的集群</span><br>kind create cluster <span class="hljs-params">--name</span> develop<br><span class="hljs-comment"># 创建后检查 .kube 目录</span><br><span class="hljs-keyword">ls</span> $HOME/<span class="hljs-string">.kube</span><br></code></pre></td></tr></table></figure></p><p>来，照着攻略玩一下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 获取集群名字，删除集群</span><br>kind <span class="hljs-built_in">get</span> clusters<br>kind <span class="hljs-built_in">delete</span> cluster <span class="hljs-comment">--name develop</span><br><span class="hljs-comment"># 停止集群，由于我们只有一个节点，那么直接docker stop即可。如果你有三个节点，那么一个一个都需要停止</span><br>docker <span class="hljs-built_in">stop</span> develop-control-plane<br><span class="hljs-comment">#启动同理</span><br>docker <span class="hljs-built_in">start</span> xxxxxx<br><span class="hljs-comment"># 那么继续创建三个节点的集群</span><br><span class="hljs-comment"># 创建一个3节点集群的配置文件</span><br>cat &lt;&lt; <span class="hljs-literal">EOF</span> &gt; kind<span class="hljs-number">-3</span>nodes.yaml<br>kind: Cluster<br>apiVersion: kind.x-k8s.io/v1alpha4<br>nodes:<br>  - role: control-plane<br>  - role: worker<br>  - role: worker<br><span class="hljs-literal">EOF</span><br><span class="hljs-comment"># 使用配置文件创建新的集群</span><br>kind <span class="hljs-built_in">create</span> cluster <span class="hljs-comment">--name wslkindmultinodes --config ./kind-3nodes.yaml</span><br><br></code></pre></td></tr></table></figure><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 查看集群上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">get-contexts</span><br><span class="hljs-comment"># 查看当前上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">current-context</span><br><span class="hljs-comment"># 你可以合并多个kubectl配置，来管理多个上下文。然后使用命令来切换上下文</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> <span class="hljs-string">sit</span><br><span class="hljs-comment"># 合并配置文件</span><br><span class="hljs-string">KUBECONFIG</span>=~/.<span class="hljs-string">kube</span>/<span class="hljs-string">config1</span>:~/.<span class="hljs-string">kube</span>/<span class="hljs-string">config2</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">view</span> <span class="hljs-built_in">--merge</span> <span class="hljs-built_in">--flatten</span> &gt; ~/.<span class="hljs-string">kube</span>/<span class="hljs-string">config</span><br><br></code></pre></td></tr></table></figure><h1 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">python-http-serv</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">python:3.9-alpine</span><br>          <span class="hljs-attr">command:</span> [ <span class="hljs-string">&quot;python3&quot;</span>, <span class="hljs-string">&quot;-mhttp.server&quot;</span>, <span class="hljs-string">&quot;8080&quot;</span> ]<br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">python-http-serv</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30080</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker pull python:<span class="hljs-number">3.9</span><span class="hljs-literal">-alpine</span><br><span class="hljs-variable">$</span> kind load docker<span class="hljs-literal">-image</span> python:<span class="hljs-number">3.9</span><span class="hljs-literal">-alpine</span> <span class="hljs-literal">-n</span> <span class="hljs-built_in">test-1</span>.<span class="hljs-number">27</span><br><br><span class="hljs-variable">$</span> kubectl apply <span class="hljs-operator">-f</span> deployment_python_http_svc_nodeport.yaml<br><br><span class="hljs-variable">$</span> kubectl get po<br><br><span class="hljs-comment"># 访问宿主机80端口（映射到控制平面节点的30080端口），可以看到一个HTML输出，其中包含Pod内容器的根目录下的文件列表</span><br><span class="hljs-comment"># 推荐使用浏览器访问</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> http://localhost/<br></code></pre></td></tr></table></figure><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://www.qikqiak.com/post/deploy-k8s-on-win-use-wsl2/">阳明的博客</a><br><a href="https://github.com/chaseSpace/k8s-tutorial-cn/blob/main/doc_tutorial.md">我看的github学习资源</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的工具篇</title>
    <link href="/2024/08/06/%E6%88%91%E7%9A%84%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
    <url>/2024/08/06/%E6%88%91%E7%9A%84%E5%B7%A5%E5%85%B7%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><ul><li><p><a href="https://apps.microsoft.com/detail/9mspc6mp8fm4?SilentAuth=1&wa=wsignin1.0&hl=zh-cn&gl=CN">whiteboard</a></p></li><li><p><a href="https://zh.snipaste.com/">snipaste</a></p></li><li><p>xmind</p></li><li><p>winmerge 差异对比</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p><a href="https://www.docker.com/products/docker-desktop/">docker</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository</span><br><span class="hljs-comment"># https://docs.docker.com/desktop/install/ubuntu/</span><br>sudo apt-get update<br>sudo apt-get install ca-certificates curl<br>sudo install -m <span class="hljs-number">0755</span> -d <span class="hljs-regexp">/etc/</span>apt/keyrings<br><br>curl -fsSL https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/u</span>buntu<span class="hljs-regexp">/gpg | sudo gpg --dearmor -o /u</span>sr<span class="hljs-regexp">/share/</span>keyrings/docker-archive-keyring.gpg<br><br>echo \<br>  <span class="hljs-string">&quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  $(. /etc/os-release &amp;&amp; echo &quot;</span><span class="hljs-variable">$VERSION_CODENAME</span><span class="hljs-string">&quot;) stable&quot;</span> | \<br>  sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>docker.list &gt; <span class="hljs-regexp">/dev/</span>null<br><br>sudo apt-get update<br>sudo apt-get install docker-ce<br><br></code></pre></td></tr></table></figure></li><li><p>wsl2</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># http<span class="hljs-variable">s:</span>//learn.microsoft.<span class="hljs-keyword">com</span>/zh-<span class="hljs-keyword">cn</span>/windows/wsl/install<br>wsl --install<br></code></pre></td></tr></table></figure></li><li><p><a href="https://www.python.org/downloads/">python</a></p></li><li><p><a href="https://go.dev/doc/install">go</a><br><a href="https://chensuixiang.cn/2021/08/02/GO%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88VSCODE%E7%AF%87%EF%BC%89/">环境配置</a></p></li><li><p><a href="https://git-scm.com/downloads">git</a></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># https:<span class="hljs-comment">//juejin.cn/post/6999630383130083358</span></span><br><br></code></pre></td></tr></table></figure><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3></li><li><p>vscode<br><a href="https://code.visualstudio.com/">下载地址</a><br>设置 PYTHONIOENCODING 环境变量：<br>在“系统变量”或“用户变量”中，点击“新建”。<br>变量名输入 PYTHONIOENCODING，变量值输入 utf-8。</p></li><li><p>apifox<br><a href="https://apifox.com/">下载地址</a></p></li><li><p>datagrip</p></li></ul><h3 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h3><ul><li>微软365 <a href="https://link.zhihu.com/?target=https://c2rsetup.officeapps.live.com/c2r/download.aspx?productReleaseID=O365BusinessRetail&platform=X64&language=zh-cn">下载地址</a></li><li>金山办公校园青春版</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k6系列之websocket实战--在线协同文档的自动化以及压测</title>
    <link href="/2024/06/09/k6%E7%B3%BB%E5%88%97%E4%B9%8Bwebsocket%E5%AE%9E%E6%88%98-%E5%9C%A8%E7%BA%BF%E5%8D%8F%E5%90%8C%E6%96%87%E6%A1%A3%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BB%A5%E5%8F%8A%E5%8E%8B%E6%B5%8B/"/>
    <url>/2024/06/09/k6%E7%B3%BB%E5%88%97%E4%B9%8Bwebsocket%E5%AE%9E%E6%88%98-%E5%9C%A8%E7%BA%BF%E5%8D%8F%E5%90%8C%E6%96%87%E6%A1%A3%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BB%A5%E5%8F%8A%E5%8E%8B%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="认识协同文档的报文"><a href="#认识协同文档的报文" class="headerlink" title="认识协同文档的报文"></a>认识协同文档的报文</h3><ul><li>报文录制<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Copy</span>-<span class="hljs-keyword">copy</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">as</span> har<br>find: _webSocketMessages <br></code></pre></td></tr></table></figure></li><li>报文分析<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">0200</span> 086e 6f20 746f 6b65 6e              ...no token<br>base64编译：AgAIbm8gdG9rZW4=<br>对照ASCII表<br>这里是十六进制，<span class="hljs-number">02</span>代表ASCII中的STX (Start Of Text) <span class="hljs-number">00</span>则是NULL， 6e是n，对应最后一个字母n，诸如此。<br>如果从base64转换成arrybuff，那么则对应二进制的值，比如n对应<span class="hljs-number">01101110</span>，在js中打印显示为十进制<span class="hljs-number">110</span><br><span class="hljs-keyword">var</span> buff = encoding.b64decode(base64String, <span class="hljs-string">&#x27;std&#x27;</span>)<br><span class="hljs-keyword">let</span> uint8View = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(buff); <br><br><br><span class="hljs-keyword">const</span> uint8Array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// 创建一个长度为3的Uint8Array</span><br><br><span class="hljs-comment">// 使用十进制值来修改数组中的元素</span><br>uint8Array[<span class="hljs-number">0</span>] = <span class="hljs-number">42</span>; <span class="hljs-comment">// 将第一个元素的值设置为十进制的42</span><br>uint8Array[<span class="hljs-number">1</span>] = <span class="hljs-number">128</span>; <span class="hljs-comment">// 将第二个元素的值设置为十进制的128</span><br>uint8Array[<span class="hljs-number">2</span>] = <span class="hljs-number">255</span>; <span class="hljs-comment">// 将第三个元素的值设置为十进制的255</span><br><br><span class="hljs-comment">// 打印修改后的数组内容</span><br><span class="hljs-built_in">console</span>.log(uint8Array); <span class="hljs-comment">// 打印数组</span><br></code></pre></td></tr></table></figure><h3 id="单人模式下协同文档的自动化压测"><a href="#单人模式下协同文档的自动化压测" class="headerlink" title="单人模式下协同文档的自动化压测"></a>单人模式下协同文档的自动化压测</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> ws = <span class="hljs-keyword">new</span> WebSocket(url, <span class="hljs-literal">null</span>, params1);<br><br>ws.addEventListener(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">//这里要用==1来比较，因为readyState的类型是ReadyState，要用非严格比较</span><br><span class="hljs-keyword">if</span> (!check(ws, &#123;<br>    <span class="hljs-string">&#x27;is status 200&#x27;</span>: <span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> r.readyState == <span class="hljs-number">1</span>,<br>&#125;))&#123;<br>    ws.close()<br>&#125;<br><span class="hljs-comment">//case 1 2分别对应报文中opcode的类型，如text binary </span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> mess <span class="hljs-keyword">of</span> messages)&#123;<br>    <span class="hljs-keyword">switch</span>(mess.opcode)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-comment">//省略</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-comment">//省略</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">//省略</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// listen for messages/errors and log them into console</span><br>ws.addEventListener(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(e, <span class="hljs-string">&quot;###&quot;</span>)<br>&#125;);<br>ws.addEventListener(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`VU <span class="hljs-subst">$&#123;__VU&#125;</span> disconnected`</span>);<br>&#125;);<br>ws.close()<br>&#125;);<br></code></pre></td></tr></table></figure><p>在 WebSocket (ws) 协议中，”opcode” 表示控制帧或数据帧的类型。它指示 WebSocket 数据帧的类型和如何处理这些帧。WebSocket 数据帧可以是控制帧或数据帧，而 “opcode” 字段用于标识这些帧的类型。</p><p>具体来说，”opcode” 字段的值指示了数据帧的用途。其中一些常见的 “opcode” 值包括：</p><ul><li>0x0（十进制为 0）： 表示一个继续帧。当消息需要分片发送时，后续的分片消息会使用此类型。</li><li>0x1（十进制为 1）： 表示一个文本帧。用于传输文本消息。</li><li>0x2（十进制为 2）： 表示一个二进制帧。用于传输二进制数据。</li><li>0x8（十进制为 8）： 表示一个连接关闭帧。表示连接被关闭。</li><li>0x9（十进制为 9）： 表示一个 ping 帧。用于检查连接是否仍然存活。</li><li>0xA（十进制为 10）： 表示一个 pong 帧。对 ping 帧的响应。</li></ul><h4 id="UTF-8-编码原理"><a href="#UTF-8-编码原理" class="headerlink" title="UTF-8 编码原理"></a>UTF-8 编码原理</h4><p>ASCII 字符: 0x00 - 0x7F（0 - 127）范围内的字符（包括常见的英文字母、数字和标点符号），使用一个字节编码。<br>扩展的拉丁字符: 0x80 - 0x7FF（128 - 2047）范围内的字符，使用两个字节编码。<br>BMP 平面字符: 0x800 - 0xFFFF（2048 - 65535）范围内的字符，包括大多数的汉字，使用三个字节编码。<br>辅助平面字符: 0x10000 - 0x10FFFF（65536 - 1114111）范围内的字符，使用四个字节编码。<br>中文字符在 UTF-8 中的编码<br>一个中文字符的 Unicode 码点通常在 0x4E00 - 0x9FFF（即 19968 - 40959）范围内。根据 UTF-8 编码规则，这些字符会被编码成三个字节。</p><p>例如，“你”字的 Unicode 码点是 0x4F60。</p><p>将 0x4F60 转换成二进制： 01001111 01100000<br>UTF-8 编码规则（3字节）<br>UTF-8 三字节编码的格式如下：</p><p>第一个字节：1110xxxx<br>第二个字节：10xxxxxx<br>第三个字节：10xxxxxx<br>拆分代码点<br>将二进制的 0x4F60 (0100 1111 0110 0000) 按照 UTF-8 的三字节格式进行拆分：</p><p>原始的 16 位二进制：0100 1111 0110 0000</p><p>从右往左填充 xxxxxx 的位置：</p><p>第一个字节：1110xxxx -&gt; 11100100<br>第二个字节：10xxxxxx -&gt; 10111101<br>第三个字节：10xxxxxx -&gt; 10100000<br>我们将 0100 1111 0110 0000 填入这三个字节的 x 位置中：</p><p>第一个字节：1110 0100<br>第二个字节：1011 1101<br>第三个字节：1010 0000<br>转换为十六进制<br>将这三个字节（每个字节 8 位）的二进制转换为十六进制：</p><p>1110 0100 = 0xE4<br>1011 1101 = 0xBD<br>1010 0000 = 0xA0<br>UTF-8 编码结果<br>因此，Unicode 代码点 0x4F60 在 UTF-8 中的编码是 E4 BD A0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 将字符串转换为 Uint8Array</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stringToUint8Array</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(str.length);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>      arr[i] = str.charCodeAt(i);<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-comment">// 替换字节序列</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceSequence</span>(<span class="hljs-params">array, targetSequence, replacementSequence</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> strArray = array.join(<span class="hljs-string">&#x27;,&#x27;</span>);<br>  <span class="hljs-keyword">const</span> strTarget = targetSequence.join(<span class="hljs-string">&#x27;,&#x27;</span>);<br>  <span class="hljs-keyword">const</span> strReplacement = replacementSequence.join(<span class="hljs-string">&#x27;,&#x27;</span>);<br><br>  <span class="hljs-keyword">if</span> (strArray.includes(strTarget)) &#123;<br>      <span class="hljs-keyword">const</span> strNewArray = strArray.replace(strTarget, strReplacement);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(strNewArray.split(<span class="hljs-string">&#x27;,&#x27;</span>).map(<span class="hljs-built_in">Number</span>)).buffer;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> array.buffer;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">customModifiArrBuff</span>(<span class="hljs-params">base64String, oldstring, newstringdata</span>)</span>&#123;<br>  <span class="hljs-comment">// 原始 Uint8Array</span><br>  <span class="hljs-keyword">var</span> oldbuff = encoding.b64decode(base64String, <span class="hljs-string">&#x27;std&#x27;</span>)<br>  <span class="hljs-keyword">let</span> originalArray = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(oldbuff);<br><br>  <span class="hljs-comment">// 要查找的字节序列</span><br>  <span class="hljs-keyword">let</span> targetSequence = stringToUint8Array(oldstring);<br><br>  <span class="hljs-comment">// 替换的字节序列</span><br>  <span class="hljs-keyword">let</span> replacementSequence = stringToUint8Array(newstringdata);;<br><br>  <span class="hljs-comment">// 执行替换</span><br>  <span class="hljs-keyword">let</span> newArray = replaceSequence(originalArray, targetSequence, replacementSequence);<br>  <span class="hljs-keyword">return</span> newArray<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>k6</tag>
      
      <tag>websocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UI自动化系列之设计模式</title>
    <link href="/2024/04/01/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/04/01/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Look-at-the-code"><a href="#Look-at-the-code" class="headerlink" title="Look at the code"></a>Look at the code</h4><p>在谈设计模式之前，还是要先看看项目的代码，要清楚了解一个项目的代码架构。这里以分析前端为主，暂时不说后端。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">├─app<br>│  ├─<span class="hljs-built_in">components</span><br>│  │  ├─xxxx<br>│  ├─pages<br>│  │  ├─login<br></code></pre></td></tr></table></figure><p>仔细观察components中每个文件基本就对应系统的一个组件。组件再来组合成page。这里涉及机密，仅放少量代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> UserLogin = React.lazy(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;components/users/UserLogin&#x27;</span>));<br><span class="hljs-keyword">const</span> ForgetPassword = React.lazy(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;components/users/ForgetPassword&#x27;</span>));<br> <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">AuthLayout</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Login&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(</span>&#x27;<span class="hljs-attr">login-auth-layout</span>&#x27;)&#125;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span> <span class="hljs-attr">fallback</span>=<span class="hljs-string">&#123;null&#125;</span>&gt;</span></span><br><span class="xml">        &#123;current === &#x27;login&#x27; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">UserLogin</span> <span class="hljs-attr">go</span>=<span class="hljs-string">&#123;setCurrent&#125;</span> /&gt;</span>&#125;</span><br><span class="xml">        &#123;current === &#x27;forget-password&#x27; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">ForgetPassword</span> <span class="hljs-attr">go</span>=<span class="hljs-string">&#123;setCurrent&#125;</span> /&gt;</span>&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">AuthLayout</span>&gt;</span></span><br>  );<br></code></pre></td></tr></table></figure><p>前端设计基本模式都是如上所示的，并不会太过复杂。复杂程度取决于组件的种类以及数量。</p><h4 id="UI-design-pattern"><a href="#UI-design-pattern" class="headerlink" title="UI design pattern"></a>UI design pattern</h4><p>基于现在业界的前端设计模式，我们需要更优雅地设计UI自动化，学习组件化的模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python">├─result<br>├─scenes<br>├─case<br>├─service<br>│  ├─components<br>│  │  ├─xxxx<br>│  ├─pages<br>│  │  ├─login<br>├─main<br><br><br><br><span class="hljs-comment"># main为入口，执行指定场景下用例</span><br>args = [<span class="hljs-string">&#x27;--alluredir&#x27;</span>, allure_dir,<span class="hljs-string">&#x27;--clean-alluredir&#x27;</span>,<span class="hljs-string">&quot;./scenes/test_scene_login.py&quot;</span>, <span class="hljs-string">&quot;-s&quot;</span>, <span class="hljs-string">&quot;--headed&quot;</span>] <br>pytest.main(args)<br><br><span class="hljs-comment"># components 尽可能和项目组件对应，当然也可以按照实际情况更优雅地设计</span><br><span class="hljs-comment"># 比如我认为弹窗页面就是一个组件。弹窗页面有的多个按钮有的少个按钮，只不过是实例化的时候参数控制的。我们可以全部写在一起</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Front_footer</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, page:Page, name: typing.<span class="hljs-type">Optional</span>[typing.<span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, typing.Pattern[<span class="hljs-built_in">str</span>]]] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        self.page = page<br>        <span class="hljs-comment"># &quot;team-front-modal-footer&quot;</span><br>        self.classname = <span class="hljs-string">&#x27;//div[contains(@class, &quot;modal-footer&quot;)]&#x27;</span><br>        self.iframe = <span class="hljs-string">&quot;iframe[title=\&quot;navigation\&quot;]&quot;</span><br>    <span class="hljs-comment"># 确认按钮</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">confirm</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Button(self.page).find_by_locator(self.page.frame_locator(self.iframe).locator(self.classname), re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;OK|确 定|确 认&quot;</span>))<br>        <span class="hljs-comment"># return self.page.frame_locator(self.iframe).locator(self.classname).get_by_role(&quot;button&quot;, name = re.compile(r&quot;OK|确 定&quot;))</span><br>     <span class="hljs-comment"># 取消按钮</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cancel</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Button(self.page).find_by_locator(self.page.frame_locator(self.iframe).locator(self.classname), re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;Cancel|取 消&quot;</span>))<br>        <span class="hljs-comment"># return self.page.frame_locator(&quot;iframe[title=\&quot;navigation\&quot;]&quot;).locator(&#x27;//div[contains(@class, &quot;modal-footer&quot;)]&#x27;).get_by_role(&quot;button&quot;, name = re.compile(r&quot;Cancel|取 消&quot;))</span><br>    <br>    <span class="hljs-comment"># 确定并配置按钮</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">confirm2</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Button(self.page).find_by_locator(self.page.frame_locator(self.iframe).locator(self.classname), re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;OK|确定并配置&quot;</span>))<br><br><br><span class="hljs-comment"># page下存放页面，需要支持链式调用，支持中英文</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginPage</span>(<span class="hljs-params">Page</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, page:Page</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        self.loginbutton = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;Sign In|登录&quot;</span>)<br>        self.username = <span class="hljs-string">&#x27;用户名 或 电子邮箱地址&#x27;</span><br>        self.password = <span class="hljs-string">&#x27;密码&#x27;</span><br>        self.page = page<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gotoLoginPage</span>(<span class="hljs-params">self</span>):</span><br>        self.page.goto(config[<span class="hljs-string">&quot;url&quot;</span>])<br>        self.page.wait_for_load_state(<span class="hljs-string">&#x27;networkidle&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">self,yourname, yourpassword</span>):</span><br>        Input(self.page, self.username).find_by_placeholder().fill(yourname)<br>        Input(self.page, self.password).find_by_placeholder().fill(yourpassword)<br>        Button(self.page).find_by_role(self.loginbutton).click()<br>        self.page.wait_for_load_state(<span class="hljs-string">&quot;networkidle&quot;</span>)<br>        <span class="hljs-keyword">return</span> self<br><br><br><span class="hljs-comment"># case下组件用例，比如包含登录成功，登录失败；断言也可以写在这里</span><br><span class="hljs-comment"># scenes下放置需要测试的场景，比如登录成功，打开设置页面。那么拿两个用例组装起来即可</span><br><span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><p>以上，暂且至此。更多思考留待后续发掘。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo发布流程</title>
    <link href="/2024/03/05/hexo%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/03/05/hexo%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hexo发布流程</p><ul><li><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code> #新建文章</li><li><code>hexo p</code> == <code>hexo publish</code></li><li><code>hexo g</code> == <code>hexo generate</code>#生成静态文件</li><li><code>hexo s</code> == <code>hexo server</code> #启动服务预览</li><li><code>hexo d</code> == <code>hexo deploy</code>#部署</li></ul><p>通常情况下执行hexo g   和hexo d  即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UI自动化系列之playwright CSS选择器</title>
    <link href="/2024/02/11/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8Bplaywright-CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2024/02/11/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8Bplaywright-CSS%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>playwright-python中driver内置了一些选择器可供使用，源码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PythonLocatorFactory</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">generateLocator</span>(<span class="hljs-params">base, kind, body, options = &#123;&#125;</span>)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (kind) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;default&#x27;</span>:<br>        <span class="hljs-keyword">if</span> (options.hasText !== <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">`locator(<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.quote(body)&#125;</span>, has_text=<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.toHasText(options.hasText)&#125;</span>)`</span>;<br>        <span class="hljs-keyword">if</span> (options.hasNotText !== <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">`locator(<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.quote(body)&#125;</span>, has_not_text=<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.toHasText(options.hasNotText)&#125;</span>)`</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`locator(<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.quote(body)&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;frame&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`frame_locator(<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.quote(body)&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;nth&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`nth(<span class="hljs-subst">$&#123;body&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;first&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`first`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;last&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`last`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;role&#x27;</span>:<br>        <span class="hljs-keyword">const</span> attrs = [];<br>        <span class="hljs-keyword">if</span> (isRegExp(options.name)) &#123;<br>          attrs.push(<span class="hljs-string">`name=<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.regexToString(options.name)&#125;</span>`</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options.name === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>          attrs.push(<span class="hljs-string">`name=<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.quote(options.name)&#125;</span>`</span>);<br>          <span class="hljs-keyword">if</span> (options.exact) attrs.push(<span class="hljs-string">`exact=True`</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> &#123;<br>          name,<br>          value<br>        &#125; <span class="hljs-keyword">of</span> options.attrs) &#123;<br>          <span class="hljs-keyword">let</span> valueString = <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;string&#x27;</span> ? <span class="hljs-built_in">this</span>.quote(value) : value;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;boolean&#x27;</span>) valueString = value ? <span class="hljs-string">&#x27;True&#x27;</span> : <span class="hljs-string">&#x27;False&#x27;</span>;<br>          attrs.push(<span class="hljs-string">`<span class="hljs-subst">$&#123;(<span class="hljs-number">0</span>, _stringUtils.toSnakeCase)(name)&#125;</span>=<span class="hljs-subst">$&#123;valueString&#125;</span>`</span>);<br>        &#125;<br>        <span class="hljs-keyword">const</span> attrString = attrs.length ? <span class="hljs-string">`, <span class="hljs-subst">$&#123;attrs.join(<span class="hljs-string">&#x27;, &#x27;</span>)&#125;</span>`</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`get_by_role(<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.quote(body)&#125;</span><span class="hljs-subst">$&#123;attrString&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;has-text&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`filter(has_text=<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.toHasText(body)&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;has-not-text&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`filter(has_not_text=<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.toHasText(body)&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;has&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`filter(has=<span class="hljs-subst">$&#123;body&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;hasNot&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`filter(has_not=<span class="hljs-subst">$&#123;body&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;and&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`and_(<span class="hljs-subst">$&#123;body&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;or&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`or_(<span class="hljs-subst">$&#123;body&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;chain&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`locator(<span class="hljs-subst">$&#123;body&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;test-id&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`get_by_test_id(<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.toTestIdValue(body)&#125;</span>)`</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;text&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toCallWithExact(<span class="hljs-string">&#x27;get_by_text&#x27;</span>, body, !!options.exact);<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;alt&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toCallWithExact(<span class="hljs-string">&#x27;get_by_alt_text&#x27;</span>, body, !!options.exact);<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;placeholder&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toCallWithExact(<span class="hljs-string">&#x27;get_by_placeholder&#x27;</span>, body, !!options.exact);<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;label&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toCallWithExact(<span class="hljs-string">&#x27;get_by_label&#x27;</span>, body, !!options.exact);<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;title&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toCallWithExact(<span class="hljs-string">&#x27;get_by_title&#x27;</span>, body, !!options.exact);<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Unknown selector kind &#x27;</span> + kind);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>example: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>div元素下有快捷中心字样<br>page.wait_for_selector(<span class="hljs-string">&quot;div:has-text(&#x27;快捷中心&#x27;)&quot;</span>)<br><br><span class="hljs-regexp">//</span>任意元素下有快捷中心字样<br>page.wait_for_selector(<span class="hljs-string">&quot;div:has-text(&#x27;快捷中心&#x27;)&quot;</span>)<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>playwright-内置方法踩坑记录</title>
    <link href="/2024/02/11/playwright-%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/02/11/playwright-%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="class-Page"><a href="#class-Page" class="headerlink" title="class Page"></a>class Page</h3><h5 id="get-by-role-和-get-by-text"><a href="#get-by-role-和-get-by-text" class="headerlink" title="get_by_role 和 get_by_text"></a>get_by_role 和 get_by_text</h5><p>会查找页面中包含指定文本的元素。它不仅仅匹配单个节点中的文本，而是会将元素及其所有子元素的文本内容合并在一起进行匹配。比如<code>get_by_role(&#39;link&#39;, name=&quot;A B&quot;)</code>，如果有父元素是A，子元素是B，那么也能查找到。而不会仅仅查找一个元素包含<code>A B</code>。这个时候建议先<code>self.page.locator(&#39;//div[contains(@class, &quot;xxxx&quot;)]&#39;)</code>来缩小选择范围。</p>]]></content>
    
    
    
    <tags>
      
      <tag>playwright</tag>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UI自动化系列之环境篇</title>
    <link href="/2024/02/11/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8B%E7%8E%AF%E5%A2%83%E7%AF%87/"/>
    <url>/2024/02/11/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8B%E7%8E%AF%E5%A2%83%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="vscode中创建虚拟环境"><a href="#vscode中创建虚拟环境" class="headerlink" title="vscode中创建虚拟环境"></a>vscode中创建虚拟环境</h5><ul><li>在<code>ctrl shift p</code>中搜索<code>&gt;creat environment</code></li><li>注意关闭梯子，否则会报错</li><li>注意在vscode中手动执行<code>.\.venv\Scripts\activate</code>来激活虚拟环境<h5 id="生成requirements-txt"><a href="#生成requirements-txt" class="headerlink" title="生成requirements.txt"></a>生成requirements.txt</h5></li><li>直接cmd窗口中进入虚拟环境的目录<code>D:\githubwork\mistyrain\webui_auto\.venv\Scripts</code></li><li>激活虚拟环境，在cmd窗口中执行<code>activate.bat</code></li><li>执行 <code>python -m pip  freeze &gt; requirements.txt</code></li></ul><h5 id="通过录制来调试"><a href="#通过录制来调试" class="headerlink" title="通过录制来调试"></a>通过录制来调试</h5><ul><li>npm install playwright</li><li>playwright codegen</li></ul><h5 id="通过debug模式来调试"><a href="#通过debug模式来调试" class="headerlink" title="通过debug模式来调试"></a>通过debug模式来调试</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//如何确认你能get到这个元素？</span><br><span class="hljs-comment">//假设你代码中写：</span><br>self<span class="hljs-selector-class">.page</span><span class="hljs-selector-class">.get_by_placeholder</span>(<span class="hljs-string">&quot;登录&quot;</span>)<br><span class="hljs-comment">//可以在debug模式中输入以下，即可确认元素是否找得到</span><br><span class="hljs-comment">//参考 Page is_visible()方法</span><br>self<span class="hljs-selector-class">.page</span><span class="hljs-selector-class">.get_by_placeholder</span>(<span class="hljs-string">&quot;登录&quot;</span>)<span class="hljs-selector-class">.is_visible</span>()<br><br><span class="hljs-comment">//你想等待按钮点击成功，等待新元素成功出现</span><br><span class="hljs-comment">//假设你代码中写</span><br>self<span class="hljs-selector-class">.page</span><span class="hljs-selector-class">.wait_for_selector</span>(<span class="hljs-string">&quot;div:has-text(&#x27;快捷中心&#x27;)&quot;</span>)<br><span class="hljs-comment">//那么你可以在debug模式中用下列方式调试是否成功</span><br>self<span class="hljs-selector-class">.page</span><span class="hljs-selector-class">.query_selector</span>(<span class="hljs-string">&quot;div:has-text(&#x27;快捷中心&#x27;)&quot;</span>)<span class="hljs-selector-class">.is_visible</span>()<br><br><span class="hljs-comment">//看看找到的元素有多少，.locator(&#x27;xpath=..&#x27;)是找的父级元素</span><br>self<span class="hljs-selector-class">.page</span><span class="hljs-selector-class">.frame_locator</span>(<span class="hljs-string">&quot;iframe[title=\&quot;navigation\&quot;]&quot;</span>)<span class="hljs-selector-class">.get_by_text</span>(<span class="hljs-string">&quot;事项关联&quot;</span>, exact=True)<span class="hljs-selector-class">.locator</span>(<span class="hljs-string">&#x27;xpath=..&#x27;</span>)<span class="hljs-selector-class">.count</span>()<br><span class="hljs-comment">//打印具体Html内容&#x27;&lt;span class=&quot;apps-fo3fq0&quot; title=&quot;事项关联&quot;&gt;事项关联&lt;/span&gt;&#x27;</span><br>self<span class="hljs-selector-class">.page</span><span class="hljs-selector-class">.frame_locator</span>(<span class="hljs-string">&quot;iframe[title=\&quot;navigation\&quot;]&quot;</span>)<span class="hljs-selector-class">.get_by_text</span>(<span class="hljs-string">&quot;事项关联&quot;</span>, exact=True)<span class="hljs-selector-class">.locator</span>(<span class="hljs-string">&#x27;xpath=..&#x27;</span>)<span class="hljs-selector-class">.nth</span>(<span class="hljs-number">0</span>)<span class="hljs-selector-class">.inner_html</span>()<br><span class="hljs-comment">//获取class属性</span><br>self<span class="hljs-selector-class">.page</span><span class="hljs-selector-class">.frame_locator</span>(<span class="hljs-string">&quot;iframe[title=\&quot;navigation\&quot;]&quot;</span>)<span class="hljs-selector-class">.get_by_text</span>(<span class="hljs-string">&quot;事项关联&quot;</span>, exact=True)<span class="hljs-selector-class">.locator</span>(<span class="hljs-string">&#x27;xpath=..&#x27;</span>)<span class="hljs-selector-class">.nth</span>(<span class="hljs-number">1</span>)<span class="hljs-selector-class">.get_attribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>)<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UI自动化系列之allure报告</title>
    <link href="/2024/02/10/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8Ballure%E6%8A%A5%E5%91%8A/"/>
    <url>/2024/02/10/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E5%88%97%E4%B9%8Ballure%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>官方网址：<a href="https://github.com/allure-examples/allure-python-pytest/blob/main/test/allure_step_test.py">https://github.com/allure-examples/allure-python-pytest/blob/main/test/allure_step_test.py</a></p><h3 id="报告生成步骤"><a href="#报告生成步骤" class="headerlink" title="报告生成步骤"></a>报告生成步骤</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pytest main.py --alluredir=.<span class="hljs-regexp">/result/</span><span class="hljs-number">1</span> <br>allure generate .<span class="hljs-regexp">/result/</span><span class="hljs-number">1</span> -o .<span class="hljs-regexp">/report/</span><span class="hljs-number">1</span>/ --clean<br>allure open -h <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> -p <span class="hljs-number">8888</span> .<span class="hljs-regexp">/report/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k6系列之websocket</title>
    <link href="/2024/01/04/k6%E7%B3%BB%E5%88%97%E4%B9%8Bwebsocket/"/>
    <url>/2024/01/04/k6%E7%B3%BB%E5%88%97%E4%B9%8Bwebsocket/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p><a href="https://github.com/grafana/k6/blob/7d131d6e7fee28a6936e437fe235c7c14a807c80/js/jsmodules.go#L36">k6 Module</a><br>k6目前有两个ws的模块，基础<code>k6/ws</code>，实验性<code>k6/experimental/websockets</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> expws <span class="hljs-string">&quot;github.com/grafana/xk6-websockets/websockets&quot;</span><br><span class="hljs-string">&quot;k6/experimental/websockets&quot;</span>: &amp;expws.RootModule&#123;&#125;,<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;go.k6.io/k6/js/modules/k6/ws&quot;</span><br><span class="hljs-string">&quot;k6/ws&quot;</span>:                      ws.<span class="hljs-keyword">New</span>(),<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//&quot;go.k6.io/k6/js/modules/k6/ws&quot;</span><br><span class="hljs-comment">//看几个重要方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mi *WS)</span> <span class="hljs-title">Connect</span><span class="hljs-params">(url <span class="hljs-keyword">string</span>, args ...goja.Value)</span> <span class="hljs-params">(*HTTPResponse, error)</span></span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Socket)</span> <span class="hljs-title">Send</span><span class="hljs-params">(message <span class="hljs-keyword">string</span>)</span></span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Socket)</span> <span class="hljs-title">SendBinary</span><span class="hljs-params">(message goja.Value)</span></span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//github.com/grafana/xk6-websockets/websockets</span><br><span class="hljs-comment">//这里实现则是多了一层channel，并发性能会更优</span><br>func (w *webSocket) send(msg goja.Value) &#123;<br>w<span class="hljs-selector-class">.assertStateOpen</span>()<br><br>switch o := msg<span class="hljs-selector-class">.Export</span>().(type) &#123;<br>case string:<br>w<span class="hljs-selector-class">.bufferedAmount</span> += len(o)<br>w<span class="hljs-selector-class">.writeQueueCh</span> &lt;- message&#123;<br>mtype: websocket<span class="hljs-selector-class">.TextMessage</span>,<br>data:  <span class="hljs-selector-attr">[]</span>byte(o),<br>t:     <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>(),<br>&#125;<br>case *goja<span class="hljs-selector-class">.ArrayBuffer</span>:<br><span class="hljs-selector-tag">b</span> := o<span class="hljs-selector-class">.Bytes</span>()<br>w<span class="hljs-selector-class">.bufferedAmount</span> += len(b)<br>w<span class="hljs-selector-class">.writeQueueCh</span> &lt;- message&#123;<br>mtype: websocket<span class="hljs-selector-class">.BinaryMessage</span>,<br>data:  <span class="hljs-selector-tag">b</span>,<br>t:     <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>(),<br>&#125;<br>case goja<span class="hljs-selector-class">.ArrayBuffer</span>:<br><span class="hljs-selector-tag">b</span> := o<span class="hljs-selector-class">.Bytes</span>()<br>w<span class="hljs-selector-class">.bufferedAmount</span> += len(b)<br>w<span class="hljs-selector-class">.writeQueueCh</span> &lt;- message&#123;<br>mtype: websocket<span class="hljs-selector-class">.BinaryMessage</span>,<br>data:  <span class="hljs-selector-tag">b</span>,<br>t:     <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Now</span>(),<br>&#125;<br>default:<br>common<span class="hljs-selector-class">.Throw</span>(w<span class="hljs-selector-class">.vu</span><span class="hljs-selector-class">.Runtime</span>(), fmt<span class="hljs-selector-class">.Errorf</span>(<span class="hljs-string">&quot;unsupported send type %T&quot;</span>, o))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>官方建议</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Note:</span> A <span class="hljs-keyword">module</span> <span class="hljs-keyword">with</span> a better <span class="hljs-built_in">and</span> standard API exists.<br><br>The <span class="hljs-built_in">new</span> k6/experimental/websockets API partially <span class="hljs-keyword">implements</span> the WebSockets API living standard.<br><br><span class="hljs-keyword">When</span> possible, we recommend <span class="hljs-keyword">using</span> the <span class="hljs-built_in">new</span> API. It uses a <span class="hljs-keyword">global</span> <span class="hljs-keyword">event</span> <span class="hljs-keyword">loop</span> <span class="hljs-keyword">for</span> consistency <span class="hljs-keyword">with</span> other k6 APIs <span class="hljs-built_in">and</span> better performance.<br></code></pre></td></tr></table></figure><h3 id="案例编写"><a href="#案例编写" class="headerlink" title="案例编写"></a>案例编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; randomString, randomIntBetween &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;https://jslib.k6.io/k6-utils/1.1.0/index.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; WebSocket &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;k6/experimental/websockets&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-built_in">setTimeout</span>, <span class="hljs-built_in">clearTimeout</span>, <span class="hljs-built_in">setInterval</span>, <span class="hljs-built_in">clearInterval</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;k6/experimental/timers&#x27;</span>;<br><br><span class="hljs-keyword">const</span> chatRoomName = <span class="hljs-string">&#x27;publicRoom&#x27;</span>; <span class="hljs-comment">// choose any chat room name</span><br><span class="hljs-keyword">const</span> sessionDuration = randomIntBetween(<span class="hljs-number">5000</span>, <span class="hljs-number">60000</span>); <span class="hljs-comment">// user session between 5s and 1m</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    startWSWorker(i);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startWSWorker</span>(<span class="hljs-params">id</span>) </span>&#123;<br>  <span class="hljs-comment">// create a new websocket connection</span><br>  <span class="hljs-keyword">const</span> ws = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">`wss://test-api.k6.io/ws/crocochat/<span class="hljs-subst">$&#123;chatRoomName&#125;</span>/`</span>);<br><br>  ws.addEventListener(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// change the user name</span><br>    ws.send(<span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;SET_NAME&#x27;</span>, <span class="hljs-attr">new_name</span>: <span class="hljs-string">`Croc <span class="hljs-subst">$&#123;__VU&#125;</span>:<span class="hljs-subst">$&#123;id&#125;</span>`</span> &#125;));<br><br>    <span class="hljs-comment">// listen for messages/errors and log them into console</span><br>    ws.addEventListener(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> msg = <span class="hljs-built_in">JSON</span>.parse(e.data);<br>      <span class="hljs-keyword">if</span> (msg.event === <span class="hljs-string">&#x27;CHAT_MSG&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`VU <span class="hljs-subst">$&#123;__VU&#125;</span>:<span class="hljs-subst">$&#123;id&#125;</span> received: <span class="hljs-subst">$&#123;msg.user&#125;</span> says: <span class="hljs-subst">$&#123;msg.message&#125;</span>`</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg.event === <span class="hljs-string">&#x27;ERROR&#x27;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">`VU <span class="hljs-subst">$&#123;__VU&#125;</span>:<span class="hljs-subst">$&#123;id&#125;</span> received:: <span class="hljs-subst">$&#123;msg.message&#125;</span>`</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`VU <span class="hljs-subst">$&#123;__VU&#125;</span>:<span class="hljs-subst">$&#123;id&#125;</span> received unhandled message: <span class="hljs-subst">$&#123;msg.message&#125;</span>`</span>);<br>      &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// send a message every 2-8 seconds</span><br>    <span class="hljs-keyword">const</span> intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      ws.send(<span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;SAY&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">`I&#x27;m saying <span class="hljs-subst">$&#123;randomString(<span class="hljs-number">5</span>)&#125;</span>`</span> &#125;));<br>    &#125;, randomIntBetween(<span class="hljs-number">2000</span>, <span class="hljs-number">8000</span>)); <span class="hljs-comment">// say something every 2-8 seconds</span><br><br>    <span class="hljs-comment">// after a sessionDuration stop sending messages and leave the room</span><br>    <span class="hljs-keyword">const</span> timeout1id = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">clearInterval</span>(intervalId);<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`VU <span class="hljs-subst">$&#123;__VU&#125;</span>:<span class="hljs-subst">$&#123;id&#125;</span>: <span class="hljs-subst">$&#123;sessionDuration&#125;</span>ms passed, leaving the chat`</span>);<br>      ws.send(<span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;LEAVE&#x27;</span> &#125;));<br>    &#125;, sessionDuration);<br><br>    <span class="hljs-comment">// after a sessionDuration + 3s close the connection</span><br>    <span class="hljs-keyword">const</span> timeout2id = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Closing the socket forcefully 3s after graceful LEAVE`</span>);<br>      ws.close();<br>    &#125;, sessionDuration + <span class="hljs-number">3000</span>);<br><br>    <span class="hljs-comment">// when connection is closing, clean up the previously created timers</span><br>    ws.addEventListener(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timeout1id);<br>      <span class="hljs-built_in">clearTimeout</span>(timeout2id);<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`VU <span class="hljs-subst">$&#123;__VU&#125;</span>:<span class="hljs-subst">$&#123;id&#125;</span>: disconnected`</span>);<br>    &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="k6-experimental-websockets的readyState"><a href="#k6-experimental-websockets的readyState" class="headerlink" title="k6/experimental/websockets的readyState"></a>k6/experimental/websockets的readyState</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-comment">//这里要用==1来比较，因为readyState的类型是ReadyState，要用非严格比较</span><br><span class="hljs-keyword">if</span> (!check(ws, &#123;<br>      &#x27;is status <span class="hljs-number">200</span>&#x27;: (<span class="hljs-keyword">r</span>) =&gt; <span class="hljs-keyword">r</span>.readyState == <span class="hljs-number">1</span>,<br>    &#125;))&#123;<br>      ws.<span class="hljs-keyword">close</span>()<br>    &#125;<br><span class="hljs-comment">//无论是看go源码还是js的源码都很轻松分析出</span><br>export enum ReadyState &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Socket has been created. The connection is not yet open.</span><br><span class="hljs-comment">     */</span><br>    Connecting = <span class="hljs-number">0</span>,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The connection is open and ready to communicate.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">Open</span> = <span class="hljs-number">1</span>,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The connection is in the process of closing.</span><br><span class="hljs-comment">     */</span><br>    Closing = <span class="hljs-number">2</span>,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The connection is closed or couldn&#x27;t be opened.</span><br><span class="hljs-comment">     */</span><br>    Closed = <span class="hljs-number">3</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="k6-experimental-websockets的bufferedAmount"><a href="#k6-experimental-websockets的bufferedAmount" class="headerlink" title="k6/experimental/websockets的bufferedAmount"></a>k6/experimental/websockets的bufferedAmount</h3><p>表示队列中的数据量，应该是可以用来监测 WebSocket 连接的发送情况</p>]]></content>
    
    
    
    <tags>
      
      <tag>k6</tag>
      
      <tag>websocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k6系列之可视化报告</title>
    <link href="/2023/11/13/k6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/11/13/k6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>暂时没空补充<br>先随便写点<br>.\k6.exe run –console-output report.log .\main.js</p><p><a href="https://k6.io/blog/ways-to-visualize-k6-results/">https://k6.io/blog/ways-to-visualize-k6-results/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>k6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k6系列之browser调研</title>
    <link href="/2023/11/12/k6%E7%B3%BB%E5%88%97%E4%B9%8Bbrowser%E8%B0%83%E7%A0%94/"/>
    <url>/2023/11/12/k6%E7%B3%BB%E5%88%97%E4%B9%8Bbrowser%E8%B0%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h3><p><a href="https://github.com/grafana/xk6-browser/tree/main">github地址</a></p><p>根据源码分析，k6的browser有三个大模块，一是<code>browser</code>，一个是<code>chromium</code>，还有一个是<code>devices</code>。根据官方给的<a href="https://k6.io/docs/using-k6-browser/running-browser-tests/">例子</a>，第一个模块有详细使用案例。</p><p>由于<code>browser</code>目前处于实验阶段，go源码中的<code>chromium</code>模块并未打包进入k6的二进制文件中。根据下面查看到的源码，可以看到只是注册返回了<code>browser</code> <code> devices</code>两个模块。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//register.go</span><br>func init() &#123;<br>k6modules.Register(<span class="hljs-string">&quot;k6/x/browser&quot;</span>, browser.New())<br>&#125;<br><span class="hljs-comment">//browser/module.go</span><br>func New() *<span class="hljs-class">RootModule </span>&#123;<br>return <span class="hljs-variable">&amp;</span>RootModule&#123;<br><span class="hljs-symbol">PidRegistry:</span> <span class="hljs-variable">&amp;</span>pidRegistry&#123;&#125;,<br><span class="hljs-symbol">initOnce:</span>    <span class="hljs-variable">&amp;sync</span>.Once&#123;&#125;,<br>&#125;<br>&#125;<br><br>return <span class="hljs-variable">&amp;</span>ModuleInstance&#123;<br><span class="hljs-symbol">mod:</span> <span class="hljs-variable">&amp;</span>JSModule&#123;<br><span class="hljs-symbol">Browser:</span> mapBrowserToGoja(moduleVU&#123;<br><span class="hljs-symbol">VU:</span>                vu,<br><span class="hljs-symbol">pidRegistry:</span>       m.PidRegistry,<br><span class="hljs-symbol">browserRegistry:</span>   newBrowserRegistry(vu, m.remoteRegistry, m.PidRegistry),<br><span class="hljs-symbol">taskQueueRegistry:</span> newTaskQueueRegistry(vu),<br>&#125;),<br><span class="hljs-symbol">Devices:</span> common.GetDevices(),<br>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说，当你尝试如下，会报错无法使用，因为导入的<code>chromium</code>为空。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; chromium &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;k6/experimental/browser&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> browser = chromium.launch()<br>  <span class="hljs-keyword">const</span> page = browser.newPage()<br>  page.goto(<span class="hljs-string">&#x27;https://test.k6.io/my_messages.php&#x27;</span>);<br>  page.close()<br>  browser.close()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="browser模块的使用之设置cookie"><a href="#browser模块的使用之设置cookie" class="headerlink" title="browser模块的使用之设置cookie"></a>browser模块的使用之设置cookie</h3><p>由于所在登录网页有svg的验证码，尝试通过解析验证码的方式来登录，结果有点困难；因此转向寻找设置默认cookie来跳过身份识别直接登录网页。<code>playwright</code>也有类似方法。k6本意上<code>browser</code>最终会尽可能和<code>playwright</code>的api一致，来使得大家不需重新学习新的api（官网说的）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//查看源码common/browser_context.go此处有设置cookies方法，因此需要先行定义一个BrowserContext出来</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *BrowserContext)</span> <span class="hljs-title">AddCookies</span><span class="hljs-params">(cookies []*Cookie)</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">//mapping_test.go看测试代码</span><br><span class="hljs-keyword">type</span> browserAPI <span class="hljs-keyword">interface</span> &#123;<br>Close()<br>Context() *common.BrowserContext<br>CloseContext()<br>IsConnected() <span class="hljs-keyword">bool</span><br>NewContext(opts goja.Value) (*common.BrowserContext, error)<br>NewPage(opts goja.Value) (*common.Page, error)<br>On(<span class="hljs-keyword">string</span>) (<span class="hljs-keyword">bool</span>, error)<br>UserAgent() <span class="hljs-keyword">string</span><br>Version() <span class="hljs-keyword">string</span><br>&#125;<br><span class="hljs-comment">//browser/mapping.go</span><br><span class="hljs-comment">// mapBrowser to the JS module.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapBrowser</span><span class="hljs-params">(vu moduleVU)</span> <span class="hljs-title">mapping</span></span> &#123; <span class="hljs-comment">//nolint:funlen</span><br>rt := vu.Runtime()<br><span class="hljs-keyword">return</span> mapping&#123;<br><span class="hljs-string">&quot;context&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-params">(*common.BrowserContext, error)</span></span> &#123;<br>&#125;,<br><span class="hljs-string">&quot;closeContext&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<br>&#125;,<br><span class="hljs-string">&quot;isConnected&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">bool</span>, error)</span></span> &#123;<br>&#125;,<br><span class="hljs-string">&quot;newContext&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(opts goja.Value)</span> <span class="hljs-params">(*goja.Object, error)</span></span> &#123;<br>&#125;,<br><span class="hljs-string">&quot;userAgent&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">string</span>, error)</span></span> &#123;<br>&#125;,<br><span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">string</span>, error)</span></span> &#123;<br>&#125;,<br><span class="hljs-string">&quot;newPage&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(opts goja.Value)</span> <span class="hljs-params">(mapping, error)</span></span> &#123;<br>&#125;,<br>&#125;<br>&#125;<br><span class="hljs-comment">//根据上面代码可知，应该是调用newContext来返回一个BrowserContext</span><br></code></pre></td></tr></table></figure><p>代码实现如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>以下代码经过测试没问题<br>import &#123; browser &#125; from <span class="hljs-string">&#x27;k6/experimental/browser&#x27;</span>;<br><br>export const options = &#123;<br>  scenarios: &#123;<br>    ui: &#123;<br>      executor: <span class="hljs-string">&#x27;shared-iterations&#x27;</span>,<br>      options: &#123;<br>        browser: &#123;<br>          type: <span class="hljs-string">&#x27;chromium&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;<br><br>export default async <span class="hljs-keyword">function</span> () &#123;<br>    const context = browser.newContext();<br>    const page = context.newPage();<br>    context.addCookies([&#123;<br>      name: <span class="hljs-string">&#x27;sessionToken&#x27;</span>,<br>      value: <span class="hljs-string">&#x27;*****&#x27;</span>,<br>      domain: <span class="hljs-string">&#x27;localhost:8088&#x27;</span>,<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      expires: <span class="hljs-number">0</span>, <span class="hljs-regexp">//</span> 设置为 <span class="hljs-number">0</span> 表示会话 cookie，你可以设置具体的过期时间<br>      httpOnly: false, <span class="hljs-regexp">//</span> 是否为 HTTP-only cookie<br>      secure: false, <span class="hljs-regexp">//</span> 是否要求安全连接<br>      sameSite: <span class="hljs-string">&#x27;Lax&#x27;</span>, <span class="hljs-regexp">//</span> SameSite 属性，可以是 <span class="hljs-string">&#x27;Lax&#x27;</span>、<span class="hljs-string">&#x27;Strict&#x27;</span> 或 <span class="hljs-string">&#x27;None&#x27;</span><br>    &#125;,&#123;<br>      name: <span class="hljs-string">&#x27;*****&#x27;</span>,<br>      value: <span class="hljs-string">&#x27;*****&#x27;</span>,<br>      domain: <span class="hljs-string">&#x27;localhost:8088&#x27;</span>,<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      expires: <span class="hljs-number">0</span>, <span class="hljs-regexp">//</span> 设置为 <span class="hljs-number">0</span> 表示会话 cookie，你可以设置具体的过期时间<br>      httpOnly: false, <span class="hljs-regexp">//</span> 是否为 HTTP-only cookie<br>      secure: false, <span class="hljs-regexp">//</span> 是否要求安全连接<br>      sameSite: <span class="hljs-string">&#x27;Lax&#x27;</span>, <span class="hljs-regexp">//</span> SameSite 属性，可以是 <span class="hljs-string">&#x27;Lax&#x27;</span>、<span class="hljs-string">&#x27;Strict&#x27;</span> 或 <span class="hljs-string">&#x27;None&#x27;</span><br>    &#125;]);<br><br>    console.log(<span class="hljs-string">&#x27;####&#x27;</span>,context.cookies())<br>    <span class="hljs-regexp">//</span> 打开需要登录的页面<br>    await page.goto(<span class="hljs-string">&#x27;http://localhost:8088/****/****/****&#x27;</span>);<br><span class="hljs-regexp">//</span>截图看看最后对不对<br>    page.screenshot(&#123; path: <span class="hljs-string">&#x27;screenshot.png&#x27;</span> &#125;);<br>    <span class="hljs-regexp">//</span> 关闭浏览器<br>    page.close();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>附k6 browser指标的意义：<br>这些指标是 Web Vitals 的一部分，Web Vitals 是一组被 Google 推荐的用于衡量网站性能的指标。</p><ol><li><p><strong><code>browser_web_vital_cls</code>（Cumulative Layout Shift）：</strong> 衡量页面上元素的不稳定性，尤其是在加载期间。CLS 表示在页面生命周期内用户体验中不断发生的不期望的布局变化的累积分数。</p></li><li><p><strong><code>browser_web_vital_fcp</code>（First Contentful Paint）：</strong> 标志着用户能够看到页面内容的时间点。具体来说，它是页面开始加载到浏览器绘制页面的第一个像素的时间。</p></li><li><p><strong><code>browser_web_vital_lcp</code>（Largest Contentful Paint）：</strong> 衡量页面加载期间最大的可见内容块（例如图片或文本块）的渲染时间。LCP 提供了有关页面加载性能的重要信息。</p></li><li><p><strong><code>browser_web_vital_ttfb</code>（Time to First Byte）：</strong> 衡量用户发起请求到接收到来自服务器的第一个字节所花费的时间。它反映了服务器响应的速度。</p></li></ol><h3 id="k6-browser和Playwright区别？"><a href="#k6-browser和Playwright区别？" class="headerlink" title="k6 browser和Playwright区别？"></a>k6 browser和Playwright区别？</h3><p>k6 browser我的理解（至于Playwright先按下不表，没有调查就没有发言权）</p><ul><li>更真实模拟用户，可以多并发用户，以计算整体平均页面性能数据（这个可能是比Playwright更优秀的存在，毕竟单一一次测试结果未必可靠）</li><li>主要关注于整体性能测试，提供了页面级别的性能指标，而不是每个请求的详细数据（也许未来会支持？或者自行改源码）</li><li>支持可视化，对接influxdb和grafana（可视化存入influxdb发现有存储每个请求的数据，也许能做到细化？）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k6系列之chaijs篇</title>
    <link href="/2023/11/12/k6%E7%B3%BB%E5%88%97%E4%B9%8Bchaijs%E7%AF%87/"/>
    <url>/2023/11/12/k6%E7%B3%BB%E5%88%97%E4%B9%8Bchaijs%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="chaijs接入"><a href="#chaijs接入" class="headerlink" title="chaijs接入"></a>chaijs接入</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在线接入<br>import &#123; describe, expect &#125; from <span class="hljs-string">&#x27;https://jslib.k6.io/k6chaijs/4.3.4.3/index.js&#x27;</span>;<br><span class="hljs-regexp">//</span>离线<br>直接整个文件复制保存下来即可<br></code></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="json类"><a href="#json类" class="headerlink" title="json类"></a>json类</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">//拥有某个key</span><br>expect(res.json()).<span class="hljs-keyword">to</span>.have.<span class="hljs-keyword">property</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>)<br><span class="hljs-comment">//拥有某个key，并且值等于xx</span><br>expect(myObject).<span class="hljs-keyword">to</span>.have.<span class="hljs-keyword">property</span>(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;value1&#x27;</span>);<br>expect(myObject).<span class="hljs-keyword">to</span>.have.<span class="hljs-keyword">property</span>(<span class="hljs-string">&#x27;key2&#x27;</span>).that.equals(<span class="hljs-string">&#x27;value2&#x27;</span>);<br>expect(myObject).<span class="hljs-keyword">to</span>.deep.include(<span class="hljs-comment">&#123; key1: &#x27;value1&#x27;, key2: &#x27;value2&#x27; &#125;</span>);<span class="hljs-comment">//深度相等</span><br><span class="hljs-comment">//拥有所有key，不多不少</span><br>expect(<span class="hljs-comment">&#123;a: 1, b: 2&#125;</span>).<span class="hljs-keyword">to</span>.have.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-comment">//先检查类型在判断</span><br>expect(<span class="hljs-comment">&#123;a: 1, b: 2&#125;</span>).<span class="hljs-keyword">to</span>.be.an(<span class="hljs-string">&#x27;object&#x27;</span>).that.has.all.keys(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-comment">//待实验、补充</span><br><br><br></code></pre></td></tr></table></figure><h4 id="我怎么接入匹配"><a href="#我怎么接入匹配" class="headerlink" title="我怎么接入匹配"></a>我怎么接入匹配</h4><p>我的目标是，除了检查成功失败，还要能够在报告上体现。报告的<code>status</code>字段可选值<code>passed、broken</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br><span class="hljs-keyword">export</span> function checkExpectation(expectationFunc) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>      expectationFunc();<br>      <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;pass&#x27;</span>: <span class="hljs-string">&#x27;passed&#x27;</span>&#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;fail&#x27;</span>: error.message&#125;;<br>  &#125;<br>&#125;<br><span class="hljs-regexp">//</span>然后报告中设置报告结构<br>res.report.steps = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;返回状态200或者201&quot;</span>,<br>    <span class="hljs-string">&quot;status&quot;</span>: checkExpectation(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> expect([<span class="hljs-number">200</span>,<span class="hljs-number">201</span>]).to.be.an(<span class="hljs-string">&quot;array&quot;</span>).that.includes(res.res.status)).pass || <span class="hljs-string">&#x27;broken&#x27;</span>,<br>    <span class="hljs-string">&quot;parameters&quot;</span>: [&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;实际结果&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: checkExpectation(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> expect([<span class="hljs-number">200</span>,<span class="hljs-number">201</span>]).to.be.an(<span class="hljs-string">&quot;array&quot;</span>).that.includes(res.res.status)).fail || res.res.status&#125;]<br>    &#125;,<br>    &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;返回包含objectId&quot;</span>,<br>    <span class="hljs-string">&quot;status&quot;</span>: checkExpectation(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> expect(res.res.json()).to.have.property(<span class="hljs-string">&quot;objectId&quot;</span>)).pass || <span class="hljs-string">&#x27;broken&#x27;</span>,<br>    <span class="hljs-string">&quot;parameters&quot;</span>: [&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;实际结果&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: checkExpectation(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> expect(res.res.json()).to.have.property(<span class="hljs-string">&quot;objectId&quot;</span>)).fail || res.res.json().objectId&#125;]<br>    &#125;<br>]<br><span class="hljs-regexp">//</span>效果图忘记了，后面再补充<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>k6</tag>
      
      <tag>chaijs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>elasticsearch基础数据类型</title>
    <link href="/2023/11/07/elasticsearch%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/11/07/elasticsearch%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考地址：<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html</a></p><p>long<br>虽然说是数字类型，但是传”1222” [“122”]也是能存储进去，并不会报错。<br>如果你的字符串实际上是数字的文本表示（例如，“123”），Elasticsearch可能会尝试将这个字符串转换为一个long值。如果转换成功，那么这个值就可以被存储在long字段中</p><p>其他待补充，暂不需要</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k6系列之我的第一个扩展xk6-zap</title>
    <link href="/2023/10/29/k6%E7%B3%BB%E5%88%97%E4%B9%8B%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%89%A9%E5%B1%95xk6-zap/"/>
    <url>/2023/10/29/k6%E7%B3%BB%E5%88%97%E4%B9%8B%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%89%A9%E5%B1%95xk6-zap/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="go-mod-init"><a href="#go-mod-init" class="headerlink" title="go mod init"></a>go mod init</h3><p>我是直接<code>go mod init xk6-zap</code>的，后来执行上传github后执行<code>xk6 build --with github.com/Mistyrain520/xk6-zap@latest</code>的时候有问题</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">go</span>: k<span class="hljs-number">6</span> imports<br>        <span class="hljs-attribute">github</span>.com/Mistyrain<span class="hljs-number">520</span>/xk<span class="hljs-number">6</span>-zap: github.com/Mistyrain<span class="hljs-number">520</span>/xk<span class="hljs-number">6</span>-zap@v<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>: parsing go.mod:<br>        <span class="hljs-attribute">module</span> declares its path as: xk<span class="hljs-number">6</span>-zap<br>                <span class="hljs-attribute">but</span> was required as: github.com/Mistyrain<span class="hljs-number">520</span>/xk<span class="hljs-number">6</span>-zap 如何修正这个问题<br></code></pre></td></tr></table></figure><p>google之后发现我的mod文件中第一行<code>moudle xk6-zap</code>其实不对。我本地自己打包这样是没问题，但是上传github之后我需要改成<code>github.com/Mistyrain520/xk6-zap</code></p><p>因此建议按照<code>go mod init github.com/Mistyrain520/xk6-zap</code></p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>我先创建github仓库，拉到本地</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//我本地有两个账号，需要改改<br>git config <span class="hljs-keyword">user</span>.name &quot;Mistyrain520&quot;<br>git config <span class="hljs-keyword">user</span>.email <span class="hljs-number">1298616974</span>@qq.com<br>git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>然后编写代码，过程忽略不说。主要说几个坑。</p><ul><li><p>go中导出是按照函数第一个字母大写来导出的，但是实际在xk6中用这个导出的方法，不需要大写。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//k6扩展中InitLogger</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(z *ZapLogger)</span> <span class="hljs-title">InitLogger</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>, args ...<span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">zap</span>.<span class="hljs-title">SugaredLogger</span></span> &#123;&#125;<br><span class="hljs-comment">//在实际应用中initLogger</span><br><span class="hljs-keyword">const</span> mylogger = zaplogger.initLogger(<span class="hljs-string">&quot;./test.log&quot;</span>)<br></code></pre></td></tr></table></figure><p>这可能是因为go和js不同吧。执行xk6 build之后，导出的大写实际上应该默认改为小写了。</p></li><li><p>k6的生命周期要熟悉。初始化阶段和setup、 teardown其实是不同的。</p></li></ul><p>如果你在初始化阶段声明<code>const mylogger = zaplogger.initLogger(&quot;./test.log&quot;); console.log(&quot;@@&quot;)</code>。然后你设置<code>VU</code>数为2，你会发现<code>@@</code>其实打印了了不止一遍。<br>每个VU都会执行一遍初始化以及setup、teardown。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mel">import zaplogger from <span class="hljs-string">&#x27;k6/x/zaplogger&#x27;</span>;<br>import &#123; sleep &#125; from <span class="hljs-string">&#x27;k6&#x27;</span>;<br><br>const mylogger = zaplogger.initLogger(<span class="hljs-string">&quot;./test.log&quot;</span>)<br>console.<span class="hljs-keyword">log</span>(<span class="hljs-string">&quot;@@@@@@@@@@&quot;</span>)<br>export <span class="hljs-keyword">default</span> function () &#123; <br>  mylogger.infow(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;gagga&quot;</span>)<br>  mylogger.infow(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;values1&quot;</span>)<br>  sleep(<span class="hljs-number">5</span>)<br>  &#125;<br><span class="hljs-comment">//以上代码总共打印了三遍</span><br><br>          /\      |‾‾| /‾‾/   /‾‾/<br>     /\  /  \     |  |/  /   /  /<br>    /  \/    \    |     (   /   ‾‾\<br>   /          \   |  |\  \ |  (‾)  |<br>  / __________ \  |__| \__\ \_____/ .io<br><br>INFO[<span class="hljs-number">0000</span>] @@@@@@@@@@                                    <span class="hljs-keyword">source</span>=console<br>  execution: local<br>     script: .\examples\test2.js<br>     output: -<br><br>  scenarios: (<span class="hljs-number">100.00</span>%) <span class="hljs-number">1</span> scenario, <span class="hljs-number">1</span> <span class="hljs-keyword">max</span> VUs, <span class="hljs-number">10</span>m30s <span class="hljs-keyword">max</span> duration (incl. graceful stop):<br>           * <span class="hljs-keyword">default</span>: <span class="hljs-number">1</span> iterations <span class="hljs-keyword">for</span> each of <span class="hljs-number">1</span> VUs (maxDuration: <span class="hljs-number">10</span>m0s, gracefulStop: <span class="hljs-number">30</span>s)<br><br>INFO[<span class="hljs-number">0000</span>] @@@@@@@@@@                                    <span class="hljs-keyword">source</span>=console<br>INFO[<span class="hljs-number">0005</span>] @@@@@@@@@@                                    <span class="hljs-keyword">source</span>=console<br><br>     data_received........: <span class="hljs-number">0</span> B <span class="hljs-number">0</span> B/s<br>     data_sent............: <span class="hljs-number">0</span> B <span class="hljs-number">0</span> B/s<br>     iteration_duration...: avg=<span class="hljs-number">5.02</span>s <span class="hljs-keyword">min</span>=<span class="hljs-number">5.02</span>s med=<span class="hljs-number">5.02</span>s <span class="hljs-keyword">max</span>=<span class="hljs-number">5.02</span>s p(<span class="hljs-number">90</span>)=<span class="hljs-number">5.02</span>s p(<span class="hljs-number">95</span>)=<span class="hljs-number">5.02</span>s<br>     iterations...........: <span class="hljs-number">1</span>   <span class="hljs-number">0.198953</span>/s<br>     vus..................: <span class="hljs-number">1</span>   <span class="hljs-keyword">min</span>=<span class="hljs-number">1</span>      <span class="hljs-keyword">max</span>=<span class="hljs-number">1</span><br>     vus_max..............: <span class="hljs-number">1</span>   <span class="hljs-keyword">min</span>=<span class="hljs-number">1</span>      <span class="hljs-keyword">max</span>=<span class="hljs-number">1</span><br><br><br>running (<span class="hljs-number">00</span>m05<span class="hljs-number">.0</span>s), <span class="hljs-number">0</span>/<span class="hljs-number">1</span> VUs, <span class="hljs-number">1</span> complete and <span class="hljs-number">0</span> interrupted iterations<br><span class="hljs-keyword">default</span> ✓ [======================================] <span class="hljs-number">1</span> VUs  <span class="hljs-number">00</span>m05<span class="hljs-number">.0</span>s/<span class="hljs-number">10</span>m0s  <span class="hljs-number">1</span>/<span class="hljs-number">1</span> iters, <span class="hljs-number">1</span> per VU<br></code></pre></td></tr></table></figure><p>根据我的测试分析，最后一遍是在<code>sleep</code>之后打印出来的，这一步可能是默认的<code>teardown</code>打印的。但是我加了<code>teardown</code>，结果却打印了四遍。因此猜测本身k6会自己执行一次收尾操作，这次收尾操作和<code>teardown</code>都是可以认为是一个<code>vu</code>，都会执行一遍初始化阶段的代码<code>console.log(&quot;@@@@@@&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">teardown</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 什么也不做</span><br>&#125;<br></code></pre></td></tr></table></figure><p>总结如下</p><ul><li>k6默认会有开始和收尾的操作，会执行初始化阶段的代码</li><li>k6的setup teardown都会执行初始化阶段</li><li>k6的function也就是默认一个VU，都会执行初始化阶段代码</li></ul><p>如下这段代码总共打印5次@@@@@@@@</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;@@@@@@@@@@&quot;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setup</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>  sleep(<span class="hljs-number">5</span>)<br>  &#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">teardown</span>(<span class="hljs-params"></span>) </span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>调试过程中其实可能导入了其他包，最后上传github之前建议执行<code>go get -u</code>更新所有依赖<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//否则可能会有如下报错</span><br>go: k6 imports<br>        github.com<span class="hljs-regexp">/Mistyrain520/</span>xk6-zap imports<br>        go.k6.io<span class="hljs-regexp">/k6/</span>js/modules imports<br>        go.k6.io<span class="hljs-regexp">/k6/</span>loader tested by<br>        go.k6.io<span class="hljs-regexp">/k6/</span>loader.test imports<br>        go.k6.io<span class="hljs-regexp">/k6/</span>lib<span class="hljs-regexp">/testutils/</span>httpmultibin imports<br>        google.golang.org<span class="hljs-regexp">/grpc/</span>status imports<br>        google.golang.org<span class="hljs-regexp">/genproto/g</span>oogleapis<span class="hljs-regexp">/rpc/</span>status: ambiguous <span class="hljs-keyword">import</span>: found <span class="hljs-keyword">package</span> google.golang.org<span class="hljs-regexp">/genproto/g</span>oogleapis<span class="hljs-regexp">/rpc/</span>status in multiple modules:<br>        google.golang.org/genproto v0.<span class="hljs-number">0.0</span>-<span class="hljs-number">20210226172003</span>-ab064af71705 (C:\Users\EDY\go\pkg\mod\google.golang.org\genproto@v0.<span class="hljs-number">0.0</span>-<span class="hljs-number">20210226172003</span>-ab064af71705\googleapis\rpc\status)<br>        google.golang.org<span class="hljs-regexp">/genproto/g</span>oogleapis/rpc v0.<span class="hljs-number">0.0</span>-<span class="hljs-number">20230525234030</span>-<span class="hljs-number">28</span>d5490b6b19 (C:\Users\EDY\go\pkg\mod\google.golang.org\genproto\googleapis\rpc@v0.<span class="hljs-number">0.0</span>-<span class="hljs-number">20230525234030</span>-<span class="hljs-number">28</span>d5490b6b19\status)<br><span class="hljs-number">2023</span><span class="hljs-regexp">/10/</span><span class="hljs-number">29</span> <span class="hljs-number">15</span>:<span class="hljs-number">14</span>:<span class="hljs-number">45</span> [INFO] Cleaning up temporary folder: C:\Users\EDY\AppData\Local\Temp\buildenv_2023-<span class="hljs-number">10</span>-<span class="hljs-number">29</span>-<span class="hljs-number">1514.2545891510</span> <br></code></pre></td></tr></table></figure></li><li>多个扩展打包<br><code>xk6 build --with github.com/Mistyrain520/xk6-zap@latest --with github.com/grafana/xk6-sql</code></li><li>本地打包<br><code>xk6 build --with github.com/Mistyrain520/xk6-zap=.</code></li></ul><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>除了go可以编写打包为k6扩展之外，k6也支持用es6、ts去编译打包后作为模块包给k6引用。<br><a href="https://k6.io/docs/using-k6/modules/">详情点击这里</a>，比如<a href="https://github.com/grafana/k6-jslib-k6chaijs/tree/master">这个check模块包</a><br>笔者试过将uuid、winstom打包，但其中曲折比go麻烦不少，且事实上用go来写扩展包应该是效率更好的。像<code>zap</code>包都是高性能和线程安全的。</p><h3 id="wsl-ubuntu下的编译"><a href="#wsl-ubuntu下的编译" class="headerlink" title="wsl ubuntu下的编译"></a>wsl ubuntu下的编译</h3><ul><li>首先需要保证有go环境，<code>go version</code>能执行通，默认安装路径是<code>/usr/local/go</code></li><li>接下来下载xk6，执行<code>go install go.k6.io/xk6/cmd/xk6@latest</code>,下载完毕默认安装路径是<code>/root/go/bin</code></li><li>尝试把xk6配置到环境变量上。我试过几次失败了，于是跳过这一步</li><li>直接进入<code>/root/go/bin</code>,查看这个目录下有个<code>xk6</code>,直接执行<code>./xk6 build --with github.com/Mistyrain520/xk6-zap@latest --with github.com/grafana/xk6-sql</code>,完成之后目录下多了<code>k6</code>可执行二进制文件</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k6系列之生命周期以及变量传递</title>
    <link href="/2023/10/16/k6%E7%B3%BB%E5%88%97%E4%B9%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92/"/>
    <url>/2023/10/16/k6%E7%B3%BB%E5%88%97%E4%B9%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setup</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">aa</span>: <span class="hljs-number">0</span> &#125;;  <span class="hljs-comment">// 初始化aa</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>  data.aa = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 修改aa</span><br>  <span class="hljs-keyword">return</span> data;  <span class="hljs-comment">// 返回修改后的数据</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">teardown</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(data.aa);  <span class="hljs-comment">// 在teardown中访问aa</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们在<code>setup</code>函数中初始化了一个对象，并在其中设置了变量<code>aa</code>。然后，在<code>default</code>函数中，我们修改了这个对象，并将其返回。最后，在<code>teardown</code>函数中，我们可以访问到修改后的对象和其中的变量。</p>]]></content>
    
    
    
    <tags>
      
      <tag>k6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k6系列之scenario</title>
    <link href="/2023/10/03/k6%E7%B3%BB%E5%88%97%E4%B9%8Bscenario/"/>
    <url>/2023/10/03/k6%E7%B3%BB%E5%88%97%E4%B9%8Bscenario/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="scenario场景"><a href="#scenario场景" class="headerlink" title="scenario场景"></a>scenario场景</h2><p>主要参考地址 <a href="https://k6.io/docs/using-k6/scenarios/">https://k6.io/docs/using-k6/scenarios/</a><br>先行概念理解</p><ul><li>vus：可以理解为用户数</li><li>iterations：迭代数，也即执行数量，执行几次<h4 id="Per-VU-iterations场景"><a href="#Per-VU-iterations场景" class="headerlink" title="Per VU iterations场景"></a>Per VU iterations场景</h4>每个VU执行特定的iterations，参数如下</li><li>vus 指定vu数 integer default1</li><li>iterations 迭代数 integer default1</li><li>maxDuration 强制停止前的最大场景持续时间（不包括优雅的停止）string 默认 ‘10m’<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> http <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;k6/http&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; sleep &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;k6&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> options = &#123;<br>  <span class="hljs-attr">discardResponseBodies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">scenarios</span>: &#123;<br>    <span class="hljs-attr">contacts</span>: &#123;<br>      <span class="hljs-attr">executor</span>: <span class="hljs-string">&#x27;per-vu-iterations&#x27;</span>,<br>      <span class="hljs-attr">vus</span>: <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">iterations</span>: <span class="hljs-number">20</span>,<br>      <span class="hljs-attr">maxDuration</span>: <span class="hljs-string">&#x27;30s&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  http.get(<span class="hljs-string">&#x27;https://test.k6.io/contacts.php&#x27;</span>);<br>  <span class="hljs-comment">// Injecting sleep</span><br>  <span class="hljs-comment">// Sleep time is 500ms. Total iteration time is sleep + time to finish request.</span><br>  sleep(<span class="hljs-number">0.5</span>);<br>&#125;<br><br><span class="hljs-comment">//我的写法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> options = &#123;<br>  <span class="hljs-attr">discardResponseBodies</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">scenarios</span>: &#123;<br>    <span class="hljs-attr">contacts</span>: &#123;<br>        <span class="hljs-attr">executor</span>: <span class="hljs-string">&#x27;per-vu-iterations&#x27;</span>,<br>        <span class="hljs-attr">vus</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">iterations</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">maxDuration</span>: <span class="hljs-string">&#x27;30s&#x27;</span>,<br>        <span class="hljs-attr">exec</span>: <span class="hljs-string">&#x27;contacts&#x27;</span>,<br>        <span class="hljs-attr">tags</span>: &#123; <span class="hljs-attr">my_custom_tag</span>: <span class="hljs-string">&#x27;contacts&#x27;</span> &#125;,<br>        <span class="hljs-attr">env</span>: &#123; <span class="hljs-attr">MYVAR</span>: <span class="hljs-string">&#x27;contacts&#x27;</span> &#125;,<br>      &#125;,<br>    <span class="hljs-attr">news</span>: &#123;<br>        <span class="hljs-attr">executor</span>: <span class="hljs-string">&#x27;shared-iterations&#x27;</span>,<br>        <span class="hljs-attr">iterations</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">exec</span>: <span class="hljs-string">&#x27;news&#x27;</span>,<br>        <span class="hljs-attr">tags</span>: &#123; <span class="hljs-attr">my_custom_tag</span>: <span class="hljs-string">&#x27;news&#x27;</span> &#125;,<br>        <span class="hljs-attr">env</span>: &#123; <span class="hljs-attr">MYVAR</span>: <span class="hljs-string">&#x27;news&#x27;</span> &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">contacts</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (__ENV.MYVAR != <span class="hljs-string">&#x27;contacts&#x27;</span>) fail();<br>  http.get(<span class="hljs-string">&#x27;https://test.k6.io/contacts.php&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">news</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (__ENV.MYVAR != <span class="hljs-string">&#x27;news&#x27;</span>) fail();<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;http://xxxxxx/api/gateway/login&#x27;</span>;<br>  <span class="hljs-keyword">const</span> payload = <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span><br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> params = &#123;<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>      <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/json, text/plain, */*&#x27;</span><br>    &#125;,<br>  &#125;;<br>  <span class="hljs-keyword">const</span> res1 = http.post(url, payload, params);<br>  <span class="hljs-built_in">console</span>.log(res1.body, <span class="hljs-string">&quot;哈哈&quot;</span>)<br><span class="hljs-comment">//   console.log(res1.headers)</span><br>&#125;<br><br><br><span class="hljs-comment">//以下是选项设置解释</span><br><span class="hljs-attr">discardResponseBodies</span>: <span class="hljs-literal">true</span>,代表忽略请求返回体。在性能测试中可以关闭以节省内存，如果需要校验返回body的内容，则需要改为<span class="hljs-literal">false</span><br>exec 代表要执行的函数。如果没有则是<span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span></span><br><span class="hljs-function"><span class="hljs-title">tags</span> <span class="hljs-title">object</span>特定于此场景的标签</span><br></code></pre></td></tr></table></figure><h3 id="shared-iterations"><a href="#shared-iterations" class="headerlink" title="shared-iterations"></a>shared-iterations</h3>特定数量的 VU 完成固定数量的总迭代<br>比如：10个VUe完成100个迭代，最后不是10个VUe每个10迭代，可能第一个VUe是5迭代，而第二个是15.总之总计是100迭代</li><li>vus 指定vu数 integer default1</li><li>iterations 迭代数 integer default1</li><li>maxDuration 强制停止前的最大场景持续时间（不包括优雅的停止）string 默认 ‘10m’<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">export</span> <span class="hljs-string">const</span> <span class="hljs-string">options</span> <span class="hljs-string">=</span> &#123;<br>  <span class="hljs-attr">discardResponseBodies:</span> <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">scenarios:</span> &#123;<br>    <span class="hljs-attr">contacts:</span> &#123;<br>      <span class="hljs-attr">executor:</span> <span class="hljs-string">&#x27;shared-iterations&#x27;</span>,<br>      <span class="hljs-attr">vus:</span> <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">iterations:</span> <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">maxDuration:</span> <span class="hljs-string">&#x27;30s&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h3 id="Constant-VUs"><a href="#Constant-VUs" class="headerlink" title="Constant VUs"></a>Constant VUs</h3>该场景适用于：固定数量的VU，在指定时间内尽可能多的完成迭代数<br>必填参数如下：</li><li>duration(required)    string  no default</li><li>vus  integer  default 1<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//10个用户在30秒内尽可能多的去执行，看最终能执行几次</span><br><span class="hljs-string">export</span> <span class="hljs-string">const</span> <span class="hljs-string">options</span> <span class="hljs-string">=</span> &#123;<br>  <span class="hljs-attr">discardResponseBodies:</span> <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">scenarios:</span> &#123;<br>    <span class="hljs-attr">contacts:</span> &#123;<br>      <span class="hljs-attr">executor:</span> <span class="hljs-string">&#x27;constant-vus&#x27;</span>,<br>      <span class="hljs-attr">vus:</span> <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">duration:</span> <span class="hljs-string">&#x27;30s&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h3 id="Ramping-VUs"><a href="#Ramping-VUs" class="headerlink" title="Ramping VUs"></a>Ramping VUs</h3>该场景适用于：线性变化的VUs，在指定时间内完成尽可能多的迭代数<br>必填参数如下： </li><li>stages(required) array  default []</li><li>startVUs integer default 1</li><li>gracefulRampDown string ‘30s’<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">/*</span><br><span class="hljs-string">此示例安排了一个两阶段测试，在</span> <span class="hljs-number">20</span> <span class="hljs-string">秒内从</span> <span class="hljs-number">0</span> <span class="hljs-string">VU</span> <span class="hljs-string">增加到</span> <span class="hljs-number">10</span> <span class="hljs-string">个</span> <span class="hljs-string">VU，然后在</span> <span class="hljs-number">10</span> <span class="hljs-string">秒内减少到</span> <span class="hljs-number">0</span> <span class="hljs-string">VU</span><br><span class="hljs-string">gracefulRampDown</span> <span class="hljs-string">这个参数个人理解是，在20s内，线性递增10个用户，每个用户都在尽可能的发请求去完成迭代。</span><br><span class="hljs-string">但是到了第20s之后要开始递减了，准备递减的那个用户又可能刚好还没完成迭代（完成请求）</span><br><span class="hljs-string">该参数设置0s，则意味着不管前面用户身上的迭代是否完成，直接中断迭代，减少该模拟用户。</span><br><span class="hljs-string">设置10s，则意味着10s之后，才执行停止AU数。通常设置为0s，且应用于线性递减的场景。</span><br><span class="hljs-string">*/</span><br><span class="hljs-string">export</span> <span class="hljs-string">const</span> <span class="hljs-string">options</span> <span class="hljs-string">=</span> &#123;<br>  <span class="hljs-attr">discardResponseBodies:</span> <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">scenarios:</span> &#123;<br>    <span class="hljs-attr">contacts:</span> &#123;<br>      <span class="hljs-attr">executor:</span> <span class="hljs-string">&#x27;ramping-vus&#x27;</span>,<br>      <span class="hljs-attr">startVUs:</span> <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">stages:</span> [<br>        &#123; <span class="hljs-attr">duration:</span> <span class="hljs-string">&#x27;20s&#x27;</span>, <span class="hljs-attr">target:</span> <span class="hljs-number">10</span> &#125;,<br>        &#123; <span class="hljs-attr">duration:</span> <span class="hljs-string">&#x27;10s&#x27;</span>, <span class="hljs-attr">target:</span> <span class="hljs-number">0</span> &#125;,<br>      ],<br>      <span class="hljs-attr">gracefulRampDown:</span> <span class="hljs-string">&#x27;0s&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;<span class="hljs-string">;</span><br></code></pre></td></tr></table></figure><h3 id="Constant-arrival-rate（恒定到达率）"><a href="#Constant-arrival-rate（恒定到达率）" class="headerlink" title="Constant arrival rate（恒定到达率）"></a>Constant arrival rate（恒定到达率）</h3>适用场景：保持一定迭代启动率，比如每秒30次迭代（请求）。具体k6如何分配，需要参考<a href="https://k6.io/docs/using-k6/scenarios/concepts/arrival-rate-vu-allocation/">Arrival-rate VU allocation</a><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>以下，每秒<span class="hljs-number">30</span>迭代，持续<span class="hljs-number">30</span>s，<br>export const options = &#123;<br>  discardResponseBodies: true,<br>  scenarios: &#123;<br>    contacts: &#123;<br>      executor: <span class="hljs-string">&#x27;constant-arrival-rate&#x27;</span>,<br><br>      <span class="hljs-regexp">//</span> How long the test lasts<br>      duration: <span class="hljs-string">&#x27;30s&#x27;</span>,<br><br>      <span class="hljs-regexp">//</span> How many iterations per timeUnit<br>      rate: <span class="hljs-number">30</span>,<br><br>      <span class="hljs-regexp">//</span> Start `rate` iterations per second<br>      timeUnit: <span class="hljs-string">&#x27;1s&#x27;</span>,<br><br>      <span class="hljs-regexp">//</span> Pre-allocate VUs<br>      <span class="hljs-regexp">//</span>提供<span class="hljs-number">50</span>个VU供分配，VU越多则分配越容易，VU过少就难保持每秒<span class="hljs-number">30</span>迭代<br>      preAllocatedVUs: <span class="hljs-number">50</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Ramping-arrival-rate"><a href="#Ramping-arrival-rate" class="headerlink" title="Ramping arrival rate"></a>Ramping arrival rate</h3>阶段到达率，顾名思义，线性提升（降低）到指定到达率（每秒多少迭代），持续一定时间<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/*从定义的开始起始率startRate，一分钟内每分钟 300 次迭代。</span><br><span class="hljs-comment">一分钟后，迭代速率在接下来的两分钟内增加到每分钟 600 次迭代，</span><br><span class="hljs-comment">并在此速率下再保持四分钟。在最后两分钟，</span><br><span class="hljs-comment">它逐渐下降到每分钟 60 次迭代的目标。*/</span><br><br>export const options = &#123;<br>  discardResponseBodies: <span class="hljs-literal">true</span>,<br><br>  scenarios: &#123;<br>    contacts: &#123;<br>      executor: <span class="hljs-string">&#x27;ramping-arrival-rate&#x27;</span>,<br><br>      <span class="hljs-comment">// Start iterations per `timeUnit`</span><br>      startRate: <span class="hljs-number">300</span>,<br><br>      <span class="hljs-comment">// Start `startRate` iterations per minute</span><br>      timeUnit: <span class="hljs-string">&#x27;1m&#x27;</span>,<br><br>      <span class="hljs-comment">// Pre-allocate necessary VUs.</span><br>      preAllocatedVUs: <span class="hljs-number">50</span>,<br><br>      stages: <span class="hljs-meta">[</span><br>        <span class="hljs-comment">// Start 300 iterations per `timeUnit` for the first minute.</span><br>        &#123; target: <span class="hljs-number">300</span>, <span class="hljs-built_in">duration</span>: <span class="hljs-string">&#x27;1m&#x27;</span> &#125;,<br><br>        <span class="hljs-comment">// Linearly ramp-up to starting 600 iterations per `timeUnit` over the following two minutes.</span><br>        &#123; target: <span class="hljs-number">600</span>, <span class="hljs-built_in">duration</span>: <span class="hljs-string">&#x27;2m&#x27;</span> &#125;,<br><br>        <span class="hljs-comment">// Continue starting 600 iterations per `timeUnit` for the following four minutes.</span><br>        &#123; target: <span class="hljs-number">600</span>, <span class="hljs-built_in">duration</span>: <span class="hljs-string">&#x27;4m&#x27;</span> &#125;,<br><br>        <span class="hljs-comment">// Linearly ramp-down to starting 60 iterations per `timeUnit` over the last two minutes.</span><br>        &#123; target: <span class="hljs-number">60</span>, <span class="hljs-built_in">duration</span>: <span class="hljs-string">&#x27;2m&#x27;</span> &#125;,<br>      <span class="hljs-meta">]</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker网络</title>
    <link href="/2023/10/01/docker%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/10/01/docker%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="四种网络"><a href="#四种网络" class="headerlink" title="四种网络"></a>四种网络</h3><p>docker四种网络模式，不说了，用到以后再说，自行百度<br>算了，百度一下</p><p>Docker有四种基本的网络模式：</p><ol><li><p><strong>桥接模式（Bridge Mode）</strong>：当Docker守护进程启动时，会创建一个名为<code>docker0</code>的虚拟桥接²。所有在容器中创建的网络接口都会连接到这个桥接²。它在第二层网络（数据链路层）工作²。IP地址将在<code>docker0</code>的子网中分配，网关是<code>docker0</code>²。如果你使用<code>docker run -p</code>进行端口映射，iptables规则将被创建以在容器和主机之间进行端口映射²。</p></li><li><p><strong>主机模式（Host Mode）</strong>：使用主机模式创建和启动容器时，这个容器不会有一个唯一的网络命名空间，而是与主机共享网络命名空间²。不会创建虚拟网络接口，也不会分配IP地址²。但是文件系统、进程信息与主机是隔离的²。</p></li><li><p><strong>容器模式（Container Mode）</strong>：在这种模式下，新创建的容器将与现有容器共享相同的网络命名空间²。新容器不会创建自己的网络接口和分配新的IP，它与现有容器共享IP地址和端口²。除了网络外，文件系统和进程信息是隔离的²。这种模式非常像Kubernetes的pod基础设施²。</p></li><li><p><strong>无网络模式（None Mode）</strong>：在这种模式下，Docker容器有自己的网络命名空间，但不会为其做任何网络配置，也就是说Docker没有网络接口、IP地址、路由信息²。我们可以在需要时添加这些信息²。</p></li></ol><p>此外，Docker还支持第三方网络插件，这些插件通过提供额外的操作模式来扩展网络系统⁴。</p><p>Source: Conversation with Bing, 2023/10/1<br>(1) Explaining Four Basic Modes of Docker Network - Pivotal. <a href="https://community.pivotal.io/s/article/Explaining-Four-Basic-Modes-of-Docker-Network?language=en_US">https://community.pivotal.io/s/article/Explaining-Four-Basic-Modes-of-Docker-Network?language=en_US</a>.<br>(2) Docker container four network modes - ruraldock.com. <a href="https://www.ruraldock.com/article/81840516">https://www.ruraldock.com/article/81840516</a>.<br>(3) Docker Networking - Basics, Network Types &amp; Examples - Spacelift. <a href="https://spacelift.io/blog/docker-networking">https://spacelift.io/blog/docker-networking</a>.<br>(4) Networking overview | Docker Docs. <a href="https://docs.docker.com/network/">https://docs.docker.com/network/</a>.</p><h3 id="创建网络，让容器之间互相通信"><a href="#创建网络，让容器之间互相通信" class="headerlink" title="创建网络，让容器之间互相通信"></a>创建网络，让容器之间互相通信</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">docker network list<span class="hljs-comment"></span><br><span class="hljs-comment">//run过程中加入参数指定网络</span><br><span class="hljs-comment">--network=my-network</span><span class="hljs-comment"></span><br><span class="hljs-comment">//创建一个网络名字叫k6</span><br>docker network <span class="hljs-built_in">create</span> k6<span class="hljs-comment"></span><br><span class="hljs-comment">//让已有的容器加入</span><br>docker network connect k6 <span class="hljs-number">4</span>b7017ae794f<span class="hljs-comment"></span><br><span class="hljs-comment">//更多用法</span><br>Commands:<br>  connect     Connect <span class="hljs-keyword">a</span> container <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> network<br>  <span class="hljs-built_in">create</span>      Create <span class="hljs-keyword">a</span> network<br>  disconnect  Disconnect <span class="hljs-keyword">a</span> container <span class="hljs-built_in">from</span> <span class="hljs-keyword">a</span> network<br>  inspect     Display <span class="hljs-keyword">detailed</span> information <span class="hljs-keyword">on</span> <span class="hljs-title">one</span> <span class="hljs-title">or</span> <span class="hljs-title">more</span> <span class="hljs-title">networks</span><br>  ls          List networks<br>  prune       Remove all unused networks<br>  rm          Remove <span class="hljs-literal">one</span> <span class="hljs-keyword">or</span> more networks<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wsl2代理</title>
    <link href="/2023/10/01/wsl2%E4%BB%A3%E7%90%86/"/>
    <url>/2023/10/01/wsl2%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>注意写本机地址<br>export ALL_PROXY=<span class="hljs-string">&quot;http://192.168.2.238:7890&quot;</span><br><span class="hljs-regexp">//</span>测试<br>curl https:<span class="hljs-regexp">//</span>www:google.com<br><span class="hljs-regexp">//</span>取消代理<br>export ALL_PROXY=<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k6系列前置准备--influxDB</title>
    <link href="/2023/10/01/k6%E7%B3%BB%E5%88%97%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87-influxDB+grafana/"/>
    <url>/2023/10/01/k6%E7%B3%BB%E5%88%97%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87-influxDB+grafana/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>创建一个挂载数据用的目录<br>mkdir -p .<span class="hljs-regexp">/influxdb/i</span>nfluxdb-docker-data-volume<br><span class="hljs-regexp">//</span>拉个镜像，就<span class="hljs-number">1.8</span>版本<br>docker pull influxdb:<span class="hljs-number">1.8</span><br><span class="hljs-regexp">//</span>启动一下呗<br>docker run --name influxdb1.<span class="hljs-number">8</span> -d -p <span class="hljs-number">8086</span>:<span class="hljs-number">8086</span> -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/influxdb-docker-data-volume:/</span>var<span class="hljs-regexp">/lib/i</span>nfluxdb influxdb:<span class="hljs-number">1.8</span><br><span class="hljs-regexp">//</span>换个最新版的（比旧版麻烦，不用了）<br>docker pull influxdb<br>docker run --name influxdb -d -p <span class="hljs-number">8086</span>:<span class="hljs-number">8086</span> -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/influxdb-docker-data-volume:/</span>var<span class="hljs-regexp">/lib/i</span>nfluxdb influxdb:latest<br></code></pre></td></tr></table></figure><h3 id="看看成功了没"><a href="#看看成功了没" class="headerlink" title="看看成功了没"></a>看看成功了没</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">//进入容器</span><br> docker <span class="hljs-built_in">exec</span> -it <span class="hljs-number">1</span>d4796122659 bash<br> <span class="hljs-comment">//以下在容器中执行</span><br> influx<br> <span class="hljs-keyword">create</span> database mydb<br> <span class="hljs-keyword">use</span> mydb<br> <span class="hljs-keyword">show</span> databases<br><br> <span class="hljs-comment">//2.0版本</span><br> influx v1 <span class="hljs-built_in">shell</span><br><br></code></pre></td></tr></table></figure><h3 id="配置token（新版未实验）"><a href="#配置token（新版未实验）" class="headerlink" title="配置token（新版未实验）"></a>配置token（新版未实验）</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在web界面中找到token，或者重新创建一个<br><span class="hljs-number">7</span>frjrUK9sAY4JJVOF7k5MHmpy3wyx3B-X6D1V8WcPHDLFI2cAv_csnUeTbqpYNQjZOD4vZRDEZcXzzitFB-yqA==<br><br><br><span class="hljs-regexp">//</span>进入容器执行<br>docker exec -it influxdb bash<br>influx config create -n default \<br>  -u http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8086</span> \<br>  -o my-org \<br>  -t <span class="hljs-number">7</span>frjrUK9sAY4JJVOF7k5MHmpy3wyx3B-X6D1V8WcPHDLFI2cAv_csnUeTbqpYNQjZOD4vZRDEZcXzzitFB-yqA== \<br>  -a<br><br><span class="hljs-regexp">//</span>使用令牌<br>export INFLUX_TOKEN=v-G-UkMhBGwuecu8cE9nJfKvGt3oGh9M47-zyz1Po_3mXIsbMIkcbKo01uRTaxYIYZBYoxdcGanp1L3hE92ViA==<br><span class="hljs-regexp">//</span>注意这里的myBucket是进入web中创建的，my-org是进入web创建的组织名字(我是rain)<br><span class="hljs-regexp">//i</span>nflux org list --token <span class="hljs-variable">$INFLUX_TOKEN</span> 查找组织<br><span class="hljs-regexp">//i</span>nflux org create --name my-org --token <span class="hljs-variable">$INFLUX_TOKEN</span> 创建组织<br>influx write -t  <span class="hljs-variable">$INFLUX_TOKEN</span>  -b myBucket -o rain <span class="hljs-string">&quot;measurement field=1&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>1.8版本没有自带web界面，2.0才有</p><h3 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h3><p>这个简单不说了，照着docker hub上官方的命令跑就行了。<br>然后又发现grafana和influxdb没法通讯似乎，得加一下docker的网络。另起一篇文章写一下docker网络（以前用过，记得有四种模式）</p><h3 id="grafana连接influxdb"><a href="#grafana连接influxdb" class="headerlink" title="grafana连接influxdb"></a>grafana连接influxdb</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>我是旧版<span class="hljs-number">1.8</span>的，命令中没有带创建用户和密码的参数，并且自己手动进入数据库创建了mydb<br>docker run --name influxdb1.<span class="hljs-number">8</span> -d -p <span class="hljs-number">8086</span>:<span class="hljs-number">8086</span> -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/influxdb-docker-data-volume:/</span>var<span class="hljs-regexp">/lib/i</span>nfluxdb influxdb:<span class="hljs-number">1.8</span><br><span class="hljs-regexp">//i</span>nfluxdb和grafana两个都是dokcer 而且处在同一个网络中<br><br><span class="hljs-regexp">//</span>特别注意：grafana的influxdb url配置应为<br>http:<span class="hljs-regexp">//i</span>nfluxdb1.<span class="hljs-number">8</span>:<span class="hljs-number">8086</span><br><span class="hljs-regexp">//</span>不能写localhost！！！也不能写id地址！！！容器之间互相通信直接用容器名字！！！<br><br><span class="hljs-regexp">//</span>其他基本不需要填写，我没账号密码，只需要再填写一个mydb即可<br></code></pre></td></tr></table></figure><h3 id="grafana忘记密码"><a href="#grafana忘记密码" class="headerlink" title="grafana忘记密码"></a>grafana忘记密码</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>进入容器执行下面命令<br>grafana-cli admin reset-admin-password admin123<br><span class="hljs-regexp">//</span>然后重启容器，密码默认为admin123<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>k6</tag>
      
      <tag>influxDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文本标识符</title>
    <link href="/2023/09/21/%E6%96%87%E6%9C%AC%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    <url>/2023/09/21/%E6%96%87%E6%9C%AC%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下是一些文本标识符及其对应的二进制字符串：</p><ul><li><strong>STX</strong> (Start of Text)：<code>\x02</code></li><li><strong>ETX</strong> (End of Text)：<code>\x03</code></li><li><strong>EOT</strong> (End of Transmission)：<code>\x04</code></li><li><strong>ENQ</strong> (Enquiry)：<code>\x05</code></li><li><strong>ACK</strong> (Acknowledgement)：<code>\x06</code></li><li><strong>BEL</strong> (Bell)：<code>\x07</code></li><li><strong>BS</strong> (Backspace)：<code>\x08</code></li><li><strong>HT</strong> (Horizontal Tab)：<code>\x09</code></li><li><strong>LF</strong> (Line Feed)：<code>\x0A</code></li><li><strong>VT</strong> (Vertical Tab)：<code>\x0B</code></li><li><strong>FF</strong> (Form Feed)：<code>\x0C</code></li><li><strong>CR</strong> (Carriage Return)：<code>\x0D</code></li><li><strong>空字符</strong> <code>\x00</code></li></ul><p>在Go中，您可以使用<code>strconv.QuoteToASCII</code>函数将字符串编码为ASCII格式的字符串文字。该函数返回一个双引号括起来的Go字符串文字，其中使用转义序列（例如<code>\\t</code>，<code>\\n</code>，<code>\\xFF</code>，<code>\\u0100</code>）表示非ASCII字符和由IsPrint定义的不可打印字符。以下是一个简单的示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    s := <span class="hljs-string">&quot;\x02&quot;</span><br>    fmt.Println(strconv.QuoteToASCII(s))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;\x02&quot;</span><br></code></pre></td></tr></table></figure><p>如果您想要将<code>\x02</code>转换为<code>\u0002</code>，则可以使用以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    s := <span class="hljs-string">&quot;\x02&quot;</span><br>    r := []<span class="hljs-keyword">rune</span>(s)<br>    fmt.Printf(<span class="hljs-string">&quot;\\u%04X&quot;</span>, r[<span class="hljs-number">0</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\u0002</span><br></code></pre></td></tr></table></figure><p>: <a href="https://juejin.cn/post/6993528126554767367">juejin.cn</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ASCII</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wsl迁移</title>
    <link href="/2023/09/18/wsl%E8%BF%81%E7%A7%BB/"/>
    <url>/2023/09/18/wsl%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近发现这台公司的笔记本C盘占用多了好多G，想来会不会是我装了两个ubuntu的缘故。遂排查。<code>C:\Users\&lt;用户名&gt;\AppData\Local\Packages</code>中发现相关ubuntu两个文件夹，占用很大。<br>继续查看：设置–系统–存储–应用和功能。发现两个ubuntu占用累积16G。这些应用中心的应用默认都是在C盘的，失误了，安装的时候应该关注一下安装位置的。</p><p>没事，来个迁移吧。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">PS C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32&gt; wsl -l<br>适用于 Linux 的 Windows 子系统分发版:<br>Ubuntu-18.04 (默认)<br>Ubuntu-22.04<br><br>//导出<br>PS C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32&gt; wsl --export Ubuntu-22.04 d://ubuntu22-04.tar<br>//注销原有<br>PS C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32&gt; wsl --unregister Ubuntu-22.04<br>正在注销...<br>//根据导出的文件重新安装到d盘<br>PS C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32&gt; wsl --import Ubuntu-22.04 d:<span class="hljs-symbol">\w</span>sl<span class="hljs-symbol">\u</span>buntu22.04 D:<span class="hljs-symbol">\u</span>buntu22-04.tar<br><br><br></code></pre></td></tr></table></figure><p>重新登录发现登录账号默认为root了</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">PS C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32&gt; wsl --shutdown<br>PS C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32&gt; wsl -l<br>适用于 Linux 的 Windows 子系统分发版:<br>Ubuntu-18.04 (默认)<br>Ubuntu-22.04<br>PS C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32&gt; Ubuntu2204 config --default-user rain<br></code></pre></td></tr></table></figure><p>猜测规律是Ubuntu2204  Ubuntu1804这样子（对应我两个wsl子系统）</p>]]></content>
    
    
    
    <tags>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka压测</title>
    <link href="/2023/09/10/kafka%E5%8E%8B%E6%B5%8B/"/>
    <url>/2023/09/10/kafka%E5%8E%8B%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一个kafka实例"><a href="#一个kafka实例" class="headerlink" title="一个kafka实例"></a>一个kafka实例</h4><h5 id="创建一个主题，设置副本1，分区2"><a href="#创建一个主题，设置副本1，分区2" class="headerlink" title="创建一个主题，设置副本1，分区2"></a>创建一个主题，设置副本1，分区2</h5><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">kafka</span><span class="hljs-literal">-</span><span class="hljs-comment">topics</span> --<span class="hljs-comment">create</span> --<span class="hljs-comment">topic</span> <span class="hljs-comment">raintest1</span> --<span class="hljs-comment">bootstrap</span><span class="hljs-literal">-</span><span class="hljs-comment">server</span> <span class="hljs-comment">localhost:9092</span> --<span class="hljs-comment">replication</span><span class="hljs-literal">-</span><span class="hljs-comment">factor</span> <span class="hljs-comment">1</span> --<span class="hljs-comment">partitions</span> <span class="hljs-comment">2</span><br></code></pre></td></tr></table></figure><h5 id="生产者测试–一个kafka实例"><a href="#生产者测试–一个kafka实例" class="headerlink" title="生产者测试–一个kafka实例"></a>生产者测试–一个kafka实例</h5><p><code>kafka-producer-perf-test --help</code>有空再查看详细参数</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">//先来个<span class="hljs-number">50</span>个消息试试<br>kafka-producer-perf-test --topic raintest1 --num-records <span class="hljs-number">50</span> --record-size <span class="hljs-number">200</span> --throughput -<span class="hljs-number">1</span> --producer-props bootstrap.<span class="hljs-attr">servers=</span>localhost:<span class="hljs-number">9092</span> <span class="hljs-attr">acks=</span>-<span class="hljs-number">1</span><br>//返回如下吞吐量每秒<span class="hljs-number">0.04M</span>，平均时延<span class="hljs-number">25.66ms</span>，最大时延<span class="hljs-number">263ms</span>，<span class="hljs-number">50</span>%的消息延时在<span class="hljs-number">21ms</span>内，<span class="hljs-number">95</span>%消息延时在<span class="hljs-number">22ms</span>内<br><span class="hljs-number">50</span> records sent, <span class="hljs-number">185.185185</span> records/sec (<span class="hljs-number">0.04</span> MB/sec), <span class="hljs-number">25.66</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">avg</span> latency, <span class="hljs-number">263.00</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">max</span> latency, <span class="hljs-number">21</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">50th</span>, <span class="hljs-number">22</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">95th</span>, <span class="hljs-number">263</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99th</span>, <span class="hljs-number">263</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99</span>.<span class="hljs-number">9</span>th.<br><br><br>//好了，开始玩大点，用自己笔记本咯，统一<span class="hljs-number">50</span>万消息，每个消息<span class="hljs-number">200</span>字节<br>kafka-producer-perf-test --topic raintest1 --num-records <span class="hljs-number">50000</span> --record-size <span class="hljs-number">200</span> --throughput -<span class="hljs-number">1</span> --producer-props bootstrap.<span class="hljs-attr">servers=</span>localhost:<span class="hljs-number">9092</span> <span class="hljs-attr">acks=</span>-<span class="hljs-number">1</span><br><br>// out<br><span class="hljs-number">500000</span> records sent, <span class="hljs-number">241080.038573</span> records/sec (<span class="hljs-number">45.98</span> MB/sec), <span class="hljs-number">304.23</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">avg</span> latency, <span class="hljs-number">478.00</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">max</span> latency, <span class="hljs-number">321</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">50th</span>, <span class="hljs-number">459</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">95th</span>, <span class="hljs-number">471</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99th</span>, <span class="hljs-number">475</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99</span>.<span class="hljs-number">9</span>th<br></code></pre></td></tr></table></figure><h5 id="docker-compose修改，两个kafka实例"><a href="#docker-compose修改，两个kafka实例" class="headerlink" title="docker compose修改，两个kafka实例"></a>docker compose修改，两个kafka实例</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  zookeeper:</span><br><span class="hljs-symbol">    image:</span> confluentinc/cp-zookeeper:latest<br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      ZOOKEEPER_CLIENT_PORT:</span> <span class="hljs-number">2181</span><br><span class="hljs-symbol">      ZOOKEEPER_TICK_TIME:</span> <span class="hljs-number">2000</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">22181</span>:<span class="hljs-number">2181</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  kafka:</span><br><span class="hljs-symbol">    image:</span> confluentinc/cp-kafka:latest<br><span class="hljs-symbol">    depends_on:</span><br>      - zookeeper<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">29092</span>:<span class="hljs-number">29092</span><br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      KAFKA_BROKER_ID:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">      KAFKA_ZOOKEEPER_CONNECT:</span> zookeeper:<span class="hljs-number">2181</span><br><span class="hljs-symbol">      KAFKA_ADVERTISED_LISTENERS:</span> PLAINTEXT:<span class="hljs-comment">//kafka:9092,PLAINTEXT_HOST://localhost:29092</span><br><span class="hljs-symbol">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT<br><span class="hljs-symbol">      KAFKA_INTER_BROKER_LISTENER_NAME:</span> PLAINTEXT<br><span class="hljs-symbol">      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">  kafka2:</span><br><span class="hljs-symbol">    image:</span> confluentinc/cp-kafka:latest<br><span class="hljs-symbol">    depends_on:</span><br>      - zookeeper<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">29093</span>:<span class="hljs-number">29093</span><br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      KAFKA_BROKER_ID:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">      KAFKA_ZOOKEEPER_CONNECT:</span> zookeeper:<span class="hljs-number">2181</span><br><span class="hljs-symbol">      KAFKA_ADVERTISED_LISTENERS:</span> PLAINTEXT:<span class="hljs-comment">//kafka2:9093,PLAINTEXT_HOST://localhost:29093</span><br><span class="hljs-symbol">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT<br><span class="hljs-symbol">      KAFKA_INTER_BROKER_LISTENER_NAME:</span> PLAINTEXT<br><span class="hljs-symbol">      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="尝试验证一下两个实例之间的连接"><a href="#尝试验证一下两个实例之间的连接" class="headerlink" title="尝试验证一下两个实例之间的连接"></a>尝试验证一下两个实例之间的连接</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kafka</span>-topics --list --bootstrap-server kafka_kafka<span class="hljs-number">2</span>_<span class="hljs-number">1</span>:<span class="hljs-number">9093</span><br><span class="hljs-attribute">kafka</span>-topics --list --bootstrap-server kafka_kafka_<span class="hljs-number">1</span>:<span class="hljs-number">9092</span><br><span class="hljs-attribute">kafka</span>-topics --list --bootstrap-server kafka_kafka<span class="hljs-number">2</span>_<span class="hljs-number">1</span>:<span class="hljs-number">9093</span>,kafka_kafka_<span class="hljs-number">1</span>:<span class="hljs-number">9092</span><br></code></pre></td></tr></table></figure><h5 id="生产者测试–两个kafka实例"><a href="#生产者测试–两个kafka实例" class="headerlink" title="生产者测试–两个kafka实例"></a>生产者测试–两个kafka实例</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kafka-producer-perf-test --topic raintest1 --num-records <span class="hljs-number">500000</span> --record-size <span class="hljs-number">200</span> --throughput -<span class="hljs-number">1</span> --producer-props bootstrap.<span class="hljs-attr">servers=</span>kafka_kafka2_1:<span class="hljs-number">9093</span>,kafka_kafka_1:<span class="hljs-number">9092</span> <span class="hljs-attr">acks=</span>-<span class="hljs-number">1</span><br><br>//out<br><span class="hljs-number">500000</span> records sent, <span class="hljs-number">114077.116131</span> records/sec (<span class="hljs-number">21.76</span> MB/sec), <span class="hljs-number">1122.87</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">avg</span> latency, <span class="hljs-number">2508.00</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">max</span> latency, <span class="hljs-number">630</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">50th</span>, <span class="hljs-number">2481</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">95th</span>, <span class="hljs-number">2500</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99th</span>, <span class="hljs-number">2506</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99</span>.<span class="hljs-number">9</span>th.<br><br>//continue<br>[appuser@<span class="hljs-number">15</span>e3a4abd18b ~]$ kafka-producer-perf-test --topic raintest1 --num-records <span class="hljs-number">5000</span> --record-size <span class="hljs-number">200</span> --throughput -<span class="hljs-number">1</span> --producer-props bootstrap.<span class="hljs-attr">servers=</span>kafka_kafka2_1:<span class="hljs-number">9093</span>,kafka_kafka_1:<span class="hljs-number">9092</span> <span class="hljs-attr">acks=</span>-<span class="hljs-number">1</span><br><span class="hljs-number">5000</span> records sent, <span class="hljs-number">16393.442623</span> records/sec (<span class="hljs-number">3.13</span> MB/sec), <span class="hljs-number">8.71</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">avg</span> latency, <span class="hljs-number">229.00</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">max</span> latency, <span class="hljs-number">6</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">50th</span>, <span class="hljs-number">19</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">95th</span>, <span class="hljs-number">21</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99th</span>, <span class="hljs-number">21</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99</span>.<span class="hljs-number">9</span>th.<br></code></pre></td></tr></table></figure><p>50万的数据，两个kafka实例，明显压测数据比一个实例难看，根本原因可能受制于我这台笔记本的网络带宽、磁盘写入速度。于是采用5000数据来测试。一个实例的数据如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[appuser@<span class="hljs-number">774</span>a362daac6 ~]$ kafka-producer-perf-test --topic raintest1 --num-records <span class="hljs-number">5000</span> --record-size <span class="hljs-number">200</span> --throughput -<span class="hljs-number">1</span> --producer-props bootstrap.<span class="hljs-attr">servers=</span>localhost:<span class="hljs-number">9092</span> <span class="hljs-attr">acks=</span>-<span class="hljs-number">1</span><br><span class="hljs-number">5000</span> records sent, <span class="hljs-number">15923.566879</span> records/sec (<span class="hljs-number">3.04</span> MB/sec), <span class="hljs-number">13.58</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">avg</span> latency, <span class="hljs-number">231.00</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">max</span> latency, <span class="hljs-number">12</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">50th</span>, <span class="hljs-number">25</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">95th</span>, <span class="hljs-number">27</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99th</span>, <span class="hljs-number">27</span> <span class="hljs-keyword">ms</span> <span class="hljs-title">99</span>.<span class="hljs-number">9</span>th.<br></code></pre></td></tr></table></figure><p>经过多次验证比对，5000数据下两个kafka实例确实会提升producer性能。</p><h5 id="消费者测试–1个kafka实例"><a href="#消费者测试–1个kafka实例" class="headerlink" title="消费者测试–1个kafka实例"></a>消费者测试–1个kafka实例</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[appuser@<span class="hljs-number">774</span>a362daac6 ~]$ kafka-consumer-perf-test <span class="hljs-comment">--broker-list kafka_kafka_1:9092 --messages 5000 --topic raintest1 --num-fetch-threads 1</span><br><span class="hljs-built_in">WARNING</span>: <span class="hljs-keyword">option</span> [threads] <span class="hljs-keyword">and</span> [num-<span class="hljs-keyword">fetch</span>-threads] have been deprecated <span class="hljs-keyword">and</span> will be ignored <span class="hljs-keyword">by</span> the test<br><span class="hljs-keyword">start</span>.time, <span class="hljs-keyword">end</span>.time, data.consumed.<span class="hljs-keyword">in</span>.MB, MB.sec, data.consumed.<span class="hljs-keyword">in</span>.nMsg, nMsg.sec, rebalance.time.ms, <span class="hljs-keyword">fetch</span>.time.ms, <span class="hljs-keyword">fetch</span>.MB.sec, <span class="hljs-keyword">fetch</span>.nMsg.sec<br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span> <span class="hljs-number">09</span>:<span class="hljs-number">46</span>:<span class="hljs-number">30</span>:<span class="hljs-number">869</span>, <span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span> <span class="hljs-number">09</span>:<span class="hljs-number">46</span>:<span class="hljs-number">34</span>:<span class="hljs-number">230</span>, <span class="hljs-number">0.9537</span>, <span class="hljs-number">0.2837</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">1487.6525</span>, <span class="hljs-number">3302</span>, <span class="hljs-number">59</span>, <span class="hljs-number">16.1640</span>, <span class="hljs-number">84745.7627</span><br></code></pre></td></tr></table></figure><p>这些数据是关于Kafka消费者压力测试的结果。以下是每个字段的含义：</p><ul><li><code>start.time</code>: 测试开始时间。</li><li><code>end.time</code>: 测试结束时间。</li><li><code>data.consumed.in.MB</code>: 消费者在测试期间消费的数据量（以 MB 为单位）。</li><li><code>MB.sec</code>: 消费者在测试期间的平均吞吐量（以 MB/秒为单位）。</li><li><code>data.consumed.in.nMsg</code>: 消费者在测试期间消费的消息数量。</li><li><code>nMsg.sec</code>: 消费者在测试期间的平均吞吐量（以消息/秒为单位）。</li><li><code>rebalance.time.ms</code>: 消费者重新平衡所需的时间（以毫秒为单位）。</li><li><code>fetch.time.ms</code>: 消费者从代理获取数据所需的时间（以毫秒为单位）。</li><li><code>fetch.MB.sec</code>: 消费者从代理获取数据的平均速率（以 MB/秒为单位）。</li><li><code>fetch.nMsg.sec</code>: 消费者从代理获取数据的平均速率（以消息/秒为单位）。<h5 id="消费者测试–2个kafka实例"><a href="#消费者测试–2个kafka实例" class="headerlink" title="消费者测试–2个kafka实例"></a>消费者测试–2个kafka实例</h5></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//<span class="hljs-number">5000</span>数据，两个实例对比，数据略有提升<br>[appuser@<span class="hljs-number">774</span>a362daac6 ~]$ kafka-consumer-perf-test <span class="hljs-comment">--broker-list kafka_kafka2_1:9093,kafka_kafka_1:9092 --messages 5000 --topic raintest1 --num-fetch-threads 1</span><br><span class="hljs-built_in">WARNING</span>: <span class="hljs-keyword">option</span> [threads] <span class="hljs-keyword">and</span> [num-<span class="hljs-keyword">fetch</span>-threads] have been deprecated <span class="hljs-keyword">and</span> will be ignored <span class="hljs-keyword">by</span> the test<br><span class="hljs-keyword">start</span>.time, <span class="hljs-keyword">end</span>.time, data.consumed.<span class="hljs-keyword">in</span>.MB, MB.sec, data.consumed.<span class="hljs-keyword">in</span>.nMsg, nMsg.sec, rebalance.time.ms, <span class="hljs-keyword">fetch</span>.time.ms, <span class="hljs-keyword">fetch</span>.MB.sec, <span class="hljs-keyword">fetch</span>.nMsg.sec<br><span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span> <span class="hljs-number">09</span>:<span class="hljs-number">50</span>:<span class="hljs-number">03</span>:<span class="hljs-number">238</span>, <span class="hljs-number">2023</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span> <span class="hljs-number">09</span>:<span class="hljs-number">50</span>:<span class="hljs-number">06</span>:<span class="hljs-number">582</span>, <span class="hljs-number">0.9537</span>, <span class="hljs-number">0.2852</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">1495.2153</span>, <span class="hljs-number">3288</span>, <span class="hljs-number">56</span>, <span class="hljs-number">17.0299</span>, <span class="hljs-number">89285.7143</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷歌浏览器控制台小技巧</title>
    <link href="/2023/09/09/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/09/09/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>过滤控制台或者网络请求<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>假设有两个请求 <span class="hljs-regexp">/test   /</span>hello以及其他很多<br><span class="hljs-regexp">//</span>常规写法过滤test<br>test<br><span class="hljs-regexp">//</span>正则写法，两个/之间可以写入正则表达式<br><span class="hljs-regexp">/test|hello/</span><br><span class="hljs-regexp">//</span>非正则<br>-<span class="hljs-regexp">/test|hello/</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>简单玩一下kafka</title>
    <link href="/2023/09/03/%E7%AE%80%E5%8D%95%E7%8E%A9%E4%B8%80%E4%B8%8Bkafka/"/>
    <url>/2023/09/03/%E7%AE%80%E5%8D%95%E7%8E%A9%E4%B8%80%E4%B8%8Bkafka/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>这玩意（中间件）虽然常用，但还真没实际玩一玩，今天搞搞，看看基本玩法</p><h4 id="简单理解一些概念"><a href="#简单理解一些概念" class="headerlink" title="简单理解一些概念"></a>简单理解一些概念</h4><ul><li>brocker 一台kafka机器就是一个broker。一个集群包含多个broker。一个brocker包含多个topic</li><li>一个topic有多个分区partition。一个topic有消费者和生产者。</li><li>Consumer消费者。多个消费者组成消费者组Consumer Group</li><li>offset消费位移</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>认准下面这两，才是官方镜像。confluentinc就认准这个就对了~~其他镜像不知道谁打包的<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">docker</span> pull confluentinc/<span class="hljs-meta">cp</span>-zookeeper<br><span class="hljs-symbol">docker</span> pull confluentinc/<span class="hljs-meta">cp</span>-kafka<br></code></pre></td></tr></table></figure></li><li>启动镜像咯<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>注意这样子启动，两个容器无法通信，需要先创建一个新的网络，然后run容器 --net=&lt;network_name&gt;才可以确保两个容器通信。为了简单后面直接docker-compose执行<br> docker run -d --name kafka -p <span class="hljs-number">9092</span>:<span class="hljs-number">9092</span> -e KAFKA_BROKER_ID=<span class="hljs-number">0</span> -e KAFKA_ZOOKEEPER_CONNECT=<span class="hljs-regexp">/172.20.224.159:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT:/</span><span class="hljs-regexp">/172.20.224.159:9092 -e KAFKA_LISTENERS=PLAINTEXT:/</span><span class="hljs-regexp">/0.0.0.0:9092 confluentinc/</span>cp-kafka<br><br><br> docker run -d --name zookeeper -e TZ=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> -p <span class="hljs-number">2181</span>:<span class="hljs-number">2181</span> -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/data:/</span>data -e ZOOKEEPER_CLIENT_PORT=<span class="hljs-number">2181</span> confluentinc/cp-zookeeper<br><br></code></pre></td></tr></table></figure></li><li>zookeeper启动解释</li></ul><ol><li>-d：以分离模式运行容器，这意味着容器将在后台运行。</li><li>–name zookeeper：为容器指定一个名称，以便以后可以更容易地引用它。</li><li>-p 2181:2181：将容器的 2181 端口映射到宿主机的 2181 端口</li><li>-e ZOOKEEPER_CLIENT_PORT=2181：设置环境变量 ZOOKEEPER_CLIENT_PORT 的值为 2181。这将告诉 Zookeeper 在 2181 端口上监听客户端连接。</li><li>-e TZ=”Asia/Shanghai”设置时区</li><li>-v $PWD/data:/data 将本地目录(文件)挂载到容器指定目录</li></ol><ul><li>kafka启动解释</li></ul><ol><li>-e KAFKA_BROKER_ID=0：设置环境变量 KAFKA_BROKER_ID 的值为 0。这将指定 Kafka broker 的 ID</li><li>-e KAFKA_ZOOKEEPER_CONNECT=192.168.1.1:2181：设置环境变量 KAFKA_ZOOKEEPER_CONNECT 的值为 192.168.1.1:2181。这将指定 Kafka broker 连接的 Zookeeper 地址和端口</li><li>-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.1.1:9092：设置环境变量 KAFKA_ADVERTISED_LISTENERS 的值为 PLAINTEXT://192.168.1.1:9092。这将指定 Kafka broker 对外宣布的监听地址和端口</li></ol><h4 id="直接docker-compose吧，省事"><a href="#直接docker-compose吧，省事" class="headerlink" title="直接docker compose吧，省事"></a>直接docker compose吧，省事</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  zookeeper:</span><br><span class="hljs-symbol">    image:</span> confluentinc/cp-zookeeper:latest<br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      ZOOKEEPER_CLIENT_PORT:</span> <span class="hljs-number">2181</span><br><span class="hljs-symbol">      ZOOKEEPER_TICK_TIME:</span> <span class="hljs-number">2000</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">22181</span>:<span class="hljs-number">2181</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  kafka:</span><br><span class="hljs-symbol">    image:</span> confluentinc/cp-kafka:latest<br><span class="hljs-symbol">    depends_on:</span><br>      - zookeeper<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">29092</span>:<span class="hljs-number">29092</span><br><span class="hljs-symbol">    environment:</span><br><span class="hljs-symbol">      KAFKA_BROKER_ID:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">      KAFKA_ZOOKEEPER_CONNECT:</span> zookeeper:<span class="hljs-number">2181</span><br><span class="hljs-symbol">      KAFKA_ADVERTISED_LISTENERS:</span> PLAINTEXT:<span class="hljs-comment">//kafka:9092,PLAINTEXT_HOST://localhost:29092</span><br><span class="hljs-symbol">      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT<br><span class="hljs-symbol">      KAFKA_INTER_BROKER_LISTENER_NAME:</span> PLAINTEXT<br><span class="hljs-symbol">      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> docker<span class="hljs-literal">-compose</span>.yml <span class="hljs-literal">-d</span> up<br></code></pre></td></tr></table></figure><h4 id="先简单使用，再看怎么玩其他的"><a href="#先简单使用，再看怎么玩其他的" class="headerlink" title="先简单使用，再看怎么玩其他的"></a>先简单使用，再看怎么玩其他的</h4><ul><li>咱先进入kafka容器看看<code>docker exec -it xxxxx bash</code></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>先看看帮助，太长就不列出来了<br>kafka-topics <span class="hljs-params">--help</span><br>kafka-console-consumer <span class="hljs-params">--help</span><br>kafka-console-producer <span class="hljs-params">--help</span><br><span class="hljs-string">//</span>注意，根据<span class="hljs-keyword">help</span>，新版kafka已经不用<span class="hljs-params">--zookeeper</span>这个命令参数了，改用<span class="hljs-params">--bootstrap-server</span><br></code></pre></td></tr></table></figure><ul><li>看看怎么列出所有主题，然后做个简单创建和消费<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>创建一个主题<br> kafka-topics <span class="hljs-params">--create</span> <span class="hljs-params">--topic</span> raintest <span class="hljs-params">--bootstrap-server</span> localhost<span class="hljs-function">:9092</span><br> <span class="hljs-string">//</span>查看主题<br>kafka-topics <span class="hljs-params">--list</span> <span class="hljs-params">--bootstrap-server</span> localhost<span class="hljs-function">:9092</span><br><span class="hljs-string">//</span>生产<br> kafka-console-producer <span class="hljs-params">--broker-list</span> localhost<span class="hljs-function">:9092</span> <span class="hljs-params">--topic</span> raintest<br> <span class="hljs-string">//</span>消费<br>kafka-console-consumer <span class="hljs-params">--bootstrap-server</span> localhost<span class="hljs-function">:9092</span> <span class="hljs-params">--topic</span> raintest <span class="hljs-params">--from-beginning</span><br><span class="hljs-string">//--from-beginning</span>是一个命令行选项，用于指定消费者从主题的开始处开始消费消息<br><span class="hljs-string">//</span>查看组<br>kafka-consumer-groups <span class="hljs-params">--bootstrap-server</span> localhost<span class="hljs-function">:9092</span> <span class="hljs-params">--list</span><br><span class="hljs-string">//</span>查看消费情况<br>kafka-consumer-groups <span class="hljs-params">--bootstrap-server</span> localhost<span class="hljs-function">:9092</span> <span class="hljs-params">--group</span> group111 <span class="hljs-params">--describe</span><br><br><span class="hljs-string">//</span>还有好多待补充，这里暂不细究了<br></code></pre></td></tr></table></figure></li></ul><h4 id="其他发现"><a href="#其他发现" class="headerlink" title="其他发现"></a>其他发现</h4><p>这个docker-compose.yaml用的最新版的kafka，设定了<code>KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181</code>，但是实际上最新版Kafka开始使用自我管理的Quorum代替ZooKeeper来管理元数据。这也意味着新版kafka不需要zookeeper作为必须了。因此查看容器日志发现会有链接失败的信息。但是我尝试创建主题和生产、消费主题并没有问题。而且命令中不需要<code>--zookeeper</code>了。<br><a href="https://cloud.tencent.com/developer/news/841740">https://cloud.tencent.com/developer/news/841740</a><br><a href="https://www.confluent.io/blog/kafka-without-zookeeper-a-sneak-peek/">https://www.confluent.io/blog/kafka-without-zookeeper-a-sneak-peek/</a></p><h4 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h4><p>回去<a href="https://hub.docker.com/r/confluentinc/cp-kafka">https://hub.docker.com/r/confluentinc/cp-kafka</a> 看看更详细的介绍<br><a href="https://docs.confluent.io/platform/current/installation/docker/config-reference.html#confluent-ak-configuration">https://docs.confluent.io/platform/current/installation/docker/config-reference.html#confluent-ak-configuration</a><br>根据手册，提供了两种<code>mode</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/kpaft mode<br>docker <span class="hljs-builtin-name">run</span> -d \<br><span class="hljs-attribute">--name</span>=kafka-kraft \<br>-h kafka-kraft \<br>-p 9101:9101 \<br>-e <span class="hljs-attribute">KAFKA_NODE_ID</span>=1 \<br>-e <span class="hljs-attribute">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</span>=<span class="hljs-string">&#x27;CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&#x27;</span> \<br>-e <span class="hljs-attribute">KAFKA_ADVERTISED_LISTENERS</span>=<span class="hljs-string">&#x27;PLAINTEXT://kafka-kraft:29092,PLAINTEXT_HOST://localhost:9092&#x27;</span> \<br>-e <span class="hljs-attribute">KAFKA_JMX_PORT</span>=9101 \<br>-e <span class="hljs-attribute">KAFKA_JMX_HOSTNAME</span>=localhost \<br>-e <span class="hljs-attribute">KAFKA_PROCESS_ROLES</span>=<span class="hljs-string">&#x27;broker,controller&#x27;</span> \<br>-e <span class="hljs-attribute">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span>=1 \<br>-e <span class="hljs-attribute">KAFKA_CONTROLLER_QUORUM_VOTERS</span>=<span class="hljs-string">&#x27;1@kafka-kraft:29093&#x27;</span> \<br>-e <span class="hljs-attribute">KAFKA_LISTENERS</span>=<span class="hljs-string">&#x27;PLAINTEXT://kafka-kraft:29092,CONTROLLER://kafka-kraft:29093,PLAINTEXT_HOST://0.0.0.0:9092&#x27;</span> \<br>-e <span class="hljs-attribute">KAFKA_INTER_BROKER_LISTENER_NAME</span>=<span class="hljs-string">&#x27;PLAINTEXT&#x27;</span> \<br>-e <span class="hljs-attribute">KAFKA_CONTROLLER_LISTENER_NAMES</span>=<span class="hljs-string">&#x27;CONTROLLER&#x27;</span> \<br>-e <span class="hljs-attribute">CLUSTER_ID</span>=<span class="hljs-string">&#x27;MkU3OEVBNTcwNTJENDM2Qk&#x27;</span> \<br>confluentinc/cp-kafka:7.5.0<br><br><br>/zookeeper mode<br>docker <span class="hljs-builtin-name">run</span> -d \<br>    <span class="hljs-attribute">--net</span>=host \<br>    <span class="hljs-attribute">--name</span>=kafka \<br>    -e <span class="hljs-attribute">KAFKA_ZOOKEEPER_CONNECT</span>=localhost:32181 \<br>    -e <span class="hljs-attribute">KAFKA_ADVERTISED_LISTENERS</span>=PLAINTEXT://localhost:29092 \<br>    -e <span class="hljs-attribute">KAFKA_BROKER_ID</span>=2 \<br>    -e <span class="hljs-attribute">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span>=1 \<br>    confluentinc/cp-kafka:7.5.0<br></code></pre></td></tr></table></figure><p>本文不再细说。<br>kraft mode详细参考<a href="https://docs.confluent.io/platform/current/kafka-metadata/kraft.html#kraft-overview">https://docs.confluent.io/platform/current/kafka-metadata/kraft.html#kraft-overview</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wsl2升级</title>
    <link href="/2023/09/03/wsl2%E5%8D%87%E7%BA%A7/"/>
    <url>/2023/09/03/wsl2%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="wsl一些命令"><a href="#wsl一些命令" class="headerlink" title="wsl一些命令"></a>wsl一些命令</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//查看版本</span><br>wsl -l -v<br><span class="hljs-comment">// 设置默认版本</span><br> wsl --set-<span class="hljs-keyword">default</span>-version <span class="hljs-number">1</span><br> <span class="hljs-comment">//升级版本</span><br> wsl --set-version Ubuntu<span class="hljs-number">-22.04</span> <span class="hljs-number">2</span><br> <span class="hljs-comment">//关闭</span><br> wsl --shutdown<br></code></pre></td></tr></table></figure><h5 id="wsl更新包"><a href="#wsl更新包" class="headerlink" title="wsl更新包"></a>wsl更新包</h5><p><a href="https://www.catalog.update.microsoft.com/Search.aspx?q=wsl">https://www.catalog.update.microsoft.com/Search.aspx?q=wsl</a></p><h5 id="wsl2为啥更新？wsl1不支持docker"><a href="#wsl2为啥更新？wsl1不支持docker" class="headerlink" title="wsl2为啥更新？wsl1不支持docker"></a>wsl2为啥更新？wsl1不支持docker</h5><ul><li>启用虚拟化,启用hyper-V<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>家庭版启用Hypver-V，以下保存为命令执行<br>pushd <span class="hljs-string">&quot;%~dp0&quot;</span><br>dir <span class="hljs-string">/b</span> %SystemRoot%\servicing\Packages\*Hyper-V*<span class="hljs-string">.mum</span> &gt;hyper-v.txt<br>for <span class="hljs-string">/f</span> %%i in <span class="hljs-params">(&#x27;findstr /i . hyper-v.txt 2^&gt;nul&#x27;)</span> do dism <span class="hljs-string">/online</span> <span class="hljs-string">/norestart</span> <span class="hljs-string">/add-package</span>:<span class="hljs-string">&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span><br>del hyper-v.txt<br>Dism <span class="hljs-string">/online</span> <span class="hljs-string">/enable-feature</span> <span class="hljs-string">/featurename</span><span class="hljs-function">:Microsoft-Hyper-V-All</span> <span class="hljs-string">/LimitAccess</span> <span class="hljs-string">/ALL</span><br></code></pre></td></tr></table></figure></li><li>不可以使用vmware，vm和wsl2不兼容<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//启用过vmware的话，升级wsl2总是会提示启用虚拟化，但是实际已经启用了</span><br><span class="hljs-comment">//powershell执行以下命令可以解决</span><br>bcdedit /set hypervisorlaunchtype <span class="hljs-keyword">auto</span><br></code></pre></td></tr></table></figure></li><li>ununtu 22.04启动docker失败<br>原因是因为新版的ubuntu系统使用了iptables-nft<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>先输入下面指令<br>sudo update-alternatives --config iptables<br><span class="hljs-regexp">//</span>接着输入<span class="hljs-number">1</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="开始安装docker"><a href="#开始安装docker" class="headerlink" title="开始安装docker"></a>开始安装docker</h5><p><a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>参上官网执行，完成安装，步骤此处不写<br><span class="hljs-regexp">//</span>查看状态，启动服务<br>service docker status<br>sudo service docker start<br><span class="hljs-regexp">//</span> 查看状态返回Docker is running<br><span class="hljs-regexp">//</span>测试<br>sudo docker run hello-world<br></code></pre></td></tr></table></figure><h5 id="（重要！）如何在windows上访问wsl2的文件？"><a href="#（重要！）如何在windows上访问wsl2的文件？" class="headerlink" title="（重要！）如何在windows上访问wsl2的文件？"></a>（重要！）如何在windows上访问wsl2的文件？</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">\\wsl<span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter变量传递</title>
    <link href="/2023/09/01/Jmeter%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92/"/>
    <url>/2023/09/01/Jmeter%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h6 id="单线程上下文传递："><a href="#单线程上下文传递：" class="headerlink" title="单线程上下文传递："></a>单线程上下文传递：</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在脚本中<br>vars.put(<span class="hljs-string">&quot;value&quot;</span>, value)<br>vars.get(<span class="hljs-string">&quot;value&quot;</span>)<br><span class="hljs-regexp">//</span>在非脚本中使用<br><span class="hljs-variable">$&#123;value&#125;</span><br><span class="hljs-regexp">//</span>其他<br>vars.putObject(<span class="hljs-string">&quot;key&quot;</span>, new Object())<br></code></pre></td></tr></table></figure><h6 id="多线程上下文传递（上一篇中参考地址中涉及到了）："><a href="#多线程上下文传递（上一篇中参考地址中涉及到了）：" class="headerlink" title="多线程上下文传递（上一篇中参考地址中涉及到了）："></a>多线程上下文传递（上一篇中参考地址中涉及到了）：</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在脚本中<br>props.put(<span class="hljs-string">&quot;value&quot;</span>, value)<br>props.get(<span class="hljs-string">&quot;value&quot;</span>)<br><span class="hljs-regexp">//</span>在非脚本中使用<br><span class="hljs-variable">$&#123;value&#125;</span><br><span class="hljs-regexp">//</span>其他<br>vars.putObject(<span class="hljs-string">&quot;key&quot;</span>, new Object())<br><span class="hljs-regexp">//</span>vars 和props都是变量，均有如下方法<br></code></pre></td></tr></table></figure><p><a href="https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html">https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html</a></p><h6 id="json提取器返回数组"><a href="#json提取器返回数组" class="headerlink" title="json提取器返回数组"></a>json提取器返回数组</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">names of variables: <span class="hljs-attribute">content</span><br>Match No: -<span class="hljs-number">1</span><br>JSON Path: $<span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.content</span><span class="hljs-selector-attr">[*]</span><span class="hljs-selector-class">.id</span><br><span class="hljs-comment">//添加调试取样器</span><br>content_1=<span class="hljs-number">2926567</span><br>content_2=<span class="hljs-number">2926572</span><br>content_ALL=<span class="hljs-number">2926567</span>,<span class="hljs-number">2926572</span><br>content_matchNr=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h6 id="json提取器返回数组引用"><a href="#json提取器返回数组引用" class="headerlink" title="json提取器返回数组引用"></a>json提取器返回数组引用</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>添加计数器<br>Maxinum value: <span class="hljs-variable">$&#123;content_matchNr&#125;</span><br><span class="hljs-regexp">//</span>引用<br><span class="hljs-variable">$&#123;__V(content_$&#123;num&#125;</span>,)&#125;<br></code></pre></td></tr></table></figure><h6 id="JSR223中获取请求返回"><a href="#JSR223中获取请求返回" class="headerlink" title="JSR223中获取请求返回"></a>JSR223中获取请求返回</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import groovy.json.JsonOutput;<br>import org.apache.commons.lang3.StringEscapeUtils;<br><span class="hljs-comment">// 字符串的形式读取返回数据</span><br>def data = prev.get<span class="hljs-constructor">ResponseDataAsString()</span>;<br><span class="hljs-comment">// 格式化json数据</span><br>def json = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JsonOutput</span>.</span></span>pretty<span class="hljs-constructor">Print(<span class="hljs-params">data</span>)</span>;<br><span class="hljs-comment">// 对数据进行Unicode转中文的解码</span><br>def ret = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringEscapeUtils</span>.</span></span>unescape<span class="hljs-constructor">Java(<span class="hljs-params">json</span>)</span>;<br><span class="hljs-comment">// 把我们转换后的数据设置为返回结果，编码设置为UTF-8</span><br>prev.set<span class="hljs-constructor">ResponseData(<span class="hljs-params">ret</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><h5 id="prev变量"><a href="#prev变量" class="headerlink" title="prev变量"></a>prev变量</h5><p><a href="https://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html">https://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html</a></p><h5 id="beanshell拿线程数"><a href="#beanshell拿线程数" class="headerlink" title="beanshell拿线程数"></a>beanshell拿线程数</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">String</span> threadinfo = <span class="hljs-string">&quot;$&#123;__BeanShell(ctx.getThread().getThreadName())&#125;&quot;</span>;<br><span class="hljs-keyword">String</span>[] ll = threadinfo.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;-&quot;</span>);<br>vars.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;threadNo&quot;</span>, ll[<span class="hljs-number">1</span>]);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有一天我会哭</title>
    <link href="/2023/08/13/%E6%9C%89%E4%B8%80%E5%A4%A9%E6%88%91%E4%BC%9A%E5%93%AD/"/>
    <url>/2023/08/13/%E6%9C%89%E4%B8%80%E5%A4%A9%E6%88%91%E4%BC%9A%E5%93%AD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p align="center"><b style="font-size:25px">有一天我会哭</b></p><p align="right">陈随想</p><p align="center">有一天我会哭</p><p align="center">眼角沾满了珍珠</p><p align="center">透明了往故</p><p align="center">撩起烟雨</p><p align="center">半遮半捂</p><br><p align="center">有一天我在哭</p><p align="center">泪眼看桐梧</p><p align="center">细数过往鸟语</p><p align="center">捧簇淡菊</p><p align="center">年少不复</p><br><p align="center">有一天我会禁不住哭</p><p align="center">那些古老的阳光浴</p><p align="center">那轻狂的笑脸颠覆</p><p align="center">我扬起柳枝挥去</p><p align="center">残留黄昏的霞楚</p><br><p align="left"><b style="font-size:18px">2023-08-13 跋</b></p>小时候有段时间爱写诗。小时候有段时间爱哭。小时候有段时间爱发呆。所以有了此诗。大约记得此诗作于2011年。那是我还是个高中生。某天下午有一节体育课，在课上自由活动的时间里，我坐在某处的楼梯望着天空发呆，思绪万千，有点忍不住眼里硬是多了了几滴泪光。遂作此诗。]]></content>
    
    
    
    <tags>
      
      <tag>诗歌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo（坑一）</title>
    <link href="/2023/08/12/hexo%EF%BC%88%E5%9D%91%E4%B8%80%EF%BC%89/"/>
    <url>/2023/08/12/hexo%EF%BC%88%E5%9D%91%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>转载来自<a href="https://rs11.xyz/articles/2.html">https://rs11.xyz/articles/2.html</a><br>“hexo d” 部署的时候遇到权限问题，报错无法读取远程仓库</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>sudo rm -rf .deploy_git<br><span class="hljs-bullet">- </span>hexo clean<br><span class="hljs-bullet">- </span>hexo g<br><span class="hljs-bullet">- </span>hexo d<br></code></pre></td></tr></table></figure><p>访问4040，没有配置CNAME<br>方式一：github  setting  Pages Custom domain<br>方式二： 在source下新建CNAME写入域名，重新hexo g,hexo d，会生成文件在public下</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web性能</title>
    <link href="/2023/08/12/web%E6%80%A7%E8%83%BD/"/>
    <url>/2023/08/12/web%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="什么是内存泄露"><a href="#什么是内存泄露" class="headerlink" title="什么是内存泄露"></a>什么是内存泄露</h4><p>不再用到的对象内存，没有及时被回收时,就会产生内存泄露</p><h4 id="常见的内存泄漏"><a href="#常见的内存泄漏" class="headerlink" title="常见的内存泄漏"></a>常见的内存泄漏</h4><ul><li>不正常闭包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1000</span>).fill(<span class="hljs-string">&#x27;isboyjc&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(test)<br>    <span class="hljs-keyword">return</span> test<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> fn2Child = fn2()<br>fn2Child()<br><span class="hljs-comment">//return 的函数中存在函数 fn2 中的 test 变量引用，所以 test 并不会被回收，也就造成了内存泄漏,避免这个问题，后续添加fn2Child = null即可解决</span><br>fn2Child = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></li><li>隐式全局变量<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">// 没有声明从而制造了隐式全局变量test1</span><br>  test1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Array</span>(<span class="hljs-number">1000</span>).fill(<span class="hljs-string">&#x27;isboyjc1&#x27;</span>)<br>  <br>  <span class="hljs-comment">// 函数内部this指向window，制造了隐式全局变量test2</span><br>  this.test2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">Array</span>(<span class="hljs-number">1000</span>).fill(<span class="hljs-string">&#x27;isboyjc2&#x27;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>)</span><br></code></pre></td></tr></table></figure></li><li>游离DOM引用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;li3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">let</span> root = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#root&#x27;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">let</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#ul&#x27;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">let</span> li3 = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#li3&#x27;</span>)</span><br><span class="javascript">  </span><br><span class="javascript">  <span class="hljs-comment">// 由于ul变量存在，整个ul及其子元素都不能GC</span></span><br><span class="javascript">  root.removeChild(ul)</span><br><span class="javascript">  </span><br><span class="javascript">  <span class="hljs-comment">// 虽置空了ul变量，但由于li3变量引用ul的子节点，所以ul元素依然不能被GC</span></span><br><span class="javascript">  ul = <span class="hljs-literal">null</span></span><br><span class="javascript">  </span><br><span class="javascript">  <span class="hljs-comment">// 已无变量引用，此时可以GC</span></span><br><span class="javascript">  li3 = <span class="hljs-literal">null</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>遗忘的定时器、监听器、监听者模式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取数据</span><br><span class="hljs-keyword">let</span> someResource = getData()<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> node = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;Node&#x27;</span>)<br><span class="hljs-keyword">if</span>(node) &#123;<br>    node.innerHTML = <span class="hljs-built_in">JSON</span>.stringify(someResource))<br>&#125;<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-comment">//setInterval 没有结束前，回调函数里的变量以及回调函数本身都无法被回收。</span><br><span class="hljs-comment">//什么才叫结束呢？也就是调用了 clearInterval。如果没有被 clear 掉的话，就会造成内存泄漏。不仅如此，如果回调函数没有被回收，那么回调函数内依赖的变量也没法被回收。所以在上例中，someResource 就没法被回收。</span><br></code></pre></td></tr></table></figure></li><li>遗忘的Map、Set对象<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> obj是一个强引用，对象存于内存，可用<br>let obj = &#123;id: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-regexp">//</span> 重写obj引用<br>obj = null <br><span class="hljs-regexp">//</span> 对象从内存移除，回收 &#123;id: <span class="hljs-number">1</span>&#125; 对象<br></code></pre></td></tr></table></figure><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 1&#125;</span><br><span class="hljs-string">let</span> user = &#123;<span class="hljs-attribute">info</span>: obj&#125;<br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([obj])<br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[obj, <span class="hljs-string">&#x27;hahaha&#x27;</span>]])<br><br><span class="hljs-comment">// 重写obj</span><br>obj = <span class="hljs-literal">null</span> <br><br><span class="hljs-built_in">console</span>.log(user.info) <span class="hljs-comment">// &#123;id: 1&#125;</span><br><span class="hljs-built_in">console</span>.log(set)<br><span class="hljs-built_in">console</span>.log(map)<br>&lt;!-- 重写 obj 以后，&#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 1&#125; 依然会存在于内存中，因为 user</span> 对象以及后面的 set/map 都强引用了它，<span class="hljs-built_in">Set</span>/<span class="hljs-built_in">Map</span>、对象、数组对象等都是强引用，所以我们仍然可以获取到 &#123;<span class="hljs-attribute">id:</span><span class="hljs-string"> 1&#125; ，我们想要清除那就只能重写所有引用将其置空了。 --&gt;</span><br></code></pre></td></tr></table></figure></li><li>未清理的Console输出<h4 id="内存泄漏排查、定位与修复"><a href="#内存泄漏排查、定位与修复" class="headerlink" title="内存泄漏排查、定位与修复"></a>内存泄漏排查、定位与修复</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> click = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#click&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">let</span> content = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#content&quot;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">let</span> arr = []</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">closures</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1000</span>).fill(<span class="hljs-string">&#x27;isboyjc&#x27;</span>)</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> test</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    click.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      arr.push(closures())</span><br><span class="javascript">      arr.push(closures())</span><br><span class="javascript"></span><br><span class="javascript">      content.innerHTML = arr.length</span><br><span class="javascript">    &#125;);</span><br><span class="javascript"></span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ol><li>快照</li></ol><ul><li>Summary：按照构造函数进行分组，捕获对象和其使用内存的情况，可理解为一个内存摘要，用于跟踪定位DOM节点的内存泄漏</li><li>Comparison：对比某个操作前后的内存快照区别，分析操作前后内存释放情况等，便于确认内存是否存在泄漏及造成原因</li><li>Containment：探测堆的具体内容，提供一个视图来查看对象结构，有助分析对象引用情况，可分析闭包及更深层次的对象分析</li><li>Statistics：统计视图</li></ul><ol start="2"><li>Summary</li></ol><ul><li>Constructor：显示所有的构造函数，点击每一个构造函数可以查看由该构造函数创建的所有对象</li><li>Distance：显示通过最短的节点路径到根节点的距离，引用层级</li><li>Shallow Size：显示对象所占内存，不包含内部引用的其他对象所占的内存</li><li>Retained Size：显示对象所占的总内存，包含内部引用的其他对象所占的内存</li></ul><ol start="3"><li>Comparison</li></ol><ul><li>New：新建了多少个对象</li><li>Deleted：回收了多少个对象</li><li>Delta：新建的对象数 减去 回收的对象数</li></ul><ol start="4"><li><a href="https://developer.chrome.com/docs/devtools/performance/">performance工具</a><h4 id="三个重要的名词"><a href="#三个重要的名词" class="headerlink" title="三个重要的名词"></a>三个重要的名词</h4></li></ol><ul><li><p>内存泄露</p></li><li><p>内存膨胀</p></li><li><p>频繁GC</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">GC</span> 执行的特别频繁，一般出现在频繁使用大的临时变量导致新生代空间被装满的速度极快，而每次新生代装满时就会触发 <span class="hljs-built_in">GC</span>，频繁 <span class="hljs-built_in">GC</span> 同样会导致页面卡顿，想要避免的话就不要搞太多的临时变量，因为临时变量不用了就会被回收，这和我们内存泄漏中说避免使用全局变量冲突，其实，只要把握好其中的度，不太过分就 OK。<br></code></pre></td></tr></table></figure><h4 id="前端web性能指标"><a href="#前端web性能指标" class="headerlink" title="前端web性能指标"></a>前端web性能指标</h4><p>指标有点多，我们关注核心的几个</p></li><li><p>FCP (First Contentful Paint)首次内容绘制</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">浏览器首次绘制来自DOM的内容的时间，内容必须包括文本，图片，非白色的<span class="hljs-selector-tag">canvas</span>或svg，也包括带有正在加载中的web字体文本。这是用户第一次看到的内容。<br><br>注意：performance<span class="hljs-selector-class">.timing</span>已过时，无法获取所有异步加载资源。现在不适用了。<br></code></pre></td></tr></table></figure></li><li><p>LCP (Largest Contentful Paint)最大内容绘制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可视区域中最大的内容元素呈现到屏幕上的时间，用以估算页面的主要内容对用户的可见时间。img图片，video元素的封面，通过url加载到的北京，文本节点等，为了提供更好的用户体验，网站应该在2.5s以内或者更短的时间最大内容绘制。</span><br><span class="hljs-keyword">new</span> PerformanceObserver(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.getEntries()) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;LCP candidate:&#x27;</span>, entry.startTime, entry);<br>    &#125;<br>&#125;).observe(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;largest-contentful-paint&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>FID(First Input Delay), 可用<a href="https://web.dev/tbt/?utm_source=devtools">TBT总阻塞时长</a>代替衡量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//首次输入延迟，从用户第一次与页面进行交互到浏览器实际能够响应该交互的时间，输入延迟是因为浏览器的主线程正忙于做其他事情，所以不能响应用户，发生这种情况的一个常见原因是浏览器正忙于解析和执行应用程序加载的大量计算的JavaScript。</span><br><span class="hljs-keyword">new</span> PerformanceObserver(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.getEntries()) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;FID:&#x27;</span>, entry.processingStart - entry.startTime);<br>    &#125;<br>&#125;).observe(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;first-input&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>CLS (Cumulative Layout Shift)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//累计布局位移，CLS会测量在页面整个生命周期中发生的每个意外的布局移位的所有单独布局移位分数的总和，他是一种保证页面的视觉稳定性从而提升用户体验的指标方案。</span><br>用人话来说就是当点击页面中的某个元素的时候，突然布局变了，手指点到了其它位置。比如想点击页面的链接，突然出现了一个banner。这种情况可能是因为尺寸未知的图像或者视频。<br><span class="hljs-keyword">let</span> cls = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">new</span> PerformanceObserver(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.getEntries()) &#123;<br>        <span class="hljs-keyword">if</span> (!entry.hadRecentInput) &#123;<br>            cls += entry.value;<br>        &#125;<br>    &#125;<br>&#125;).observe(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;layout-shift&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><h4 id="常用优化手法"><a href="#常用优化手法" class="headerlink" title="常用优化手法"></a>常用优化手法</h4></li><li><p>减少 HTTP 请求</p></li><li><p>资源压缩</p></li><li><p>惰性加载<br><a href="https://juejin.cn/post/7252684645979111461#heading-6">给你十万条数据，给我顺滑的渲染出来！</a></p></li><li><p>服务端渲染</p></li><li><p>将 CSS 放在文件头部，JavaScript 文件放在底部</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">CSS 执行会阻塞渲染，阻止 <span class="hljs-keyword">JS </span>执行<br><span class="hljs-keyword">JS </span>加载和执行会阻塞 HTML 解析，阻止 CSSOM 构建<br></code></pre></td></tr></table></figure></li><li><p>缓存</p></li><li><p>减少重绘重排</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">----什么操作会导致重排？<br>添加或删除可见的 DOM 元素<br>元素位置改变<br>元素尺寸改变<br>内容改变<br>浏览器窗口尺寸改变<br>----如何减少重排重绘？<br>用 JavaScript 修改样式时，最好不要直接写样式，而是替换 <span class="hljs-keyword">class</span> 来改变样式。<br>如果要对 <span class="hljs-symbol">DOM</span> 元素执行一系列操作，可以将 <span class="hljs-symbol">DOM</span> 元素脱离文档流，修改完成后，再将它带回文档。推荐使用隐藏元素（<span class="hljs-symbol">display:<span class="hljs-symbol">none</span></span>）或文档碎片（<span class="hljs-symbol">DocumentFragement</span>），都能很好的实现这个方案。<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go``中使用占位符、net用法</title>
    <link href="/2023/08/12/go-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8D%A0%E4%BD%8D%E7%AC%A6%E3%80%81net%E7%94%A8%E6%B3%95/"/>
    <url>/2023/08/12/go-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8D%A0%E4%BD%8D%E7%AC%A6%E3%80%81net%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="go-中使用占位符、net用法"><a href="#go-中使用占位符、net用法" class="headerlink" title="go``中使用占位符、net用法"></a>go``中使用占位符、net用法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-comment">//&#123;&#123;.Itemname&#125;&#125;两个中括号</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;strconv&quot;</span><br>    <span class="hljs-string">&quot;text/template&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br><span class="hljs-keyword">type</span> Test <span class="hljs-keyword">struct</span> &#123;<br>Name     <span class="hljs-keyword">string</span><br>Token    <span class="hljs-keyword">string</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Format</span><span class="hljs-params">(placedata <span class="hljs-keyword">interface</span>&#123;&#125;, data <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<br>s := <span class="hljs-built_in">new</span>(strings.Builder)<br>temp, _ := template.New(<span class="hljs-string">&quot;tplname&quot;</span>).Parse(data)<br>err := temp.Execute(s, placedata)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">return</span> s.String()<br>&#125;<br>haha := <span class="hljs-string">`</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;name&quot;: &quot;&#123;&#123;.Name&#125;&#125;&quot;,</span><br><span class="hljs-string">        &quot;test&quot;: &quot;&#123;&#123;.Token&#125;&#125;&quot;</span><br><span class="hljs-string">        &#125;`</span><br>data := ItemTestdata&#123;<span class="hljs-string">&quot;你好哦哦哦AA&quot;</span>, <span class="hljs-string">&quot;我佛了&quot;</span>&#125;<br>postdata := Format(data, haha)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//空接口不可以直接引用，要先判定类型</span><br><span class="hljs-comment">//通过.(stirng)或者.([]interface&#123;&#125;)等来判定字符串或者切片等</span><br><span class="hljs-keyword">var</span> result1 <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br>test_id, _ := result1[<span class="hljs-string">&quot;objectId&quot;</span>].(<span class="hljs-keyword">string</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//&quot;net/http&quot;的使用</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Get</span><span class="hljs-params">(yoururl <span class="hljs-keyword">string</span>, data <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>]<span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>request, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, yoururl, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//加入get参数</span><br>q := request.URL.Query()<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> data &#123;<br>q.Add(key, value)<br>&#125;<br>request.URL.RawQuery = q.Encode()<br>resp, err := http.DefaultClient.Do(request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>data1, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br>rdata := <span class="hljs-keyword">string</span>(data1)<br>result := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>err1 := json.Unmarshal([]<span class="hljs-keyword">byte</span>(rdata), &amp;result)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-comment">// log.Print(&quot;GET请求 &quot;, request.URL, &quot; &quot;, resp.Status)</span><br><span class="hljs-keyword">return</span> result<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Post</span><span class="hljs-params">(yoururl <span class="hljs-keyword">string</span>, data <span class="hljs-keyword">string</span>, yourheader <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;, *http.Response)</span></span> &#123;<br>data2 := strings.NewReader(data)<br>request, err := http.NewRequest(<span class="hljs-string">&quot;POST&quot;</span>, yoururl, data2)<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> yourheader &#123;<br>request.Header.Set(key, value)<br>&#125;<br><span class="hljs-comment">// request.Header.Set(&quot;Content-Type&quot;, &quot;text/plain&quot;)</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br>resp1, err := http.DefaultClient.Do(request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp1.Body.Close()<br>data1, err := ioutil.ReadAll(resp1.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br>rdata := <span class="hljs-keyword">string</span>(data1)<br><span class="hljs-comment">//转成map为了后续方便用</span><br>result := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>err1 := json.Unmarshal([]<span class="hljs-keyword">byte</span>(rdata), &amp;result)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> result, resp1<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pgsql语法记录</title>
    <link href="/2023/03/14/pgsql%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/03/14/pgsql%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="官网参考资料"><a href="#官网参考资料" class="headerlink" title="官网参考资料"></a>官网参考资料</h3><p><a href="https://www.postgresql.org/docs/9.6/functions-json.html">https://www.postgresql.org/docs/9.6/functions-json.html</a></p><h3 id="查询相关语法"><a href="#查询相关语法" class="headerlink" title="查询相关语法"></a>查询相关语法</h3><p>假设存了一个（Item表values列）jsonb数据如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;Text23&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">&quot;Number1&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">&quot;Number2&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;ItemCode&quot;</span>: <span class="hljs-string">&quot;man-hour-2023&quot;</span>,<br><span class="hljs-attr">&quot;LongText&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">&quot;User3321&quot;</span>: [&#123;<br><span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;ds(dsdsdsdsds)&quot;</span>,<br><span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;I2GgCsDDSM&quot;</span>,<br><span class="hljs-attr">&quot;deleted&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">&quot;enabled&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;ds&quot;</span>,<br><span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;dsdsdsdsds&quot;</span><br>&#125;],<br><span class="hljs-attr">&quot;assignee&quot;</span>: [&#123;<br><span class="hljs-attr">&quot;label&quot;</span>: <span class="hljs-string">&quot;Gitee_test(Gitee_test)&quot;</span>,<br><span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;QWUqDqFNj8&quot;</span>,<br><span class="hljs-attr">&quot;deleted&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">&quot;enabled&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;Gitee_test&quot;</span>,<br><span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;Gitee_test&quot;</span><br>&#125;],<br><span class="hljs-attr">&quot;priority&quot;</span>: <span class="hljs-string">&quot;596efbfe-9129-4d51-a64c-33b0bc261f22&quot;</span>,<br><span class="hljs-attr">&quot;Formula22&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">&quot;StoryPoint&quot;</span>: <span class="hljs-literal">null</span>,<br><span class="hljs-attr">&quot;file_transfer&quot;</span>: [<span class="hljs-string">&quot;安装ftp客户端&quot;</span>],<br><span class="hljs-attr">&quot;r_man_hour_plugin_date&quot;</span>: <span class="hljs-number">1676304000000</span>,<br><span class="hljs-attr">&quot;r_man_hour_plugin_type&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">&quot;r_man_hour_plugin_overHours&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">&quot;r_man_hour_plugin_normalHours&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>查询values中包含man_hour字符串<br><code>select * from &quot;Item&quot; where &quot;values&quot;::text like &#39;%&quot;man_hour&quot;%&#39;;</code></li><li>查询指定某个字段等于某个值<br><code>select * from &quot;Item&quot; where  (&quot;Item&quot;.values-&gt;&gt;&#39;r_man_hour_plugin_date&#39;)::int8 = 1679500800000;</code></li><li>查询指定某个字段大于某个值<br><code>select * from &quot;Item&quot; where  (&quot;Item&quot;.values-&gt;&gt;&#39;r_man_hour_plugin_date&#39;)::int8 &gt; 1679500700000;</code></li><li>查询r_man_hour_plugin_date<br><code>select values-&gt;&gt;&#39;DataQuotecrtttt&#39;, values-&gt;&gt;&#39;remote_data_quote_field_type123&#39; from &quot;Item&quot;  </code><br>假设数据为[{“status”: “approved”, “comment”: “”, “approver”: “I719aTBelK”, “approvalTime”: 1697018720199}]</li><li>查询approvalTime<br><code>SELECT aa-&gt;0-&gt;&#39;approvalTime&#39; AS approvalTime FROM your_table;</code></li><li>多层嵌套json查询<br><code>SELECT * FROM my_table  WHERE (my_table.item -&gt; &#39;itemType&#39; -&gt;&gt; &#39;objectId&#39;)::int = 1;</code><br><code>SELECT * FROM my_table  WHERE (my_table.item -&gt;&gt; &#39;itemType&#39;)::json -&gt;&gt; &#39;objectId&#39; = &#39;1&#39;;</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>pgsql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git操作</title>
    <link href="/2022/07/30/git%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/07/30/git%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="git分离状态-HEAD"><a href="#git分离状态-HEAD" class="headerlink" title="git分离状态 HEAD"></a>git分离状态 HEAD</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//切换远程分支并处于分离状态DEAD</span><br>git checkout --detach origin/POC510-Mysql<br></code></pre></td></tr></table></figure><ul><li>分离状态无法直接Push提交，需要<code>git push origin HEAD:mybranch_name</code></li><li>分离状态提交，如遇到冲突，需要先<code>git pull origin remotebranch_name</code>进入编辑解决冲突后输入合并的commit然后<code>esc  :wq</code>保存</li><li>解决冲突之后<code>git push origin HEAD:mybranch_name</code></li><li>游离状态切换分支<code>git checkout --detach origin/POC510-Mysql </code></li></ul><h4 id="git本地分支"><a href="#git本地分支" class="headerlink" title="git本地分支"></a>git本地分支</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>通常拉取远程分支并建立本地分支，这样提交就会默认对应远程分支<br>git checkout -b local_branch_name origin/remote_branch_name<br><br><br><span class="hljs-regexp">//</span>先新建，再关联<br>git checkout -b your_local_branch_name<br><span class="hljs-regexp">//</span>方式一： -u 选项会设置上游（upstream）分支，使得以后的推送和拉取都可以更方便地执行，不需要额外指定远程和分支<br>git push -u origin your_local_branch_name<br><span class="hljs-regexp">//</span>方式二：将本地分支与远程分支关联<br>git branch --set-upstream-to=origin/remote_branch_name your_local_branch_name<br><br><br></code></pre></td></tr></table></figure><h4 id="多账号切换"><a href="#多账号切换" class="headerlink" title="多账号切换"></a>多账号切换</h4><p>//我本地有两个账号，需要改改<br>git config user.name “Mistyrain520”<br>git config user.email <a href="mailto:&#49;&#50;&#x39;&#56;&#54;&#49;&#x36;&#57;&#55;&#52;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#49;&#50;&#x39;&#56;&#54;&#49;&#x36;&#57;&#55;&#52;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a><br>git config user.name<br>git config user.email</p><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>push前千万要pull一下！push前千万要pull一下！push前千万要pull一下！</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vala">git pull origin team-master<br><span class="hljs-meta">#如果有冲突，就会发现 team-maste(MERGE) 类似这样提示merge</span><br><span class="hljs-meta">#此时简单一点，用git GUI打开仓库，手动处理一下，比如选择应用远程版本，或者本地版本。然后提交commit，再上传push</span><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br><span class="hljs-comment">// 你的更改</span><br>=======<br><span class="hljs-comment">// 远程仓库的更改</span><br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/branch-name<br><span class="hljs-meta">#接下来再去提交自己的修改</span><br>处理完之后，再commit以及push。<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler拦截操作</title>
    <link href="/2022/03/06/Fiddler%E6%8B%A6%E6%88%AA%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/03/06/Fiddler%E6%8B%A6%E6%88%AA%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Fiddler拦截操作"><a href="#Fiddler拦截操作" class="headerlink" title="Fiddler拦截操作"></a>Fiddler拦截操作</h3><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul><li>bps 200 中断200状态的所有请求；bps（不加参数）取消所有bps中断</li><li>bpafter  aaa 中断包含aaa的URL（也可以直接写整个URL），通常用来做中断，修改返回值用</li><li>bpu同bpafter作用相似，同理，bpu不带参数，则是取消所有设置的中断</li><li>go 让当前中断的请求全部继续执行跳过中断</li><li>select可以选择URL，比如select image，选择image的URL</li></ul><h4 id="拦截请求修改返回的几种方法"><a href="#拦截请求修改返回的几种方法" class="headerlink" title="拦截请求修改返回的几种方法"></a>拦截请求修改返回的几种方法</h4><h5 id="方式一：先bpafter-url；重新加载请求后会在该url中断，修改Inspectors下TextView的值即可；不需要更改content-length；"><a href="#方式一：先bpafter-url；重新加载请求后会在该url中断，修改Inspectors下TextView的值即可；不需要更改content-length；" class="headerlink" title="方式一：先bpafter url；重新加载请求后会在该url中断，修改Inspectors下TextView的值即可；不需要更改content-length；"></a>方式一：先bpafter url；重新加载请求后会在该url中断，修改Inspectors下TextView的值即可；不需要更改content-length；</h5><h5 id="方式二（推荐）"><a href="#方式二（推荐）" class="headerlink" title="方式二（推荐）:"></a>方式二（推荐）:</h5><p>save ResponseBody，然后AutoRespender中启用即可，可以随意更改返回json中的内容；不建议用Entire ResponseBody，因为实际使用增加了接口返回长度，需要修改content-length，否则会导致返回内容被截断。</p><p><img src="/img/image-20220130171807524.png" alt="image-20220130171807524"></p><p><img src="/img/image-20220130172101062.png" alt="image-20220130172101062"></p><p>参考：<a href="https://blog.csdn.net/weixin_42380194/article/details/84314181">https://blog.csdn.net/weixin_42380194/article/details/84314181</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>fiddler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>转行后首次使用Jmeter----基本使用</title>
    <link href="/2022/03/06/Jmeter%20Functions%20and%20Variables/"/>
    <url>/2022/03/06/Jmeter%20Functions%20and%20Variables/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Jmeter上下文引用"><a href="#Jmeter上下文引用" class="headerlink" title="Jmeter上下文引用"></a>Jmeter上下文引用</h4><p>变量引用：${para},  比如用于请求头，或者参数化请求body；</p><p>引用jmeter系统变量：**${__property(para)}**</p><p><a href="https://jmeter.apache.org/usermanual/functions.html#__property">https://jmeter.apache.org/usermanual/functions.html#__property</a></p><p>那么jmeter如何设置变量？</p><p>eg: </p><ul><li>jsonpath提取值</li><li>元器：用户参数、信息头管理器</li><li>functions语法设置：${__setProperty(sessionToken, ${sessiontoken},)}，将${sessiontoken}该引用变量设置为Jmeter系统变量sessionToken，之后就可以${sessiontoken}来引用</li></ul><h4 id="Jmeter-Functions-and-Variables"><a href="#Jmeter-Functions-and-Variables" class="headerlink" title="Jmeter: Functions and Variables"></a>Jmeter: Functions and Variables</h4><p>食用方法：**${__functionName(var1,var2,var3)}**</p><p>特别注意：在代码中食用方式如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">正确例子：var <span class="hljs-attr">person</span> = <span class="hljs-string">&quot;啊哈<span class="hljs-subst">$&#123;__threadNum&#125;</span>&quot;</span><br><br>错误例子：var <span class="hljs-attr">person</span> = <span class="hljs-string">&quot;啊哈&quot;</span> + $&#123;__threadNum&#125;.<span class="hljs-built_in">toString</span>()<br></code></pre></td></tr></table></figure><p>常用函数举例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$&#123;__time(dd/MM/yyyy,)&#125;</span><br><span class="hljs-comment">#如果在 2018 年 1 月 21 日运行， 将返回21/01/2018</span><br><br><span class="hljs-variable">$&#123;__CSVRead(random.txt,0)&#125;</span><br><span class="hljs-comment">#适用小文件</span><br></code></pre></td></tr></table></figure><p>更多食用方法参考函数助手：</p><p><img src="/img/image-20220214203401644.png" alt="image-20220214203401644"></p><p>值得注意的是，在脚本中直接引用jmeter函数，应当作为变量来使用，而不是已知变量：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"># 正确写法<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$&#123;__CSVRead</span>(<span class="hljs-keyword">D</span>:\<span class="hljs-keyword">test</span>.csv,0)&#125; = <span class="hljs-string">&quot;卡库拉&quot;</span>;<br>错误写法,报错XXX未定义<br><span class="hljs-keyword">var</span> aa = <span class="hljs-variable">$&#123;__CSVRead</span>(<span class="hljs-keyword">D</span>:\<span class="hljs-keyword">test</span>.csv,0)&#125;;<br></code></pre></td></tr></table></figure><p><img src="/img/image-20220214205219976.png" alt="image-20220214205219976"></p><h5 id="官网参考网址"><a href="#官网参考网址" class="headerlink" title="官网参考网址:"></a>官网参考网址:</h5><p><a href="https://jmeter.apache.org/usermanual/functions.html#">https://jmeter.apache.org/usermanual/functions.html#</a></p><h4 id="JSR223-预处理程序"><a href="#JSR223-预处理程序" class="headerlink" title="JSR223 预处理程序"></a>JSR223 预处理程序</h4><p>先认识一下老的BeanShell处理程序</p><p><a href="https://jmeter.apache.org/usermanual/functions.html#__BeanShell">https://jmeter.apache.org/usermanual/functions.html#__BeanShell</a></p><p><a href="https://jmeter.apache.org/usermanual/component_reference.html#BeanShell_Sampler">https://jmeter.apache.org/usermanual/component_reference.html#BeanShell_Sampler</a></p><ul><li><strong>ctx</strong> - <a href="https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterContext.html">JMeterContext</a> object，以ctx为例，是Jmetercontext类，便可以找到该类下的方法，举例，可以通过ctx.getCurrentSampler()去引用</li><li><strong>vars</strong> - <a href="https://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html">JMeterVariables</a> object，这个涉及到最基础的变量使用方式，比如<strong>var.put(key,value),var.get(key)</strong></li><li><strong>props</strong> - JMeterProperties (class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><strong>java.util.Properties</strong></a>) object</li><li><strong>threadName</strong> - the threadName (String)</li><li><strong>Sampler</strong> - the current <a href="https://jmeter.apache.org/api/org/apache/jmeter/samplers/Sampler.html">Sampler</a>, if any</li><li><strong>SampleResult</strong> - the current <a href="https://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a>,</li><li><strong>props</strong> - JMeterProperties (class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><strong>java.util.Properties</strong></a>) 该方法也很重要。</li><li>补充区别：vars 只能在当前线程内使用，props 可以跨线程组使用<br>vars 只能保存 String 或者 Object，props 是 Hashtable 对象</li></ul><p>接下来看下JSR223处理器</p><p><a href="https://jmeter.apache.org/usermanual/component_reference.html#JSR223_Sampler">https://jmeter.apache.org/usermanual/component_reference.html#JSR223_Sampler</a></p><p>值得注意的是这几句话：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">When using this feature, ensure your <span class="hljs-keyword">script </span>code does not use <span class="hljs-keyword">JMeter </span>variables <span class="hljs-keyword">or </span><span class="hljs-keyword">JMeter </span>function calls <span class="hljs-keyword">directly </span>in <span class="hljs-keyword">script </span>code as caching would only <span class="hljs-keyword">cache </span>first replacement. <span class="hljs-keyword">Instead </span>use <span class="hljs-keyword">script </span>parameters.<br><br>To <span class="hljs-keyword">benefit </span>from caching <span class="hljs-keyword">and </span>compilation, the language engine used for <span class="hljs-keyword">scripting </span>must implement <span class="hljs-keyword">JSR223 </span>Compilable interface (Groovy is one of these, <span class="hljs-keyword">java, </span><span class="hljs-keyword">beanshell </span><span class="hljs-keyword">and </span><span class="hljs-keyword">javascript </span>are not)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python中三重引号的使用</title>
    <link href="/2022/03/06/python%E4%B8%AD%E4%B8%89%E9%87%8D%E5%BC%95%E5%8F%B7%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8D%A0%E4%BD%8D%E7%AC%A6/"/>
    <url>/2022/03/06/python%E4%B8%AD%E4%B8%89%E9%87%8D%E5%BC%95%E5%8F%B7%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%8D%A0%E4%BD%8D%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="python中三重引号中如何使用占位符"><a href="#python中三重引号中如何使用占位符" class="headerlink" title="python中三重引号中如何使用占位符"></a>python中三重引号中如何使用占位符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> Template<br>data = <span class="hljs-string">&#x27;&#x27;&#x27;&#123;</span><br><span class="hljs-string">          &quot;name&quot;: $para,</span><br><span class="hljs-string">          &quot;workspace&quot;: &#123;</span><br><span class="hljs-string">            &quot;__type&quot;: &quot;Pointer&quot;,</span><br><span class="hljs-string">            &quot;className&quot;: &quot;Workspace&quot;,</span><br><span class="hljs-string">            &quot;objectId&quot;: &quot;HQQAJJlYXV&quot;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>    s = Template(data)<br>    result = s.substitute(para=<span class="hljs-string">&#x27;tim&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(result)<br> <span class="hljs-comment"># 输入</span><br>&#123;<br>         <span class="hljs-string">&quot;name&quot;</span>: tim,<br>         <span class="hljs-string">&quot;workspace&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;__type&quot;</span>: <span class="hljs-string">&quot;Pointer&quot;</span>,<br>           <span class="hljs-string">&quot;className&quot;</span>: <span class="hljs-string">&quot;Workspace&quot;</span>,<br>           <span class="hljs-string">&quot;objectId&quot;</span>: <span class="hljs-string">&quot;HQQAJJlYXV&quot;</span><br>         &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>参考官网文档：<a href="https://docs.python.org/3/library/string.html#string-formatting">https://docs.python.org/3/library/string.html#string-formatting</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paramiko踩坑</title>
    <link href="/2021/11/25/paramiko%E8%B8%A9%E5%9D%91/"/>
    <url>/2021/11/25/paramiko%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="paramiko踩坑：远程上传下载以及linux命令执行"><a href="#paramiko踩坑：远程上传下载以及linux命令执行" class="headerlink" title="paramiko踩坑：远程上传下载以及linux命令执行"></a>paramiko踩坑：远程上传下载以及linux命令执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> parse_config<br><span class="hljs-keyword">import</span> pysvn<br>tran = paramiko.Transport(<span class="hljs-string">&#x27;XXX&#x27;</span>)<br>tran.connect(username=<span class="hljs-string">&#x27;XXX&#x27;</span>, password=<span class="hljs-string">&quot;XXX&quot;</span>)<br><span class="hljs-comment"># 获取SFTP实例</span><br>sftp = paramiko.SFTPClient.from_transport(tran)<br><br>local_excel = <span class="hljs-string">&quot;XXX&quot;</span><br>remotepath = <span class="hljs-string">&quot;XXX&quot;</span><br><br>svnclient = pysvn.Client(local_excel)<br>changes = svnclient.status(local_excel)<br><span class="hljs-comment">#这里是获取svn modified，我主要是获取改动的excel文件</span><br>change_exc = [f.path <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> changes <span class="hljs-keyword">if</span> f.text_status == pysvn.wc_status_kind.modified]<br><br><span class="hljs-comment">#我自己做的一些其他处理，可不管</span><br>parconf = parse_config.parsetable<br>need_parese = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_exc:<br>    xls_name = i.split(<span class="hljs-string">&quot;文档\\&quot;</span>)[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(xls_name)<br>    targetpath = remotepath + xls_name<br>    localpath = i.replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-comment"># print(&quot;本地位置----&quot;, localpath, &quot;目标位置----&quot;, targetpath)</span><br>    sftp.put(localpath, targetpath)<br>    parse_file = <span class="hljs-string">&quot;文档\\&quot;</span> + xls_name<br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> parconf.items():<br>        <span class="hljs-keyword">for</span> ls <span class="hljs-keyword">in</span> v:<br>            <span class="hljs-keyword">if</span> ls[<span class="hljs-string">&quot;parse_file&quot;</span>] == parse_file:<br>                need_parese.append(k)<br>                <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(need_parese)<br>tran.close()<br><br><span class="hljs-comment"># 配置私人密钥文件位置</span><br><span class="hljs-comment"># private = paramiko.RSAKey.from_private_key_file(&#x27;D:/dev_rsa/id_rsa_2048&#x27;, password=&#x27;123456&#x27;)</span><br><span class="hljs-comment"># 实例化SSHClient</span><br>client = paramiko.SSHClient()<br><br><span class="hljs-comment"># 自动添加策略，保存服务器的主机名和密钥信息，如果不添加，那么不再本地know_hosts文件中记录的主机将无法连接</span><br>client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 连接SSH服务端，以用户名和密码进行认证</span><br>client.connect(hostname=<span class="hljs-string">&#x27;1XXX&#x27;</span>, username=<span class="hljs-string">&#x27;XXX&#x27;</span>, password=<span class="hljs-string">&quot;XXX&quot;</span>)<br><br><span class="hljs-comment"># parse_com = &quot;./tools/parse_local_table.py&quot;</span><br>parse_com = <span class="hljs-string">&quot;git branch&quot;</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> need_parese:<br>    parse_com = parse_com + <span class="hljs-string">&quot; &quot;</span> + k<br><br><span class="hljs-comment"># stdin1, stdout1, stderr1 = client.exec_command(&#x27;cd qqsj_qc01/logic/;./tools/parse_local_table.py activity_theme&#x27;)</span><br>cmd = <span class="hljs-string">&quot;bash --login -c &#x27;cd qqsj_qc01/logic/;&#123;&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(parse_com)<br><span class="hljs-built_in">print</span>(cmd)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------开始执行导表----------------&quot;</span>)<br>stdin1, stdout1, stderr1 = client.exec_command(cmd, get_pty=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(stdout1.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>client.close()<br><br><br><span class="hljs-comment"># 执行上传下载动作</span><br><span class="hljs-comment"># sftp.put(i, remotepath)</span><br><span class="hljs-comment"># sftp.get(remote_parseconfig, local_parseconfig)</span><br><br></code></pre></td></tr></table></figure><ul><li> 踩坑点1：远程Linux命令执行，会出现command Not found，因为执行的path不对。必须采用bash –login登陆方式（这个方式表示用户登陆时，输入用户名和密码后启动的shell）。</li><li> 踩坑点2：执行命令要一并执行，中间用,分割，否则不是同一个会话。如果分开执行client.exec_command(cd home/my)和client.exec_command(ls)，最后列出目录并不是my下面文件</li></ul><p>Bash 的激活选项<br>-c string 该选项表明string中包含了一条命令.如 bash -c ls ~；bash –login -c ‘cd /home/my,ls’<br>-i 使Bash以交互式方式运行<br>-r 使Bash以受限方式运行<br>–login 使Bash以登录Shell方式运行<br>–posix 使Bash遵循POSIX标准<br>–verbose 使Bash显示所有其读入的输入行<br>–help 打印Bash的使用信息<br>–version 打印版本信息<br>–noprofile<br>–norc<br>–rcfile file</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>paramiko</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go println朔源</title>
    <link href="/2021/11/16/Println%E6%9C%94%E6%BA%90/"/>
    <url>/2021/11/16/Println%E6%9C%94%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i integer)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  fmt.Println(integer(<span class="hljs-number">5</span>))<br>&#125;<br><span class="hljs-comment">//输出 hello；事实上，interger(1)，中间数字无论如何变化，输出都是hello</span><br></code></pre></td></tr></table></figure><p><code>Println</code>—-&gt;<code>Fprintln</code>—-&gt;<code>p.doPrintln(a)</code>—-&gt;<code>p.printArg(arg, &#39;v&#39;)</code><br>打断点<code>switch f := arg.(type)</code>发现类型并不走<code>switch</code>，而是调用<code>p.handleMethods(verb)</code>，最后调用的是<code>p.fmtString(v.String(), verb)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> v := p.arg.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> error:<br>    handled = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">defer</span> p.catchPanic(p.arg, verb, <span class="hljs-string">&quot;Error&quot;</span>)<br>    p.fmtString(v.Error(), verb)<br>    <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">case</span> Stringer:<br>    handled = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">defer</span> p.catchPanic(p.arg, verb, <span class="hljs-string">&quot;String&quot;</span>)<br>    p.fmtString(v.String(), verb)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">//另外找到Stringer和error类型定义</span><br><span class="hljs-keyword">type</span> Stringer <span class="hljs-keyword">interface</span> &#123;<br>String() <span class="hljs-keyword">string</span><br>&#125;<br><span class="hljs-keyword">type</span> error <span class="hljs-keyword">interface</span> &#123;<br>Error() <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果自己实现了String方法，那么则会调用你实现的方法，最后输出是hello</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> haha <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *haha)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello1&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *haha)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello2&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(&amp;haha&#123;&#125;)<br>&#125;<br><span class="hljs-comment">//内置的Println是不能输出结构体的，那么走error就会输出我们自己实现的Error方法</span><br>[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;d:\go work\test.go&quot;</span><br>hello2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go defer特点</title>
    <link href="/2021/11/16/%E5%A4%9A%E4%B8%AAdefer%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/11/16/%E5%A4%9A%E4%B8%AAdefer%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>后进先出原则</li><li>报错也不会阻断defer输出<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test_error</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span></span> &#123;<br>result := <span class="hljs-number">100</span> / x<br>fmt.Println(<span class="hljs-string">&quot;result = &quot;</span>, result)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;aaaaaaaaaaaaaaaa&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;bbbbbbbbbbbbbbbb&quot;</span>)<br><span class="hljs-comment">//调用一个报错函数</span><br><span class="hljs-keyword">defer</span> test_error(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;cccccccccccccccc&quot;</span>)<br>   <br></code></pre></td></tr></table></figure></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;d:\go work\test.go&quot;</span><br>cccccccccccccccc<br>bbbbbbbbbbbbbbbb<br>aaaaaaaaaaaaaaaa<br><span class="hljs-built_in">panic</span>: runtime error: integer divide by zero<br><br>goroutine <span class="hljs-number">1</span> [running]:<br>main.test_error(<span class="hljs-number">0x7961f0</span>)<br>d:/<span class="hljs-keyword">go</span> work/test.<span class="hljs-keyword">go</span>:<span class="hljs-number">9</span> +<span class="hljs-number">0xad</span><br>main.main()<br>d:/<span class="hljs-keyword">go</span> work/test.<span class="hljs-keyword">go</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0x132</span><br>exit status <span class="hljs-number">2</span><br><br>[Done] exited with code=<span class="hljs-number">1</span> in <span class="hljs-number">1.094</span> seconds<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tops和dumpsys</title>
    <link href="/2021/08/25/tops%E5%92%8Cdumpsys/"/>
    <url>/2021/08/25/tops%E5%92%8Cdumpsys/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="top命令详解"><a href="#top命令详解" class="headerlink" title="top命令详解"></a>top命令详解</h3><p>基本使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:\Program Files (x86)\Android\android-sdk\platform-tools&gt;adb -s 7PR4C19912015805 shell top --help<br>usage: top [-Hbq] [-k FIELD,] [-o FIELD,] [-s SORT] [-n NUMBER] [-m LINES] [-d SECONDS] [-p PID,] [-u USER,]<br><br>Show process activity in real time.<br><br>-H      Show threads<br>-k      Fallback sort FIELDS (default -S,-%CPU,-ETIME,-PID)<br>-o      Show FIELDS (def PID,USER,PR,NI,VIRT,RES,SHR,S,%CPU,%MEM,TIME+,CMDLINE)<br>-O      Add FIELDS (replacing PR,NI,VIRT,RES,SHR,S from default)<br>-s      Sort by field number (1-X, default 9)<br>-b      Batch mode (no tty)<br>-d      Delay SECONDS between each cycle (default 3)<br>-m      Maximum number of tasks to show<br>-n      Exit after NUMBER iterations<br>-p      Show these PIDs<br>-u      Show these USERs<br>-q      Quiet (no header lines)<br><br>Cursor LEFT/RIGHT to change sort, UP/DOWN move list, space to force<br>update, R to reverse sort, Q to exit.<br></code></pre></td></tr></table></figure><p>结合findstr(windows用findstr，linux用grep)使用，其中<code>-s 7PR4C19912015805</code>指定设备名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb -s 7PR4C19912015805 shell top  -d 1<br>//结合findstr或者grep使用，注意有些包名太长系统不会显示全名，此时搜索全名包名可能搜不到，建议搜索部分包名<br>adb -s 7PR4C19912015805 shell top  -d 1 | findstr com.XXX.XXX<br>//把top输出保存到adb工具的当前目录下1257.txt文件<br>adb -s 7PR4C19912015805 shell &quot;top  -d 1|grep com.XXX.XXX&quot; &gt;1257.txt<br></code></pre></td></tr></table></figure><h3 id="top重要参数含义"><a href="#top重要参数含义" class="headerlink" title="top重要参数含义"></a>top重要参数含义</h3><p>**VIRT：virtual memory usage 虚拟内存<br>**1、进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等。VIRT=SWAP（交换内存）+RES</p><p>2、假如进程申请100m的内存，但实际只使用了10m，那么它会增长100m，而不是实际的使用量</p><p><strong>RES：resident memory usage 常驻内存</strong><br>1、进程当前使用的内存大小，但不包括swap out<br>2、包含其他进程的共享<br>3、如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反<br>4、关于库占用内存的情况，它只统计加载的库文件所占内存大小</p><p><strong>SHR：shared memory 共享内存</strong><br>1、除了自身进程的共享内存，也包括其他进程的共享内存<br>2、虽然进程只使用了几个共享库的函数，但它包含了整个共享库的大小<br>3、计算某个进程所占的物理内存大小公式：RES – SHR<br>4、swap out后，它将会降下来</p><p>参考连接：</p><p><a href="https://javawind.net/p131">https://javawind.net/p131</a></p><p><a href="https://www.cnblogs.com/flyingcode/p/13690223.html">https://www.cnblogs.com/flyingcode/p/13690223.html</a></p><h3 id="dumpsys-meminfo详解"><a href="#dumpsys-meminfo详解" class="headerlink" title="dumpsys meminfo详解"></a>dumpsys meminfo详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell dumpsys meminfo [pkg/pid]<br>D:\Program Files (x86)\Android\android-sdk\platform-tools&gt;adb -s 7PR4C19912015805 shell dumpsys meminfo -h<br>meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]<br>  -a: include all available information for each process.<br>  -d: include dalvik details.<br>  -c: dump in a compact machine-parseable representation.<br>  -s: dump only summary of application memory usage.<br>  -S: dump also SwapPss.<br>  --oom: only show processes organized by oom adj.<br>  --local: only collect details locally, don&#x27;t call process.<br>  --package: interpret process arg as package, dumping all<br>             processes that have loaded that package.<br>  --checkin: dump data for a checkin<br>  --proto: dump data to proto<br>If [process] is specified it can be the name or<br>pid of a specific process to dump.<br></code></pre></td></tr></table></figure><p>其他常用服务信息查询</p><ul><li><p>内存 adb shell dumpsys meminfo</p></li><li><p>CPU adb shell dumpsys cpuinfo</p></li><li><p>帧率 adb shell dumpsys gfxinfo</p></li><li><p>显示 adb shell dumpsys display</p></li><li><p>电源 adb shell dumpsys power</p></li><li><p>电池状态 adb shell dumpsys batterystats</p></li><li><p>电池 adb shell dumpsys battery</p></li><li><p>闹钟 adb shell dumpsys alarm</p></li><li><p>位置 adb shell dumpsys location</p></li></ul><p>Uptime</p><p>表示启动到现在的时长，不包含休眠的时间，单位毫秒(ms)</p><p>Realtime</p><p>表示启动到现在的时长，包含休眠的时间，单位毫秒(ms)</p><p>Native Heap</p><p>指c 中malloc出来的堆空间</p><p>扩展：c++申请的内存为native process，java申请的内存：java process</p><p>Dalvik Heap</p><p>指java中new出来的java堆空间</p><p>只是占用的虚拟内存的空间</p><p>Pss Total</p><p>指占用了真实的物理内存的空间</p><p>private dirty</p><p>指私有驻留内存</p><p>扩展：进程内存空间是虚拟内存，区分于物理内存，进程无法直接操作物理内存RAM。必要时，操作系统对其进行映射，使进程能应用到物理内存</p><p>Heap Size</p><p>指占用总内存（Heap 堆）</p><p>Heap Alloc</p><p>指在虚拟地址中分配了这么多空间</p><p>Heap Free</p><p>空闲内存</p><p>参考连接：</p><p><a href="https://www.cnblogs.com/hzcya1995/p/13309149.html">https://www.cnblogs.com/hzcya1995/p/13309149.html</a></p><h3 id="查看包名方式"><a href="#查看包名方式" class="headerlink" title="查看包名方式"></a>查看包名方式</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//方式一，可以用FILTER去搜索</span><br>adb shell pm list packages <span class="hljs-selector-attr">[-f]</span> <span class="hljs-selector-attr">[-d]</span> <span class="hljs-selector-attr">[-e]</span> <span class="hljs-selector-attr">[-s]</span> <span class="hljs-selector-attr">[-3]</span> <span class="hljs-selector-attr">[-i]</span> <span class="hljs-selector-attr">[-u]</span> <span class="hljs-selector-attr">[--user USER_ID]</span> <span class="hljs-selector-attr">[FILTER]</span><br>参数显示列表<br>无所有应用<br>-f显示应用关联的 apk 文件<br>-d只显示 disabled 的应用<br>-e只显示 enabled 的应用<br>-s只显示系统应用<br>-3只显示第三方应用<br>-<span class="hljs-selector-tag">i</span>显示应用的 installer<br>-u包含已卸载应用<br>&lt;<span class="hljs-attribute">FILTER</span>&gt;包名包含 &lt;<span class="hljs-attribute">FILTER</span>&gt; 字符串<br>adb -s 7PR4C19912015805 shell pm list packages weixin<br><span class="hljs-comment">//方式二，直接查看活动的应用占用资源情况</span><br>adb -s 7PR4C19912015805 shell <span class="hljs-attribute">top</span>  -d 1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>adb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>想做最好的策划配表检查工具</title>
    <link href="/2021/08/03/%E6%83%B3%E5%81%9A%E6%9C%80%E5%A5%BD%E7%9A%84%E7%AD%96%E5%88%92%E9%85%8D%E8%A1%A8%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/08/03/%E6%83%B3%E5%81%9A%E6%9C%80%E5%A5%BD%E7%9A%84%E7%AD%96%E5%88%92%E9%85%8D%E8%A1%A8%E6%A3%80%E6%9F%A5%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>很多项目组也都有自己的检配表查方法，我也见过两个项目组的两种不同做法，但是我是不太认同的。我综合考虑出另外一种做法（个人觉得是不错的，而且目前实行起来深得我意），但是由于某些原因，我没有在原来项目中去推动我的想法实现。</p><p>这个想法两年前就有了，可惜一直没机会实践。2020年4月的时候终于迎来一次机会，于是把想法付诸实际。如今回望，也是颇有感慨。写一写我怎么做的吧。</p><h4 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h4><p>我需要去考虑的一些点：</p><ul><li>配表改动可能会很频繁，包括但不限于增删表头、改数据格式等</li><li>配表可能会有多文件夹同名表格（SLG多赛季，不同赛季会有season1、season2文件夹，而且season下也可能有同名表）</li><li>当配置表多、规则多的情况下，需不需要去考虑效率问题。小几分钟出检查结果，我可以接受，10以上是不能接受的。</li><li>简单、方便快捷支持规则配置，规则增删</li><li>简单明了输出错误问题</li><li>要不要考虑平台化</li><li>……</li></ul><h4 id="尝试实现："><a href="#尝试实现：" class="headerlink" title="尝试实现："></a>尝试实现：</h4><p>不知道咋想的，当时就有一个想法，通过规则表映射去检查配表（刚好满足很多我的需求）。具体做法是：</p><ul><li>新建规则检查文件夹</li><li>将需要检查的表格复制过来，删除表格内容，在对应列配置规则</li></ul><p>这个做法在落实之后也有一些小问题持续优化，这点后面说。先说下核心做法的实现：</p><h5 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    table = Table()<br>    //这里用xlsx作为规则配置表，是因为后面优化有自动写入功能，相比xls，xlsx会更方便一些<br>    excel = file.File.get_file_dir(config.RULE_DIR, file_type=<span class="hljs-string">&quot;.xlsx&quot;</span>)<br>    d_excel = file.File.get_file_dir(config.DOC_DIR, file_type=<span class="hljs-string">&quot;.xls&quot;</span>)<br>    dd_excel = [i+<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d_excel]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;策划配置表有但是规则表没有的表格（注意补充）：&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(dd_excel).difference(<span class="hljs-built_in">set</span>(excel))))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;规则表有但是策划配置表没有的表格（可以删除）：&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(excel).difference(<span class="hljs-built_in">set</span>(dd_excel))))<br>    <span class="hljs-keyword">for</span> every_excel <span class="hljs-keyword">in</span> excel:<br>        <span class="hljs-comment"># if every_excel != &quot;\K卡牌突破表.xlsx&quot;:</span><br>        <span class="hljs-comment">#     continue</span><br>        check_excel(every_excel)<br></code></pre></td></tr></table></figure><h5 id="check-excel方法核心代码"><a href="#check-excel方法核心代码" class="headerlink" title="check_excel方法核心代码"></a>check_excel方法核心代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> head_name <span class="hljs-keyword">in</span> head_list:<br>    <span class="hljs-keyword">if</span> head_name == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> head_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d_head_list:<br>        <span class="hljs-built_in">print</span>(head_name, excel_name, <span class="hljs-string">&quot;规则表的表头不存在配置表的表头&quot;</span>)<br>        <span class="hljs-keyword">continue</span><br>    d_col = d_head_list.index(head_name)<br>    col = head_list.index(head_name)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(config.ROW_START, sheet.nrows):<br>        <span class="hljs-keyword">if</span> sheet.cell_value(i, col) <span class="hljs-keyword">is</span> <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-keyword">continue</span><br>        cell = <span class="hljs-built_in">str</span>(sheet.cell_value(i, col)).replace(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># value_dict = json.loads(cell)</span><br>            value_dict = json.loads(cell, strict=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;@@@@@@@@@@@@@@@@@@@规则配置错误&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cell), excel_name)<br>        (key, value), = value_dict.items()<br>        <span class="hljs-comment"># 传参：所检查的表的相关信息</span><br>        <span class="hljs-built_in">getattr</span>(rule, config.switch[key])(value, excel_name=excel_name[:-<span class="hljs-number">1</span>], sheet_name=sheet_name, col_index=d_col)<br></code></pre></td></tr></table></figure><h5 id="Rule规则定义与代码实现"><a href="#Rule规则定义与代码实现" class="headerlink" title="Rule规则定义与代码实现"></a>Rule规则定义与代码实现</h5><p>我希望把rule分别归类，这样会非常容易去找到我对应的规则。我在config中会配置有多少类规则，比如In类规则，泛指A列存在B列、当A=X，B列存在C列…此类规则；Match规则，包含A列满足正则表达、当A列=X，B列满足正则表达这两种规则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">switch = &#123;<br>    <span class="hljs-string">&quot;_Only&quot;</span>: <span class="hljs-string">&quot;Only&quot;</span>,<br>    <span class="hljs-string">&quot;_In&quot;</span>: <span class="hljs-string">&quot;Ainb&quot;</span>,<br>    <span class="hljs-string">&quot;_Equal&quot;</span>: <span class="hljs-string">&quot;Equal&quot;</span>,<br>    <span class="hljs-string">&quot;_Match&quot;</span>: <span class="hljs-string">&quot;Match&quot;</span>,<br>    <span class="hljs-string">&quot;_Dict&quot;</span>: <span class="hljs-string">&quot;Dictionary&quot;</span>,<br>    <span class="hljs-string">&quot;_Condition&quot;</span>: <span class="hljs-string">&quot;Condition&quot;</span>,<br>    <span class="hljs-string">&quot;_Increasing&quot;</span>: <span class="hljs-string">&quot;Increasing&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我以In类为例，说下我的做法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ainb</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-comment"># **kwargs 记录正在检查的表格的相关信息</span><br>        <span class="hljs-comment"># r_wbk  指数据配置表中对应规则表的那个表（也就是数据表）</span><br>        <span class="hljs-comment"># d_wbk  指数据配置表中对应规则表配置的规则所指向的那个表（也就是我配的规则里指向的那个表）</span><br>        self.excel_name = kwargs[<span class="hljs-string">&quot;excel_name&quot;</span>]<br>        self.sheet_name = kwargs[<span class="hljs-string">&quot;sheet_name&quot;</span>]<br>        self.col_index = kwargs[<span class="hljs-string">&quot;col_index&quot;</span>]<br>        self.args = args<br>        self.r_wbk = table.open_workbook(config.DOC_DIR, self.excel_name)<br>        self.r_sheet = self.r_wbk.sheet_by_name(self.sheet_name)<br>        r_head = self.r_sheet.row_values(config.HEAD_CN)<br>        self.col_index_name = r_head[self.col_index]<br>        temp = &#123;<span class="hljs-string">&quot;All&quot;</span>: <span class="hljs-string">&quot;all_in&quot;</span>,<br>                <span class="hljs-string">&quot;Assign&quot;</span>: <span class="hljs-string">&quot;assign_in&quot;</span>,<br>                <span class="hljs-string">&quot;Part&quot;</span>: <span class="hljs-string">&quot;part_in&quot;</span>,<br>                <span class="hljs-string">&quot;Sequence&quot;</span>: <span class="hljs-string">&quot;sequence&quot;</span>,<br>                <span class="hljs-string">&quot;Whenassign&quot;</span>: <span class="hljs-string">&quot;whenassign&quot;</span>,<br>                <span class="hljs-string">&quot;Whenpoint&quot;</span>: <span class="hljs-string">&quot;whenpoint&quot;</span>,<br>                <span class="hljs-string">&quot;Every&quot;</span>: <span class="hljs-string">&quot;every_in&quot;</span>,<br>                <span class="hljs-string">&quot;Neighbor&quot;</span>: <span class="hljs-string">&quot;neighbor&quot;</span>,<br>                <span class="hljs-string">&quot;Allpoint&quot;</span>: <span class="hljs-string">&quot;allpoint&quot;</span>&#125;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(self.args[<span class="hljs-number">0</span>], <span class="hljs-built_in">dict</span>):<br>            (key, value), = self.args[<span class="hljs-number">0</span>].items()<br>            self.__getattribute__(temp[key])(value)<br><br>    <span class="hljs-comment"># 每个单元格都in指定的表格指定列的合集</span><br>    <span class="hljs-comment"># &#123;&quot;_In&quot;:&#123;&quot;All&quot;:[&quot;/冬天的秘密.xls&quot;,&quot;冬天的秘密--sheet&quot;,&quot;冬天的秘密--colname&quot;]&#125;&#125;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">all_in</span>(<span class="hljs-params">self, _value</span>):</span><br>        d_wbk = table.open_workbook(config.DOC_DIR, _value[<span class="hljs-number">0</span>])<br>        d_sheet = d_wbk.sheet_by_name(_value[<span class="hljs-number">1</span>])<br>        d_head = d_sheet.row_values(config.HEAD)<br>        d_index = d_head.index(_value[<span class="hljs-number">2</span>])<br>        d_col_list = table.get_content_by_col(<br>            config.DOC_DIR, _value[<span class="hljs-number">0</span>], _value[<span class="hljs-number">1</span>], d_index)<br>        d_col_list1 = [<span class="hljs-built_in">str</span>(j) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> d_col_list]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(config.ROW_START, self.r_sheet.nrows):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> agent.pass_empty(i, self.r_sheet, self.col_index):<br>                <span class="hljs-keyword">continue</span><br>            temp = Common.change_format(<br>                self.r_sheet.cell_value(<br>                    i, self.col_index))<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(temp) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d_col_list1:<br>                agent.pri_excel(<br>                    self.excel_name,<br>                    self.sheet_name,<br>                    i,<br>                    self.col_index_name)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;规则：每个单元格都in指定的表格指定列的合集。数据:::&#123;&#125;--&#123;&#125;&quot;</span>. <span class="hljs-built_in">format</span>(<br>                    <span class="hljs-built_in">str</span>(self.r_sheet.cell_value(i, self.col_index)), _value))<br></code></pre></td></tr></table></figure><p>如上代码，In为大类，大类包含小类。In类型规则，包含All类规则（每个单元格都in指定的表格指定列的合集）、Assign类规则（每个单元格都存在于由你设定的合集）等等（其他规则就不详细说了）。<code>self.__getattribute__(temp[key])(value)</code>会根据映射关系去执行对应方法来做检查。<code>all_in</code>方法会打印错误的规则以及错误数据；<code>pri_excel</code>方法负责通用打印，主要打印错误位置。下面给出打印结果示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pri_excel</span>(<span class="hljs-params">name, sheet, row=<span class="hljs-string">&#x27;&#x27;</span>, col=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-keyword">if</span> row == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> col == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">&quot;表格位置----------------------------------&#123;&#125;-------------------------&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(name, sheet,))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">&quot;表格位置----------------------------------&#123;&#125;--------------------------&#123;&#125;--行&#123;&#125;--列&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>                    name,<br>                    sheet,<br>                    row,<br>                    col))<br>//规则：每个单元格都<span class="hljs-keyword">in</span>指定的表格指定列的合集。数据:::<span class="hljs-number">208</span>--[<span class="hljs-string">&#x27;/冬天的秘密--表.xls&#x27;</span>, <span class="hljs-string">&#x27;冬天的秘密--Sheet1&#x27;</span>, <span class="hljs-string">&#x27;冬天的秘密--列&#x27;</span>]<br>//表格位置----------------------------------\XXX表.xls--------------------------Sheet1--行<span class="hljs-number">712</span>--列XXX（冬天的秘密--列名，注意不是列的index哦，列名，直接让你快速找到位置）<br></code></pre></td></tr></table></figure><h5 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h5><ul><li>遍历规则表</li><li>根据配置在规则表对应列下的规则，找到对应需要检查的配置表，以及规则中指向需要配合检查的另一个配置表（如果有的话）</li><li>按照规则执行检查，打印错误输出</li></ul><h4 id="实际应用与优化："><a href="#实际应用与优化：" class="headerlink" title="实际应用与优化："></a>实际应用与优化：</h4><h5 id="好的方面："><a href="#好的方面：" class="headerlink" title="好的方面："></a>好的方面：</h5><ul><li>目前我有的规则类，在上文中的<code>switch</code>可以看出来，有7大类，每个类下可能有不定数量的规则，总体来说99%满足了我的日常需要了。</li><li>代码结构支持随时自定义规则，你想增加删除规则，也是分分钟的事。你的想法有多优秀，规则就可以有多优秀。</li><li>配规则很简单。有多简单？找到对应规则表位置，打开，写入规则，完事了。规则很复杂吗？看你自己定义了。我日常做法：复制规则，改规则中的excel name，sheet name,col name三个参数，完事。</li><li>输出结果一目了然。错在哪，哪一行，列名是什么，因为什么规则错了，统统都有，会有人看不明白？看不明白的话，那我是真的佛了。</li></ul><h5 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h5><p>问题一：表头经常改动，列名也经常变化，规则表的表头就得手动更改保证和配置表一样（我强迫症，我就想一样，这样子很容易找位置）。比如原来配置表ABCD列，规则表也是ABCD列，后来迭代多次表变成了ABCFG列，我就又要手动删除D，又要手动补充FG。麻烦。于是自动同步表头配置脚本，又应运而生了。</p><p>这个脚本主要做什么事？帮我把D删除，帮我新建FG，如果AB之间多了个小三，那么也会自动把B列（以及B列下的所有规则）往后挪，小三则按照顺序放在A之后。总之，就是同步表头，同时把对应表头下的规则跟着表头一起挪动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 只支持xlsx</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_excel</span>(<span class="hljs-params">excel, df</span>):</span><br>    <span class="hljs-comment"># 先清除格式，再写入，才能成功</span><br>    pd.io.formats.excel.header_style = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">with</span> pd.ExcelWriter(excel) <span class="hljs-keyword">as</span> writer:<br>        df.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;Sheet1&#x27;</span>, startrow=<span class="hljs-number">0</span>, index=<span class="hljs-literal">False</span>, header=<span class="hljs-literal">False</span>)<br>        workbook = writer.book<br>        worksheets = writer.sheets<br>        worksheet = worksheets[<span class="hljs-string">&#x27;Sheet1&#x27;</span>]<br>        worksheet.set_column(<span class="hljs-string">&#x27;A:AD&#x27;</span>, <span class="hljs-number">20</span>)<br>        format1 = workbook.add_format(&#123;<br>            <span class="hljs-comment"># &#x27;bold&#x27;: True,  # 字体加粗</span><br>            <span class="hljs-comment"># &#x27;border&#x27;: 20,  # 单元格边框宽度</span><br>            <span class="hljs-comment"># &#x27;align&#x27;: &#x27;left&#x27;,  # 水平对齐方式</span><br>            <span class="hljs-comment"># &#x27;valign&#x27;: &#x27;vcenter&#x27;,  # 垂直对齐方式</span><br>            <span class="hljs-string">&#x27;fg_color&#x27;</span>: <span class="hljs-string">&#x27;#FFC000&#x27;</span>,  <span class="hljs-comment"># 单元格背景颜色</span><br>            <span class="hljs-comment"># &#x27;text_wrap&#x27;: True,  # 是否自动换行</span><br>        &#125;)<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>):<br>            worksheet.set_row(k, <span class="hljs-number">20</span>, format1)<br>        format2 = workbook.add_format(&#123;<span class="hljs-string">&#x27;fg_color&#x27;</span>: <span class="hljs-string">&#x27;#5B9BD5&#x27;</span>&#125;)<br>        worksheet.set_row(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, format2)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">15</span>):<br>            worksheet.set_row(j, <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><p>弄完之后，所有表长得一模一样，还有背景颜色，一家人就要整整齐齐，真开心。</p><p><img src="/img/image-20210803223027137.png" alt="image-20210803223027137"></p><p>问题二：平台化？</p><p>不打算，不建议搞，于是我砍掉了这个优化。我出于以下考虑：</p><ul><li><p>游戏行业人员会更喜欢和excel打交道</p></li><li><p>表头过多，web很难操作，样式也没excel好看。excel和策划配置表长的一样，容易形成习惯，有助于规则配置。</p></li><li><p>平台化的化，需要数据库。那就又要重新优化问题一了（又要写自动同步数据库表头的脚本）</p></li><li><p>我懒，不想搞平台。就是懒，咋的啦。</p></li></ul><p>问题三：工具运行中，某些规则兼容性不好，报错，就阻断了后面的检查。</p><p>举个例子，你配置一个<code>Dict</code>类规则，默认这个表格内容是可以转换为<code>json</code>或者<code>python dict</code>去做检查，但是配表数据出现了问题，导致报错，阻断后面流程（然后有人就会来找我说报错啦）。我目前的做法是，持续优化规则代码，增加兼容性，提前检查必要的数据格式，或者对易报错代码使用<code>try</code>。现在持续优化后，已经很少出现报错阻断了。一个字，美滋滋（三个字）。</p><p>问题四：效率问题？</p><p>目前100+表格，各种规则配置起来也蛮多的，但是运行时间不需要超过1分钟。所以暂时不用管了。</p><p>其实我也蛮期待，在更多表格数据、规则数据的情况下，工具的运行效率。我也提前预想过一些优化方案来提高效率。</p><p>问题五：规则维护问题—-会不会出现同个规则存在很多表，然后你需要一个一个去更改这些规则的写法？</p><p>我认为是不会出现的。在定义规则之前，就已经考虑通用性了，后续基本不会变动原有规则的写法，最多只会新增新的规则写法。所以旧的规则写法永远不需要去改动，也不建议去改动。如果实在要改动，建议改动代码去兼容原有规则写法。反正至今我都没改动过。</p><p>其他: 有点想把取出来的规则归类整理，再<code>getattr</code>一个类，跑完一个类的检查，再做下一个类，而不是现在混着检查（简单说就是检查顺序跟着大类走）。不过检查顺序又想着跟着表走也好，输出结果也能按照表顺序，也蛮好的。也有点想加入协程，但是涉及<code>open</code>同个表的问题，需要上锁，麻烦，算了，先这样，反正几十秒出结果了，效率能接受。</p><h4 id="附言："><a href="#附言：" class="headerlink" title="附言："></a>附言：</h4><p>仁者见仁智者见智，希望这个工具，成为比较好的配置表检查方案，也期待有人告诉我更好的方案。</p><p>首发于TesterHome:  <a href="https://testerhome.com/topics/30737">https://testerhome.com/topics/30737</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO内部包</title>
    <link href="/2021/08/03/GO%E5%86%85%E9%83%A8%E5%8C%85/"/>
    <url>/2021/08/03/GO%E5%86%85%E9%83%A8%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="结论先行"><a href="#结论先行" class="headerlink" title="结论先行"></a>结论先行</h4><ul><li><p>go通过func名字首字母大小写来控制类属性是否可以被外部包访问（包括但不局限于func、struct）</p></li><li><p>go通过internal文件夹（包括子目录）来决定是否为内部包</p></li></ul><p>首先看下我的测试文件夹结构（记得先执行<code>go mod init test</code>）：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima">└─test<br>    │  <span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br>    │  test.<span class="hljs-built_in">go</span><br>    │  <br>    └─test1<br>        │  hello.<span class="hljs-built_in">go</span><br>        │  test1.<span class="hljs-built_in">go</span><br>        │  <br>        └─test2<br>                test2.<span class="hljs-built_in">go</span><br></code></pre></td></tr></table></figure><p><code>test.go</code>内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;test/test1&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;你调用了package main&quot;</span>)<br>test1.Test1()<br>&#125;<br></code></pre></td></tr></table></figure><p>hello.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> test1<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>test1.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> test1<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test1</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;你调用了package test1 Test1&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>test2.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> test2<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;test/test1&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test2</span><span class="hljs-params">()</span></span> &#123;<br>test1.Hello()<br>fmt.Println(<span class="hljs-string">&quot;你调用了package test2 Test2&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="大小写测试"><a href="#大小写测试" class="headerlink" title="大小写测试"></a>大小写测试</h4><p>Test1()和Hello()都是可以被package main和package test2访问的。</p><p>测试把Test1()和Hello()改成test1()和hello()之后，代码无法运行。</p><h4 id="internal测试"><a href="#internal测试" class="headerlink" title="internal测试"></a>internal测试</h4><p>如果把Hello()改成hello()，那么test2和main包都无法访问test1包下的Hello()方法。可是我想要test2能够访问Hello()但是main不能访问，应该怎么做？</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima">└─test<br>    │  <span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br>    │  test.<span class="hljs-built_in">go</span><br>    │  <br>    └─test1<br>        │  test1.<span class="hljs-built_in">go</span><br>        │  <br>        ├─internal<br>        │      hello.<span class="hljs-built_in">go</span><br>        │      <br>        └─test2<br>                test2.<span class="hljs-built_in">go</span><br>                test3.<span class="hljs-built_in">go</span><br></code></pre></td></tr></table></figure><p>test1文件夹下新建文件夹internal，把hello.go丢进去，同时更改文件内容的package</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> internal<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>test2访问Hello()<code>import &quot;test/test1/internal&quot;</code>没问题；</p><p>man如果也访问<code>import &quot;test/test1/internal&quot;</code>，会提示<code>use of internal package test/test1/internal not allowed (compile)go-staticcheck</code></p><p>官网说明参考：<a href="https://golang.org/doc/go1.4#internalpackages">https://golang.org/doc/go1.4#internalpackages</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO环境配置（VSCODE篇）</title>
    <link href="/2021/08/02/GO%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88VSCODE%E7%AF%87%EF%BC%89/"/>
    <url>/2021/08/02/GO%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88VSCODE%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>公司电脑虽然早已配好go环境，但是家里笔记本还没呢。搞一下，顺带记录实操过程。</p><h4 id="go下载安装："><a href="#go下载安装：" class="headerlink" title="go下载安装："></a>go下载安装：</h4><p>官网：<a href="https://golang.google.cn/">https://golang.google.cn/</a></p><p>建议下载windows安装包，安装过程改路径：D:\Program Files\Go\</p><p>确认系统变量path变量多了：D:\Program Files\Go\bin</p><p>在cmd窗口中执行go，确认go命令生效。</p><h4 id="VS-code配置："><a href="#VS-code配置：" class="headerlink" title="VS code配置："></a>VS code配置：</h4><p>我在D盘新建了文件夹gowork（最好不要出现空格，养成习惯）</p><ul><li><p>vs code安装code run插件</p></li><li><p>用vs code打开gowork文件夹</p></li><li><p>在文件夹新建main.go，此时vs code提示是否安装go扩展以及gopls，最后安装失败（如果没有科学上网肯定失败）</p></li><li><p>设置代理go env -w GOPROXY=<a href="https://goproxy.cn,direct(也有其他代理,可以上网查)/">https://goproxy.cn,direct（也有其他代理，可以上网查）</a></p></li><li><p>重启vs code，仍然提示上图。那么继续点击install all。这次全部成功，同时可以在go path路径下找到下载的gopls</p></li></ul><p><img src="/img/image-20210802221338830.png" alt="image-20210802221338830"></p><h4 id="go-mod环境："><a href="#go-mod环境：" class="headerlink" title="go mod环境："></a>go mod环境：</h4><p>简单测试下go可以运行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;@@@&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接下来新建文件夹以及文件employee.go</p><p><img src="/img/image-20210802221637262.png" alt="image-20210802221637262"></p><p>employee.go内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> employee<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>FirstName   <span class="hljs-keyword">string</span><br>LastName    <span class="hljs-keyword">string</span><br>TotalLeaves <span class="hljs-keyword">int</span><br>LeavesTaken <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Employee)</span> <span class="hljs-title">LeavesRemaining</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s %s has %d leaves remaining&quot;</span>, e.FirstName, e.LastName, (e.TotalLeaves - e.LeavesTaken))<br>&#125;<br><br></code></pre></td></tr></table></figure><p>main.go内容改为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;employee&quot;</span><br><span class="hljs-comment">//（后面修改为import &quot;test/employee&quot;，这里test为go mod init test的对应包名）</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>e := employee.Employee&#123;<br>FirstName:   <span class="hljs-string">&quot;Sam&quot;</span>,<br>LastName:    <span class="hljs-string">&quot;Adolf&quot;</span>,<br>TotalLeaves: <span class="hljs-number">30</span>,<br>LeavesTaken: <span class="hljs-number">20</span>,<br>&#125;<br>e.LeavesRemaining()<br>&#125;<br></code></pre></td></tr></table></figure><p>此时运行main.go失败，会提示包找不到（默认从GOROOT中找包），我们需要用go mod来管理新建的package employee。</p><p>在这个工作目录workspace命令窗口下执行<code>go mod init test</code>（test可以自己命名，同时注意会多出一个go.mod文件）,然后导入包修改为<code>import &quot;test/employee&quot;</code>这里的test必须和<code>go mod init test</code>创建的一致。最后运行Main.go成功（不截图了）。</p><p><img src="/img/image-20210802222315069.png" alt="image-20210802222315069"></p><p>到了这里，你已经配置好基本环境，也能够利用go mod来管理包了。接下来试一下如何import第三方包。</p><h4 id="外部包引用："><a href="#外部包引用：" class="headerlink" title="外部包引用："></a>外部包引用：</h4><p>修改main.go内容为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/jinzhu/configor&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;使用外部包测试：&quot;</span>, configor.Config&#123;&#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行提示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">main.<span class="hljs-keyword">go</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>: no required module provides <span class="hljs-keyword">package</span> github.com/jinzhu/configor; to add it:<br><br>  <span class="hljs-keyword">go</span> get github.com/jinzhu/configor<br></code></pre></td></tr></table></figure><p>好的，那么我们按照提示在vs code终端执行（也可以cmd执行）：<code>go get github.com/jinzhu/configor</code></p><p>在上文提到的go path路径下可以发现<code>github.com/jinzhu/configor</code>包成功下载到了本地。执行main.go成功，如下：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">hello world<br>使用外部包测试： &#123;  <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-number">0</span>s &lt;<span class="hljs-literal">nil</span>&gt; <span class="hljs-literal">false</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="附言："><a href="#附言：" class="headerlink" title="附言："></a>附言：</h4><p>网上很多说改vscode的setting.json，其实可以不用的，改setting.json无非就是改全局设置或者工作目录下新增一个作为单独用户配置，等有需要的时候再行设置即可。总的来说，现在go mod的包管理已经相比以前很优秀了。</p><p>另外，为啥我用vs code不用jetbrain呢？因为JetBrains已经成立中国公司捷并思了，万一哪天不让各位破解用，那还不如趁早熟悉免费的vs code。</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO的单元测试</title>
    <link href="/2021/08/02/GO%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/08/02/GO%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="关键点纪要"><a href="#关键点纪要" class="headerlink" title="关键点纪要"></a>关键点纪要</h4><ul><li><p>文件必须以  <code>_test.go</code>  结尾，函数名必须以  <code>Test</code>  开头。举栗子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">my2_test.<span class="hljs-keyword">go</span>，<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test2</span><span class="hljs-params">()</span></span>&#123;&#125;<br>my_test.<span class="hljs-keyword">go</span>, <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span>&#123;&#125;<br>特别注意，根据习惯，很容易犯错如下：<br>my_test2.<span class="hljs-keyword">go</span>, <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myTest</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">//注意这是错误的</span><br></code></pre></td></tr></table></figure></li><li><p>比如和测试代码同一个包</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">--websockets（文件夹）<br>    --client.<span class="hljs-keyword">go</span>(<span class="hljs-keyword">package</span> websockets)<br>    --clinet_test.<span class="hljs-keyword">go</span><br>    <span class="hljs-keyword">package</span> websockets<br>        <span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test_client</span><span class="hljs-params">(t *testing.T)</span></span>&#123;<br>            <span class="hljs-comment">//测试client.go中的func</span><br>        &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>go test -v  my_test.go</code>  或者  <code>go test -v  .</code>   （注意-v可以打印详细测试结果）</p>  <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf">PS D:\go&gt; go test -v .\websockets\my_test.go<br>=== RUN   Test1<br>map[<span class="hljs-number">1012</span>:&#123;<span class="hljs-keyword">state</span>:&#123;NoUnkeyedLiterals:&#123;&#125; DoNotCompare:[] DoNotCopy:[] atomicMessageInfo:<span class="hljs-variable">&lt;nil&gt;</span>&#125; sizeCache:<span class="hljs-number">0</span> <span class="hljs-literal">unknown</span>Fields:[] PlotIds:[]&#125; <span class="hljs-number">9999</span>:&#123;<span class="hljs-keyword">state</span>:&#123;NoUnkeyedLiterals:&#123;&#125; DoNotCompare:[] DoNotCopy:[] atomicMessageInfo:<span class="hljs-variable">&lt;nil&gt;</span>&#125; sizeCache:<span class="hljs-number">0</span> <span class="hljs-literal">unknown</span>Fields:[] MessageId:<span class="hljs-variable">&lt;nil&gt;</span> ClientIndex:<span class="hljs-variable">&lt;nil&gt;</span> Data:[]&#125;]@<span class="hljs-comment">#@#@#--- PASS: Test1 (0.00s)</span><br>PASS<br>ok      command-line-arguments  <span class="hljs-number">0.106</span>s<br>PS D:\go&gt;<br></code></pre></td></tr></table></figure></li><li><p>在命令行中添加<code>-benchmem</code>参数以显示内存分配情况（暂时没有实操过）</p></li></ul><h4 id="建议收藏"><a href="#建议收藏" class="headerlink" title="建议收藏"></a>建议收藏</h4><p><a href="http://c.biancheng.net/view/124.html">http://c.biancheng.net/view/124.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/391478681">https://zhuanlan.zhihu.com/p/391478681</a></p><p>注意多利用单元测试来测试写的func，避免一直通过在main中调用测试，养成习惯！</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>户外履历</title>
    <link href="/2021/07/20/%E6%88%B7%E5%A4%96%E5%B1%A5%E5%8E%86/"/>
    <url>/2021/07/20/%E6%88%B7%E5%A4%96%E5%B1%A5%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="2017年11月–2020年7月"><a href="#2017年11月–2020年7月" class="headerlink" title="2017年11月–2020年7月"></a>2017年11月–2020年7月</h4><p>city walk为主，主要徒步路线：珠江新城–正佳广场–天河路–中山大道–骏景八匹马，约10公里。徒步时间常为9点过后至10点40左右，最晚徒步时间凌晨1点至3点。</p><h4 id="2020年"><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h4><ul><li>7.11从化天堂顶</li><li>7.19从化鸡枕山</li><li>7.25星溪线，新鞋磨合拉练</li><li>8.8惠州大南山</li><li>8.29莫六公山</li><li>9.05从化桂峰山</li><li>9.12牛塘山，遇云海</li><li>9.26惠州罗浮山</li><li>10.11清远靘雾山</li><li>10.17夜路传说–惠州四方山</li><li>10.25惠州大南山</li><li>11.1城市夜徒21km+</li><li>11.06~07韶关k2–龙斗峰</li><li>11.28~29天上草原–黄梅雪后</li></ul><h4 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h4><ul><li>1.02~03天上草原–黄梅雪后，全广东最靓的景色</li><li>1.15夜徒20公里+</li><li>1.22夜徒20公里+</li><li>1.30白云嶂+银屏山双峰齐登</li><li>4.05~06大丹霞山穿越</li><li>5.01~03广东户外毕业典礼–船底顶罗新线</li><li>7.3从化三角髻</li><li>7.18从化三角山</li><li>9.04~9.05天上草原–黄梅雪后（很热，强度有点超标，三升水不够）</li></ul><h4 id="2023年"><a href="#2023年" class="headerlink" title="2023年"></a>2023年</h4><ul><li>6.28~6.29 江西武功山，沈子村–九龙山–铁蹄峰–金顶–景区下山</li></ul><h4 id="我想记住的名字"><a href="#我想记住的名字" class="headerlink" title="我想记住的名字"></a>我想记住的名字</h4><p>马姐、TAK、海哥、蚊、TT、大照、秋秋、橙子、三文鱼、鬼姐、七月、老李（卖火石）、温姐、小美（越野大神）</p>]]></content>
    
    
    
    <tags>
      
      <tag>户外</tag>
      
      <tag>登山</tag>
      
      <tag>徒步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pb数据的使用--游戏协议工具实战</title>
    <link href="/2021/07/20/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/07/20/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>其实之前已经用python实现过了（协议工具），最近又用go重构了一遍（刚入门go）。所以本篇会分别从go（详细讲）以及py(粗略讲)两方面讲叙。由于鄙人也是小小白，因此会讲的没那么高大上，尽可能俗一点，让其他刚进入游戏的老铁也能看个明白。</p><h4 id="背景分析："><a href="#背景分析：" class="headerlink" title="背景分析："></a>背景分析：</h4><ul><li><p>通讯协议是使用pb数据，而且没有做进一步的二次封装数据包。如果程序做进一步的数据包封装，去约定一些特定规则，加个头啊加个尾什么的，那么就需要去找程序了解这个规则了。</p></li><li><p>用户注册是另外的http服务</p></li><li><p>proto协议文件挺多的，而且内容指不定就变了</p></li></ul><h4 id="需求与方案制定："><a href="#需求与方案制定：" class="headerlink" title="需求与方案制定："></a>需求与方案制定：</h4><p>至少需要实现：从客户端那边log输出中复制所有“发送协议–&gt;&gt;XXX”协议内容，通过工具可以实现并发去创建多个账号并执行这些协议内容。</p><p>为了应对协议内容的增删改变化，决定偷懒，不一一通过原有协议数据执行序列化与反序列化，而是全部通过GM协议执行。好处是可以偷懒，不需要采用其他方式（比如动态import去导入对应需要的xx.pd.go），坏处是不能够对所有协议作反序列化。但是这个并不影响我的核心需求。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">CmdGMReqMsg</span> </span>&#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-built_in">string</span> command = <span class="hljs-number">1</span>; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">CmdGMRspMsg</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来请看代码实战。</p><center><b><font color=black size=6>GO篇</font></b></center><h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><p>“net/http”包使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Get</span><span class="hljs-params">(yoururl <span class="hljs-keyword">string</span>, data <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">map</span>[<span class="hljs-title">string</span>]<span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br>request, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, yoururl, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//加入get参数</span><br>q := request.URL.Query()<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> data &#123;<br>q.Add(key, value)<br>&#125;<br>request.URL.RawQuery = q.Encode()<br>resp, err := http.DefaultClient.Do(request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>data1, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;err-&gt;&quot;</span>, err)<br>&#125;<br>rdata := <span class="hljs-keyword">string</span>(data1)<br>result := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>err1 := json.Unmarshal([]<span class="hljs-keyword">byte</span>(rdata), &amp;result)<br><span class="hljs-keyword">if</span> err1 != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h4 id="proto文件处理"><a href="#proto文件处理" class="headerlink" title="proto文件处理"></a>proto文件处理</h4><p>最简单直接的办法，从官网直接拉protoc.exe文件，通过命令行转换即可。</p><p>举个栗子：</p><p><code>protoc --proto_path=..\\protos --python_out=..\\protos ..\\protos\XXX.proto</code></p><p>转换成go之后得到文件：XX.pb.go，接着如何根据协议内容创建结构体呢？稍微看一下官方例子就不难写出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Gmmsg</span><span class="hljs-params">(gm <span class="hljs-keyword">string</span>)</span> []<span class="hljs-title">byte</span></span> &#123;<br>gm_mess := &amp;pb.CmdGMReqMsg&#123;<br>Command: &amp;gm,<br>&#125;<br><span class="hljs-comment">//通过&quot;google.golang.org/protobuf/proto&quot;序列化</span><br>out, _ := proto.Marshal(gm_mess)<br><span class="hljs-keyword">return</span> out<br>&#125;<br></code></pre></td></tr></table></figure><p>我这边根据实际项目内容分析，协议最后都是嵌套作为message ClientCmdData中 data值，那么也不难写出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Clientmsg</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span> []<span class="hljs-title">byte</span></span> &#123;<br>clinetmsg := &amp;pb.ClientCmdData&#123;<br><span class="hljs-comment">//部分字段省略</span><br>Data:        data,<br>&#125;<br>out, _ := proto.Marshal(clinetmsg)<br><span class="hljs-keyword">return</span> out<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="websocket连接"><a href="#websocket连接" class="headerlink" title="websocket连接"></a>websocket连接</h4><p>主要使用包：<code>&quot;github.com/gorilla/websocket&quot;</code>。这个去github学习一下，基本都能写出基础的websocket链接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span> <span class="hljs-params">(c *websocket.Conn)</span></span> &#123;<br><span class="hljs-keyword">var</span> addr <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;冬天的秘密&quot;</span><br><span class="hljs-keyword">var</span> u = url.URL&#123;Scheme: <span class="hljs-string">&quot;ws&quot;</span>, Host: addr, Path: <span class="hljs-string">&quot;冬天的秘密&quot;</span>&#125;<br>c, _, err := websocket.DefaultDialer.Dial(u.String(), <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;dial:&quot;</span>, err)<br>&#125;<br>log.Printf(<span class="hljs-string">&quot;connecting to %s&quot;</span>, u.String())<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发送与接收，以及反序列化尝试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Send</span><span class="hljs-params">(t []<span class="hljs-keyword">byte</span>, c *websocket.Conn)</span> *<span class="hljs-title">pb</span>.<span class="hljs-title">ServerCmdData</span></span> &#123;<br>c.WriteMessage(websocket.BinaryMessage, t)<br>time.Sleep(<span class="hljs-number">500</span> * time.Millisecond)<br>_, message, _ := c.ReadMessage()<br>serdata := &amp;pb.ServerCmdData&#123;&#125;<br><span class="hljs-keyword">if</span> err := proto.Unmarshal(message, serdata); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(<span class="hljs-string">&quot;failed----------:&quot;</span>, err)<br>&#125;<br>    <span class="hljs-comment">//在我有需要的时候去掉注释，可以针对指定协议反序列化拿到服务器返回的数据</span><br><span class="hljs-comment">// if *serdata.MessageId == int32(协议号) &#123;</span><br><span class="hljs-comment">// temp := &amp;pb.XXXXX&#123;&#125;</span><br><span class="hljs-comment">// if err := proto.Unmarshal(serdata.Data, temp); err != nil &#123;</span><br><span class="hljs-comment">// log.Fatalln(&quot;failed----------:&quot;, err)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// fmt.Printf(&quot;%+v#####&quot;, temp)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">return</span> serdata<br>&#125;<br></code></pre></td></tr></table></figure><p>上面注释代码举例了某个协议号的反序列化，得到反序列化后服务器的返回数据：<br><img src="/img/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B71.PNG"><br>实际游戏的所有协议反序列化则不再详叙。</p><p>另外可以根据需要，多加点实用的功能，比如我增加的：如果服务器处理协议失败可以重发10次，超过10次不管；协议数据中最多会涉及到一个变化的playerid，这个是需要根据实际注册账号得到的playerid的；还有其他小细节可以在工具使用过程中慢慢改善。</p><h4 id="协议Log内容处理"><a href="#协议Log内容处理" class="headerlink" title="协议Log内容处理"></a>协议Log内容处理</h4><p>处理从客户端复制下来的一大批协议内容：发送协议:&gt; XXXXXXX</p><p>这块主要涉及go文件处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Handfile</span><span class="hljs-params">()</span> <span class="hljs-params">(result []<span class="hljs-keyword">string</span>)</span></span> &#123;<br>file := <span class="hljs-string">&quot;冬天的秘密.log&quot;</span><br>f, err := os.Open(file)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err = f.Close(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;()<br>s := bufio.NewScanner(f)<br><span class="hljs-keyword">for</span> s.Scan() &#123;<br>result = <span class="hljs-built_in">append</span>(result, s.Text())<br>&#125;<br>err = s.Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接收log内容，做一定处理（根据需要）然后发送；接收nickname，根据nickname注册并创建nickname游戏角色</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Handmess</span><span class="hljs-params">(nickname <span class="hljs-keyword">string</span>, mess []<span class="hljs-keyword">string</span>)</span></span> &#123;<br><span class="hljs-comment">//涉及协议内容格式，不敢放太多</span><br>con := connect()<br>loginmsg := Clientmsg(<span class="hljs-number">1001</span>, Loginmessage(token, accountid))<br>Resend(loginmsg, con)<br>registmsg := Clientmsg(<span class="hljs-number">1000</span>, Regist(nickname, token, accountid))<br>serverrsg := Resend(registmsg, con)<br><span class="hljs-keyword">if</span> !*serverrsg.Result &#123;<br>log.Printf(<span class="hljs-string">&quot;%s注册失败，该账号可能已经注册并在游戏中创建了账号(或者账号非法)&quot;</span>, nickname)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//省略mess处理与发送</span><br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>con.Close()<br>｝<br></code></pre></td></tr></table></figure><h4 id="go的并发（太香了）"><a href="#go的并发（太香了）" class="headerlink" title="go的并发（太香了）"></a>go的并发（太香了）</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Glimit <span class="hljs-keyword">struct</span> &#123;<br>    n <span class="hljs-keyword">int</span><br>    c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Glimit</span></span> &#123;<br>    <span class="hljs-keyword">return</span> &amp;Glimit&#123;<br>        n: n,<br>        c: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, n),<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Glimit)</span> <span class="hljs-title">Run</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>()</span>)</span> &#123;<br>    g.c &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        f()<br>        &lt;-g.c<br>    &#125;()<br>&#125;<br>g := New(<span class="hljs-number">20</span>)<br>log.Printf(<span class="hljs-string">&quot;start-------------&quot;</span>)<br>filemess := websockets_test.Handfile()<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">200</span>; i++ &#123;<br>    wg.Add(<span class="hljs-number">1</span>)<br>    value := strconv.Itoa(i)<br>    gofunc := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        websockets_test.Handmess(<span class="hljs-string">&quot;newnick&quot;</span>+value, filemess)<br>        log.Printf(<span class="hljs-string">&quot;end-------------%s&quot;</span>, <span class="hljs-string">&quot;newnick&quot;</span>+value)<br>        wg.Done()<br>    &#125;<br>    g.Run(gofunc)<br>&#125;<br>wg.Wait()<br>log.Printf(<span class="hljs-string">&quot;end-------------&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="实战结果"><a href="#实战结果" class="headerlink" title="实战结果"></a>实战结果</h4><p><img src="/img/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B72.PNG"><br>根据图中reg_time可以明确知道，我们的并发成功了，游戏中已经如实创建了我们想要的数据账号。快登录游戏享受吧！</p><center><b><font color=black size=6>Python篇</font></b></center><p>相信大伙的python都比我厉害，因此Python篇会简略一点。</p><ul><li>http请求用request</li><li>proto文件处理同go</li><li>websockets这个也不难</li><li>asyncio使用</li><li>log文件处理相信大家都会了</li><li>config文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#以下举例代码为多个文件代码，实际是分开在不同文件中的</span><br><span class="hljs-comment"># asyncio</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>():</span><br>    semaphore = asyncio.Semaphore(<span class="hljs-number">15</span>)<br>    to_get = [main_logic(i, semaphore) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num)]<br>    <span class="hljs-keyword">await</span> asyncio.wait(to_get)<br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(run())<br>    <span class="hljs-comment"># websockets</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> websockets.connect(_server_ws_url) <span class="hljs-keyword">as</span> ws:<br>        <span class="hljs-comment"># ws.close_timeout = 200</span><br>        <span class="hljs-keyword">await</span> send_message(XXXXXX)<br>    <span class="hljs-comment"># pd数据的引用</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clientmsg</span>(<span class="hljs-params">self, messageid, msg=<span class="hljs-literal">None</span></span>):</span><br>        cmsg = Cmd_pb2.ClientCmdData()<br>        cmsg.messageId = messageid<br>        cmsg.clientIndex = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> msg:<br>            cmsg.data = msg<br>        <span class="hljs-keyword">return</span> cmsg<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">[config]<br><span class="hljs-comment"># 服务器id</span><br>serverid = 冬天的秘密<br>_server_ws_url = 冬天的秘密<br><span class="hljs-comment"># 平台id</span><br>platformId = 冬天的秘密<br><span class="hljs-comment"># 你想要登录的账号，如果不存在会自动注册</span><br>nickname = nihao<br>start = <span class="hljs-number">39</span><br>num = <span class="hljs-number">1</span><br><span class="hljs-comment"># playerid（自增id），进阶功能，可以将协议数据中所有用到playerid替换为该player的正确playerid</span><br>playerid = 冬天的秘密<br>log = 高级账号.log<br></code></pre></td></tr></table></figure><p>另外还有一套配置用于jenkins：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        server = &#123;<br>            <span class="hljs-string">&quot;A服&quot;</span>: <span class="hljs-string">&#x27;冬天的秘密&#x27;</span>,<br>            <span class="hljs-string">&quot;B网&quot;</span>: <span class="hljs-string">&#x27;冬天的秘密&#x27;</span>,<br>        &#125;<br>        serverid = &#123;<br>            <span class="hljs-string">&quot;A服&quot;</span>: XXX,<br>            <span class="hljs-string">&quot;B网&quot;</span>: XX,<br>        &#125;<br>        platformId = &#123;<br>            <span class="hljs-string">&quot;A服&quot;</span>: XX,<br>            <span class="hljs-string">&quot;B网&quot;</span>: XX,<br>        &#125;<br>        log = &#123;<br>            <span class="hljs-string">&quot;高级账号&quot;</span>: <span class="hljs-string">&quot;D:/高级账号.log&quot;</span>,<br>            <span class="hljs-string">&quot;创建新号&quot;</span>: <span class="hljs-string">&quot;D:/创建新号.log&quot;</span>,<br>            <span class="hljs-string">&quot;XX&quot;</span>: <span class="hljs-string">&quot;D:/XX.log&quot;</span>,<br>        &#125;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.getenv(<span class="hljs-string">&quot;choice_server&quot;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你没有选择服务器！！！&quot;</span>)<br>            sys.exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.getenv(<span class="hljs-string">&quot;可选协议&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> os.getenv(<span class="hljs-string">&quot;protos&quot;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你没有填写任何协议内容！！！&quot;</span>)<br>            sys.exit(<span class="hljs-number">0</span>)<br>        self.serverid = serverid[os.getenv(<span class="hljs-string">&quot;choice_server&quot;</span>)]<br>        self.platformId = platformId[os.getenv(<span class="hljs-string">&quot;choice_server&quot;</span>)]<br>        gamename = re.split(<span class="hljs-string">r&#x27;\n&#x27;</span>,os.getenv(<span class="hljs-string">&quot;gamename&quot;</span>))<br>        self.nickname = gamename[<span class="hljs-number">0</span>]<br>        self.num = gamename[<span class="hljs-number">2</span>]<br>        self.start = gamename[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> os.getenv(<span class="hljs-string">&quot;可选协议&quot;</span>):<br>            self.log = linecache.getlines(log[os.getenv(<span class="hljs-string">&quot;可选协议&quot;</span>)])<br>        <span class="hljs-keyword">else</span>:<br>            self.log = re.split(<span class="hljs-string">r&#x27;\n&#x27;</span>, os.getenv(<span class="hljs-string">&quot;protos&quot;</span>))<br>        self._server_ws_url = server[os.getenv(<span class="hljs-string">&quot;choice_server&quot;</span>)]<br></code></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>将ws接受单独出来作为单独协程处理接受服务器数据，该协程写在ws创建连接之后func connect() (c *websocket.Conn) {}</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span> <span class="hljs-params">(c *websocket.Conn)</span></span> &#123;<br><span class="hljs-comment">//省略创建连接</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span>&#123;<br>        <span class="hljs-comment">//如果ws断开，则break</span><br>        <span class="hljs-comment">//否则根据协议id作对应反序列化处理</span><br>        <span class="hljs-comment">//写入log日志，记录服务器返回内容</span><br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/%E6%B8%B8%E6%88%8F%E5%8D%8F%E8%AE%AE%E5%B7%A5%E5%85%B73.jpg"><br>同时把客户端发送的协议内容也一并写入Log日志，效果如上</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>游戏协议</tag>
      
      <tag>protobuf</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
